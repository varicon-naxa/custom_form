// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'input_field.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

T _$identity<T>(T value) => value;

final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');

InputField _$InputFieldFromJson(Map<String, dynamic> json) {
  switch (json['type']) {
    case 'text':
      return TextInputField.fromJson(json);
    case 'signature':
      return SignatureInputField.fromJson(json);
    case 'multisignature':
      return MultiSignatureInputField.fromJson(json);
    case 'date':
      return DateInputField.fromJson(json);
    case 'instruction':
      return InstructionInputField.fromJson(json);
    case 'section':
      return SectionInputField.fromJson(json);
    case 'time':
      return TimeInputField.fromJson(json);
    case 'url':
      return UrlInputField.fromJson(json);
    case 'number':
      return NumberInputField.fromJson(json);
    case 'phone':
      return PhoneInputField.fromJson(json);
    case 'email':
      return EmailInputField.fromJson(json);
    case 'datetimelocal':
      return DateTimeInputField.fromJson(json);
    case 'comment':
      return CommentInputField.fromJson(json);
    case 'dropdown':
      return DropdownInputField.fromJson(json);
    case 'multipleselect':
      return MultipleInputField.fromJson(json);
    case 'checkbox':
      return CheckboxInputField.fromJson(json);
    case 'radiogroup':
      return RadioInputField.fromJson(json);
    case 'yesno':
      return YesNoInputField.fromJson(json);
    case 'yesnona':
      return YesNoNaInputField.fromJson(json);
    case 'files':
      return FileInputField.fromJson(json);
    case 'images':
      return ImageInputField.fromJson(json);
    case 'geolocation':
      return GeolocationField.fromJson(json);
    case 'map':
      return MapField.fromJson(json);
    case 'table':
      return TableField.fromJson(json);
    case 'advtable':
      return AdvTableField.fromJson(json);

    default:
      return _FallbackInputField.fromJson(json);
  }
}

/// @nodoc
mixin _$InputField {
  @JsonKey(name: 'id')
  String get id => throw _privateConstructorUsedError;
  @JsonKey(name: 'label')
  String? get label => throw _privateConstructorUsedError;
  @JsonKey(name: 'answer')
  dynamic get answer => throw _privateConstructorUsedError;
  @JsonKey(name: 'description')
  String? get description => throw _privateConstructorUsedError;
  @JsonKey(name: 'isRequired')
  bool get isRequired => throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        geolocation,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)
        map,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        table,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        advtable,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
    required TResult orElse(),
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
    required TResult Function(MapField value) map,
    required TResult Function(TableField value) table,
    required TResult Function(AdvTableField value) advtable,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
    TResult? Function(MapField value)? map,
    TResult? Function(TableField value)? table,
    TResult? Function(AdvTableField value)? advtable,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    TResult Function(MapField value)? map,
    TResult Function(TableField value)? table,
    TResult Function(AdvTableField value)? advtable,
    required TResult orElse(),
  }) =>
      throw _privateConstructorUsedError;

  /// Serializes this InputField to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $InputFieldCopyWith<InputField> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $InputFieldCopyWith<$Res> {
  factory $InputFieldCopyWith(
          InputField value, $Res Function(InputField) then) =
      _$InputFieldCopyWithImpl<$Res, InputField>;
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'isRequired') bool isRequired});
}

/// @nodoc
class _$InputFieldCopyWithImpl<$Res, $Val extends InputField>
    implements $InputFieldCopyWith<$Res> {
  _$InputFieldCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? description = freezed,
    Object? isRequired = null,
  }) {
    return _then(_value.copyWith(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$FallbackInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$FallbackInputFieldImplCopyWith(_$FallbackInputFieldImpl value,
          $Res Function(_$FallbackInputFieldImpl) then) =
      __$$FallbackInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'answer') String? answer,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'isRequired') bool isRequired});
}

/// @nodoc
class __$$FallbackInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$FallbackInputFieldImpl>
    implements _$$FallbackInputFieldImplCopyWith<$Res> {
  __$$FallbackInputFieldImplCopyWithImpl(_$FallbackInputFieldImpl _value,
      $Res Function(_$FallbackInputFieldImpl) _then)
      : super(_value, _then);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? answer = freezed,
    Object? description = freezed,
    Object? isRequired = null,
  }) {
    return _then(_$FallbackInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$FallbackInputFieldImpl implements _FallbackInputField {
  const _$FallbackInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      final String? $type})
      : $type = $type ?? 'fallback';

  factory _$FallbackInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$FallbackInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'answer')
  final String? answer;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.fallback(id: $id, label: $label, answer: $answer, description: $description, isRequired: $isRequired)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$FallbackInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.answer, answer) || other.answer == answer) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode =>
      Object.hash(runtimeType, id, label, answer, description, isRequired);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$FallbackInputFieldImplCopyWith<_$FallbackInputFieldImpl> get copyWith =>
      __$$FallbackInputFieldImplCopyWithImpl<_$FallbackInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        geolocation,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)
        map,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        table,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        advtable,
  }) {
    return fallback(id, label, answer, description, isRequired);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
  }) {
    return fallback?.call(id, label, answer, description, isRequired);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
    required TResult orElse(),
  }) {
    if (fallback != null) {
      return fallback(id, label, answer, description, isRequired);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
    required TResult Function(MapField value) map,
    required TResult Function(TableField value) table,
    required TResult Function(AdvTableField value) advtable,
  }) {
    return fallback(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
    TResult? Function(MapField value)? map,
    TResult? Function(TableField value)? table,
    TResult? Function(AdvTableField value)? advtable,
  }) {
    return fallback?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    TResult Function(MapField value)? map,
    TResult Function(TableField value)? table,
    TResult Function(AdvTableField value)? advtable,
    required TResult orElse(),
  }) {
    if (fallback != null) {
      return fallback(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$FallbackInputFieldImplToJson(
      this,
    );
  }
}

abstract class _FallbackInputField implements InputField {
  const factory _FallbackInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'answer') final String? answer,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'isRequired') final bool isRequired}) =
      _$FallbackInputFieldImpl;

  factory _FallbackInputField.fromJson(Map<String, dynamic> json) =
      _$FallbackInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @override
  @JsonKey(name: 'answer')
  String? get answer;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$FallbackInputFieldImplCopyWith<_$FallbackInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$TextInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$TextInputFieldImplCopyWith(_$TextInputFieldImpl value,
          $Res Function(_$TextInputFieldImpl) then) =
      __$$TextInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'name') String? name,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'isRequired') bool isRequired,
      @JsonKey(name: 'answer') String? answer});
}

/// @nodoc
class __$$TextInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$TextInputFieldImpl>
    implements _$$TextInputFieldImplCopyWith<$Res> {
  __$$TextInputFieldImplCopyWithImpl(
      _$TextInputFieldImpl _value, $Res Function(_$TextInputFieldImpl) _then)
      : super(_value, _then);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? name = freezed,
    Object? description = freezed,
    Object? isRequired = null,
    Object? answer = freezed,
  }) {
    return _then(_$TextInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      name: freezed == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$TextInputFieldImpl implements TextInputField {
  const _$TextInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'name') this.name,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      @JsonKey(name: 'answer') this.answer,
      final String? $type})
      : $type = $type ?? 'text';

  factory _$TextInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$TextInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'name')
  final String? name;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;
  @override
  @JsonKey(name: 'answer')
  final String? answer;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.text(id: $id, label: $label, name: $name, description: $description, isRequired: $isRequired, answer: $answer)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$TextInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.name, name) || other.name == name) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired) &&
            (identical(other.answer, answer) || other.answer == answer));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(
      runtimeType, id, label, name, description, isRequired, answer);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$TextInputFieldImplCopyWith<_$TextInputFieldImpl> get copyWith =>
      __$$TextInputFieldImplCopyWithImpl<_$TextInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        geolocation,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)
        map,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        table,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        advtable,
  }) {
    return text(id, label, name, description, isRequired, answer);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
  }) {
    return text?.call(id, label, name, description, isRequired, answer);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
    required TResult orElse(),
  }) {
    if (text != null) {
      return text(id, label, name, description, isRequired, answer);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
    required TResult Function(MapField value) map,
    required TResult Function(TableField value) table,
    required TResult Function(AdvTableField value) advtable,
  }) {
    return text(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
    TResult? Function(MapField value)? map,
    TResult? Function(TableField value)? table,
    TResult? Function(AdvTableField value)? advtable,
  }) {
    return text?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    TResult Function(MapField value)? map,
    TResult Function(TableField value)? table,
    TResult Function(AdvTableField value)? advtable,
    required TResult orElse(),
  }) {
    if (text != null) {
      return text(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$TextInputFieldImplToJson(
      this,
    );
  }
}

abstract class TextInputField implements InputField {
  const factory TextInputField(
      {@JsonKey(name: 'id') required final String id,
      @JsonKey(name: 'label') final String? label,
      @JsonKey(name: 'name') final String? name,
      @JsonKey(name: 'description') final String? description,
      @JsonKey(name: 'isRequired') final bool isRequired,
      @JsonKey(name: 'answer') final String? answer}) = _$TextInputFieldImpl;

  factory TextInputField.fromJson(Map<String, dynamic> json) =
      _$TextInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @JsonKey(name: 'name')
  String? get name;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;
  @override
  @JsonKey(name: 'answer')
  String? get answer;

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$TextInputFieldImplCopyWith<_$TextInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$SignatureInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$SignatureInputFieldImplCopyWith(_$SignatureInputFieldImpl value,
          $Res Function(_$SignatureInputFieldImpl) then) =
      __$$SignatureInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'name') String? name,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'visible') bool visible,
      @JsonKey(name: 'isRequired') bool isRequired,
      @JsonKey(name: 'answer') Map<String, dynamic>? answer});
}

/// @nodoc
class __$$SignatureInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$SignatureInputFieldImpl>
    implements _$$SignatureInputFieldImplCopyWith<$Res> {
  __$$SignatureInputFieldImplCopyWithImpl(_$SignatureInputFieldImpl _value,
      $Res Function(_$SignatureInputFieldImpl) _then)
      : super(_value, _then);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? name = freezed,
    Object? description = freezed,
    Object? visible = null,
    Object? isRequired = null,
    Object? answer = freezed,
  }) {
    return _then(_$SignatureInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      name: freezed == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      visible: null == visible
          ? _value.visible
          : visible // ignore: cast_nullable_to_non_nullable
              as bool,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
      answer: freezed == answer
          ? _value._answer
          : answer // ignore: cast_nullable_to_non_nullable
              as Map<String, dynamic>?,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$SignatureInputFieldImpl implements SignatureInputField {
  const _$SignatureInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'name') this.name,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'visible') this.visible = true,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      @JsonKey(name: 'answer') final Map<String, dynamic>? answer,
      final String? $type})
      : _answer = answer,
        $type = $type ?? 'signature';

  factory _$SignatureInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$SignatureInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'name')
  final String? name;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'visible')
  final bool visible;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;
  final Map<String, dynamic>? _answer;
  @override
  @JsonKey(name: 'answer')
  Map<String, dynamic>? get answer {
    final value = _answer;
    if (value == null) return null;
    if (_answer is EqualUnmodifiableMapView) return _answer;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableMapView(value);
  }

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.signature(id: $id, label: $label, name: $name, description: $description, visible: $visible, isRequired: $isRequired, answer: $answer)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$SignatureInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.name, name) || other.name == name) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.visible, visible) || other.visible == visible) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired) &&
            const DeepCollectionEquality().equals(other._answer, _answer));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, id, label, name, description,
      visible, isRequired, const DeepCollectionEquality().hash(_answer));

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$SignatureInputFieldImplCopyWith<_$SignatureInputFieldImpl> get copyWith =>
      __$$SignatureInputFieldImplCopyWithImpl<_$SignatureInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        geolocation,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)
        map,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        table,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        advtable,
  }) {
    return signature(id, label, name, description, visible, isRequired, answer);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
  }) {
    return signature?.call(
        id, label, name, description, visible, isRequired, answer);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
    required TResult orElse(),
  }) {
    if (signature != null) {
      return signature(
          id, label, name, description, visible, isRequired, answer);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
    required TResult Function(MapField value) map,
    required TResult Function(TableField value) table,
    required TResult Function(AdvTableField value) advtable,
  }) {
    return signature(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
    TResult? Function(MapField value)? map,
    TResult? Function(TableField value)? table,
    TResult? Function(AdvTableField value)? advtable,
  }) {
    return signature?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    TResult Function(MapField value)? map,
    TResult Function(TableField value)? table,
    TResult Function(AdvTableField value)? advtable,
    required TResult orElse(),
  }) {
    if (signature != null) {
      return signature(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$SignatureInputFieldImplToJson(
      this,
    );
  }
}

abstract class SignatureInputField implements InputField {
  const factory SignatureInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'name') final String? name,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'visible') final bool visible,
          @JsonKey(name: 'isRequired') final bool isRequired,
          @JsonKey(name: 'answer') final Map<String, dynamic>? answer}) =
      _$SignatureInputFieldImpl;

  factory SignatureInputField.fromJson(Map<String, dynamic> json) =
      _$SignatureInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @JsonKey(name: 'name')
  String? get name;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @JsonKey(name: 'visible')
  bool get visible;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;
  @override
  @JsonKey(name: 'answer')
  Map<String, dynamic>? get answer;

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$SignatureInputFieldImplCopyWith<_$SignatureInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$MultiSignatureInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$MultiSignatureInputFieldImplCopyWith(
          _$MultiSignatureInputFieldImpl value,
          $Res Function(_$MultiSignatureInputFieldImpl) then) =
      __$$MultiSignatureInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'name') String? name,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'isRequired') bool isRequired,
      @JsonKey(name: 'answer') List<SingleSignature>? answer});
}

/// @nodoc
class __$$MultiSignatureInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$MultiSignatureInputFieldImpl>
    implements _$$MultiSignatureInputFieldImplCopyWith<$Res> {
  __$$MultiSignatureInputFieldImplCopyWithImpl(
      _$MultiSignatureInputFieldImpl _value,
      $Res Function(_$MultiSignatureInputFieldImpl) _then)
      : super(_value, _then);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? name = freezed,
    Object? description = freezed,
    Object? isRequired = null,
    Object? answer = freezed,
  }) {
    return _then(_$MultiSignatureInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      name: freezed == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
      answer: freezed == answer
          ? _value._answer
          : answer // ignore: cast_nullable_to_non_nullable
              as List<SingleSignature>?,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$MultiSignatureInputFieldImpl implements MultiSignatureInputField {
  const _$MultiSignatureInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'name') this.name,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      @JsonKey(name: 'answer') final List<SingleSignature>? answer,
      final String? $type})
      : _answer = answer,
        $type = $type ?? 'multisignature';

  factory _$MultiSignatureInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$MultiSignatureInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'name')
  final String? name;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;
  final List<SingleSignature>? _answer;
  @override
  @JsonKey(name: 'answer')
  List<SingleSignature>? get answer {
    final value = _answer;
    if (value == null) return null;
    if (_answer is EqualUnmodifiableListView) return _answer;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(value);
  }

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.multisignature(id: $id, label: $label, name: $name, description: $description, isRequired: $isRequired, answer: $answer)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$MultiSignatureInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.name, name) || other.name == name) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired) &&
            const DeepCollectionEquality().equals(other._answer, _answer));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, id, label, name, description,
      isRequired, const DeepCollectionEquality().hash(_answer));

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$MultiSignatureInputFieldImplCopyWith<_$MultiSignatureInputFieldImpl>
      get copyWith => __$$MultiSignatureInputFieldImplCopyWithImpl<
          _$MultiSignatureInputFieldImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        geolocation,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)
        map,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        table,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        advtable,
  }) {
    return multisignature(id, label, name, description, isRequired, answer);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
  }) {
    return multisignature?.call(
        id, label, name, description, isRequired, answer);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
    required TResult orElse(),
  }) {
    if (multisignature != null) {
      return multisignature(id, label, name, description, isRequired, answer);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
    required TResult Function(MapField value) map,
    required TResult Function(TableField value) table,
    required TResult Function(AdvTableField value) advtable,
  }) {
    return multisignature(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
    TResult? Function(MapField value)? map,
    TResult? Function(TableField value)? table,
    TResult? Function(AdvTableField value)? advtable,
  }) {
    return multisignature?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    TResult Function(MapField value)? map,
    TResult Function(TableField value)? table,
    TResult Function(AdvTableField value)? advtable,
    required TResult orElse(),
  }) {
    if (multisignature != null) {
      return multisignature(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$MultiSignatureInputFieldImplToJson(
      this,
    );
  }
}

abstract class MultiSignatureInputField implements InputField {
  const factory MultiSignatureInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'name') final String? name,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'isRequired') final bool isRequired,
          @JsonKey(name: 'answer') final List<SingleSignature>? answer}) =
      _$MultiSignatureInputFieldImpl;

  factory MultiSignatureInputField.fromJson(Map<String, dynamic> json) =
      _$MultiSignatureInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @JsonKey(name: 'name')
  String? get name;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;
  @override
  @JsonKey(name: 'answer')
  List<SingleSignature>? get answer;

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$MultiSignatureInputFieldImplCopyWith<_$MultiSignatureInputFieldImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$DateInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$DateInputFieldImplCopyWith(_$DateInputFieldImpl value,
          $Res Function(_$DateInputFieldImpl) then) =
      __$$DateInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'answer') String? answer,
      @JsonKey(name: 'name') String? name,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'isRequired') bool isRequired});
}

/// @nodoc
class __$$DateInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$DateInputFieldImpl>
    implements _$$DateInputFieldImplCopyWith<$Res> {
  __$$DateInputFieldImplCopyWithImpl(
      _$DateInputFieldImpl _value, $Res Function(_$DateInputFieldImpl) _then)
      : super(_value, _then);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? answer = freezed,
    Object? name = freezed,
    Object? description = freezed,
    Object? isRequired = null,
  }) {
    return _then(_$DateInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
      name: freezed == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$DateInputFieldImpl implements DateInputField {
  const _$DateInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'name') this.name,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      final String? $type})
      : $type = $type ?? 'date';

  factory _$DateInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$DateInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'answer')
  final String? answer;
  @override
  @JsonKey(name: 'name')
  final String? name;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.date(id: $id, label: $label, answer: $answer, name: $name, description: $description, isRequired: $isRequired)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$DateInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.answer, answer) || other.answer == answer) &&
            (identical(other.name, name) || other.name == name) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(
      runtimeType, id, label, answer, name, description, isRequired);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$DateInputFieldImplCopyWith<_$DateInputFieldImpl> get copyWith =>
      __$$DateInputFieldImplCopyWithImpl<_$DateInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        geolocation,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)
        map,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        table,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        advtable,
  }) {
    return date(id, label, answer, name, description, isRequired);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
  }) {
    return date?.call(id, label, answer, name, description, isRequired);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
    required TResult orElse(),
  }) {
    if (date != null) {
      return date(id, label, answer, name, description, isRequired);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
    required TResult Function(MapField value) map,
    required TResult Function(TableField value) table,
    required TResult Function(AdvTableField value) advtable,
  }) {
    return date(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
    TResult? Function(MapField value)? map,
    TResult? Function(TableField value)? table,
    TResult? Function(AdvTableField value)? advtable,
  }) {
    return date?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    TResult Function(MapField value)? map,
    TResult Function(TableField value)? table,
    TResult Function(AdvTableField value)? advtable,
    required TResult orElse(),
  }) {
    if (date != null) {
      return date(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$DateInputFieldImplToJson(
      this,
    );
  }
}

abstract class DateInputField implements InputField {
  const factory DateInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'answer') final String? answer,
          @JsonKey(name: 'name') final String? name,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'isRequired') final bool isRequired}) =
      _$DateInputFieldImpl;

  factory DateInputField.fromJson(Map<String, dynamic> json) =
      _$DateInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @override
  @JsonKey(name: 'answer')
  String? get answer;
  @JsonKey(name: 'name')
  String? get name;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$DateInputFieldImplCopyWith<_$DateInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$InstructionInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$InstructionInputFieldImplCopyWith(
          _$InstructionInputFieldImpl value,
          $Res Function(_$InstructionInputFieldImpl) then) =
      __$$InstructionInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'answer') String? answer,
      @JsonKey(name: 'name') String? name,
      @JsonKey(readValue: readInstruction) String? instruction,
      String? description,
      @JsonKey(name: 'attachments') List<Map<String, dynamic>>? attachments,
      @JsonKey(name: 'isRequired') bool isRequired});
}

/// @nodoc
class __$$InstructionInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$InstructionInputFieldImpl>
    implements _$$InstructionInputFieldImplCopyWith<$Res> {
  __$$InstructionInputFieldImplCopyWithImpl(_$InstructionInputFieldImpl _value,
      $Res Function(_$InstructionInputFieldImpl) _then)
      : super(_value, _then);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? answer = freezed,
    Object? name = freezed,
    Object? instruction = freezed,
    Object? description = freezed,
    Object? attachments = freezed,
    Object? isRequired = null,
  }) {
    return _then(_$InstructionInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
      name: freezed == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as String?,
      instruction: freezed == instruction
          ? _value.instruction
          : instruction // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      attachments: freezed == attachments
          ? _value._attachments
          : attachments // ignore: cast_nullable_to_non_nullable
              as List<Map<String, dynamic>>?,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$InstructionInputFieldImpl implements InstructionInputField {
  const _$InstructionInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'name') this.name,
      @JsonKey(readValue: readInstruction) this.instruction,
      this.description,
      @JsonKey(name: 'attachments')
      final List<Map<String, dynamic>>? attachments,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      final String? $type})
      : _attachments = attachments,
        $type = $type ?? 'instruction';

  factory _$InstructionInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$InstructionInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'answer')
  final String? answer;
  @override
  @JsonKey(name: 'name')
  final String? name;
  @override
  @JsonKey(readValue: readInstruction)
  final String? instruction;
  @override
  final String? description;
  final List<Map<String, dynamic>>? _attachments;
  @override
  @JsonKey(name: 'attachments')
  List<Map<String, dynamic>>? get attachments {
    final value = _attachments;
    if (value == null) return null;
    if (_attachments is EqualUnmodifiableListView) return _attachments;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(value);
  }

  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.instruction(id: $id, label: $label, answer: $answer, name: $name, instruction: $instruction, description: $description, attachments: $attachments, isRequired: $isRequired)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$InstructionInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.answer, answer) || other.answer == answer) &&
            (identical(other.name, name) || other.name == name) &&
            (identical(other.instruction, instruction) ||
                other.instruction == instruction) &&
            (identical(other.description, description) ||
                other.description == description) &&
            const DeepCollectionEquality()
                .equals(other._attachments, _attachments) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(
      runtimeType,
      id,
      label,
      answer,
      name,
      instruction,
      description,
      const DeepCollectionEquality().hash(_attachments),
      isRequired);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$InstructionInputFieldImplCopyWith<_$InstructionInputFieldImpl>
      get copyWith => __$$InstructionInputFieldImplCopyWithImpl<
          _$InstructionInputFieldImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        geolocation,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)
        map,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        table,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        advtable,
  }) {
    return instruction(id, label, answer, name, this.instruction, description,
        attachments, isRequired);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
  }) {
    return instruction?.call(id, label, answer, name, this.instruction,
        description, attachments, isRequired);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
    required TResult orElse(),
  }) {
    if (instruction != null) {
      return instruction(id, label, answer, name, this.instruction, description,
          attachments, isRequired);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
    required TResult Function(MapField value) map,
    required TResult Function(TableField value) table,
    required TResult Function(AdvTableField value) advtable,
  }) {
    return instruction(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
    TResult? Function(MapField value)? map,
    TResult? Function(TableField value)? table,
    TResult? Function(AdvTableField value)? advtable,
  }) {
    return instruction?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    TResult Function(MapField value)? map,
    TResult Function(TableField value)? table,
    TResult Function(AdvTableField value)? advtable,
    required TResult orElse(),
  }) {
    if (instruction != null) {
      return instruction(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$InstructionInputFieldImplToJson(
      this,
    );
  }
}

abstract class InstructionInputField implements InputField {
  const factory InstructionInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'answer') final String? answer,
          @JsonKey(name: 'name') final String? name,
          @JsonKey(readValue: readInstruction) final String? instruction,
          final String? description,
          @JsonKey(name: 'attachments')
          final List<Map<String, dynamic>>? attachments,
          @JsonKey(name: 'isRequired') final bool isRequired}) =
      _$InstructionInputFieldImpl;

  factory InstructionInputField.fromJson(Map<String, dynamic> json) =
      _$InstructionInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @override
  @JsonKey(name: 'answer')
  String? get answer;
  @JsonKey(name: 'name')
  String? get name;
  @JsonKey(readValue: readInstruction)
  String? get instruction;
  @override
  String? get description;
  @JsonKey(name: 'attachments')
  List<Map<String, dynamic>>? get attachments;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$InstructionInputFieldImplCopyWith<_$InstructionInputFieldImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$SectionInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$SectionInputFieldImplCopyWith(_$SectionInputFieldImpl value,
          $Res Function(_$SectionInputFieldImpl) then) =
      __$$SectionInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'answer') String? answer,
      @JsonKey(name: 'name') String? name,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'instruction') String? instruction,
      @JsonKey(name: 'isRequired') bool isRequired});
}

/// @nodoc
class __$$SectionInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$SectionInputFieldImpl>
    implements _$$SectionInputFieldImplCopyWith<$Res> {
  __$$SectionInputFieldImplCopyWithImpl(_$SectionInputFieldImpl _value,
      $Res Function(_$SectionInputFieldImpl) _then)
      : super(_value, _then);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? answer = freezed,
    Object? name = freezed,
    Object? description = freezed,
    Object? instruction = freezed,
    Object? isRequired = null,
  }) {
    return _then(_$SectionInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
      name: freezed == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      instruction: freezed == instruction
          ? _value.instruction
          : instruction // ignore: cast_nullable_to_non_nullable
              as String?,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$SectionInputFieldImpl implements SectionInputField {
  const _$SectionInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'name') this.name,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'instruction') this.instruction,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      final String? $type})
      : $type = $type ?? 'section';

  factory _$SectionInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$SectionInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'answer')
  final String? answer;
  @override
  @JsonKey(name: 'name')
  final String? name;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'instruction')
  final String? instruction;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.section(id: $id, label: $label, answer: $answer, name: $name, description: $description, instruction: $instruction, isRequired: $isRequired)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$SectionInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.answer, answer) || other.answer == answer) &&
            (identical(other.name, name) || other.name == name) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.instruction, instruction) ||
                other.instruction == instruction) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, id, label, answer, name,
      description, instruction, isRequired);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$SectionInputFieldImplCopyWith<_$SectionInputFieldImpl> get copyWith =>
      __$$SectionInputFieldImplCopyWithImpl<_$SectionInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        geolocation,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)
        map,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        table,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        advtable,
  }) {
    return section(
        id, label, answer, name, description, this.instruction, isRequired);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
  }) {
    return section?.call(
        id, label, answer, name, description, this.instruction, isRequired);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
    required TResult orElse(),
  }) {
    if (section != null) {
      return section(
          id, label, answer, name, description, this.instruction, isRequired);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
    required TResult Function(MapField value) map,
    required TResult Function(TableField value) table,
    required TResult Function(AdvTableField value) advtable,
  }) {
    return section(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
    TResult? Function(MapField value)? map,
    TResult? Function(TableField value)? table,
    TResult? Function(AdvTableField value)? advtable,
  }) {
    return section?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    TResult Function(MapField value)? map,
    TResult Function(TableField value)? table,
    TResult Function(AdvTableField value)? advtable,
    required TResult orElse(),
  }) {
    if (section != null) {
      return section(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$SectionInputFieldImplToJson(
      this,
    );
  }
}

abstract class SectionInputField implements InputField {
  const factory SectionInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'answer') final String? answer,
          @JsonKey(name: 'name') final String? name,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'instruction') final String? instruction,
          @JsonKey(name: 'isRequired') final bool isRequired}) =
      _$SectionInputFieldImpl;

  factory SectionInputField.fromJson(Map<String, dynamic> json) =
      _$SectionInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @override
  @JsonKey(name: 'answer')
  String? get answer;
  @JsonKey(name: 'name')
  String? get name;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @JsonKey(name: 'instruction')
  String? get instruction;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$SectionInputFieldImplCopyWith<_$SectionInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$TimeInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$TimeInputFieldImplCopyWith(_$TimeInputFieldImpl value,
          $Res Function(_$TimeInputFieldImpl) then) =
      __$$TimeInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'answer') String? answer,
      @JsonKey(name: 'name') String? name,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'isRequired') bool isRequired});
}

/// @nodoc
class __$$TimeInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$TimeInputFieldImpl>
    implements _$$TimeInputFieldImplCopyWith<$Res> {
  __$$TimeInputFieldImplCopyWithImpl(
      _$TimeInputFieldImpl _value, $Res Function(_$TimeInputFieldImpl) _then)
      : super(_value, _then);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? answer = freezed,
    Object? name = freezed,
    Object? description = freezed,
    Object? isRequired = null,
  }) {
    return _then(_$TimeInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
      name: freezed == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$TimeInputFieldImpl implements TimeInputField {
  const _$TimeInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'name') this.name,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      final String? $type})
      : $type = $type ?? 'time';

  factory _$TimeInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$TimeInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'answer')
  final String? answer;
  @override
  @JsonKey(name: 'name')
  final String? name;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.time(id: $id, label: $label, answer: $answer, name: $name, description: $description, isRequired: $isRequired)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$TimeInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.answer, answer) || other.answer == answer) &&
            (identical(other.name, name) || other.name == name) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(
      runtimeType, id, label, answer, name, description, isRequired);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$TimeInputFieldImplCopyWith<_$TimeInputFieldImpl> get copyWith =>
      __$$TimeInputFieldImplCopyWithImpl<_$TimeInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        geolocation,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)
        map,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        table,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        advtable,
  }) {
    return time(id, label, answer, name, description, isRequired);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
  }) {
    return time?.call(id, label, answer, name, description, isRequired);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
    required TResult orElse(),
  }) {
    if (time != null) {
      return time(id, label, answer, name, description, isRequired);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
    required TResult Function(MapField value) map,
    required TResult Function(TableField value) table,
    required TResult Function(AdvTableField value) advtable,
  }) {
    return time(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
    TResult? Function(MapField value)? map,
    TResult? Function(TableField value)? table,
    TResult? Function(AdvTableField value)? advtable,
  }) {
    return time?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    TResult Function(MapField value)? map,
    TResult Function(TableField value)? table,
    TResult Function(AdvTableField value)? advtable,
    required TResult orElse(),
  }) {
    if (time != null) {
      return time(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$TimeInputFieldImplToJson(
      this,
    );
  }
}

abstract class TimeInputField implements InputField {
  const factory TimeInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'answer') final String? answer,
          @JsonKey(name: 'name') final String? name,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'isRequired') final bool isRequired}) =
      _$TimeInputFieldImpl;

  factory TimeInputField.fromJson(Map<String, dynamic> json) =
      _$TimeInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @override
  @JsonKey(name: 'answer')
  String? get answer;
  @JsonKey(name: 'name')
  String? get name;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$TimeInputFieldImplCopyWith<_$TimeInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$UrlInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$UrlInputFieldImplCopyWith(
          _$UrlInputFieldImpl value, $Res Function(_$UrlInputFieldImpl) then) =
      __$$UrlInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'name') String? name,
      @JsonKey(name: 'answer') String? answer,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'isRequired') bool isRequired});
}

/// @nodoc
class __$$UrlInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$UrlInputFieldImpl>
    implements _$$UrlInputFieldImplCopyWith<$Res> {
  __$$UrlInputFieldImplCopyWithImpl(
      _$UrlInputFieldImpl _value, $Res Function(_$UrlInputFieldImpl) _then)
      : super(_value, _then);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? name = freezed,
    Object? answer = freezed,
    Object? description = freezed,
    Object? isRequired = null,
  }) {
    return _then(_$UrlInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      name: freezed == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$UrlInputFieldImpl implements UrlInputField {
  const _$UrlInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'name') this.name,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      final String? $type})
      : $type = $type ?? 'url';

  factory _$UrlInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$UrlInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'name')
  final String? name;
  @override
  @JsonKey(name: 'answer')
  final String? answer;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.url(id: $id, label: $label, name: $name, answer: $answer, description: $description, isRequired: $isRequired)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$UrlInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.name, name) || other.name == name) &&
            (identical(other.answer, answer) || other.answer == answer) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(
      runtimeType, id, label, name, answer, description, isRequired);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$UrlInputFieldImplCopyWith<_$UrlInputFieldImpl> get copyWith =>
      __$$UrlInputFieldImplCopyWithImpl<_$UrlInputFieldImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        geolocation,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)
        map,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        table,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        advtable,
  }) {
    return url(id, label, name, answer, description, isRequired);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
  }) {
    return url?.call(id, label, name, answer, description, isRequired);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
    required TResult orElse(),
  }) {
    if (url != null) {
      return url(id, label, name, answer, description, isRequired);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
    required TResult Function(MapField value) map,
    required TResult Function(TableField value) table,
    required TResult Function(AdvTableField value) advtable,
  }) {
    return url(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
    TResult? Function(MapField value)? map,
    TResult? Function(TableField value)? table,
    TResult? Function(AdvTableField value)? advtable,
  }) {
    return url?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    TResult Function(MapField value)? map,
    TResult Function(TableField value)? table,
    TResult Function(AdvTableField value)? advtable,
    required TResult orElse(),
  }) {
    if (url != null) {
      return url(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$UrlInputFieldImplToJson(
      this,
    );
  }
}

abstract class UrlInputField implements InputField {
  const factory UrlInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'name') final String? name,
          @JsonKey(name: 'answer') final String? answer,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'isRequired') final bool isRequired}) =
      _$UrlInputFieldImpl;

  factory UrlInputField.fromJson(Map<String, dynamic> json) =
      _$UrlInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @JsonKey(name: 'name')
  String? get name;
  @override
  @JsonKey(name: 'answer')
  String? get answer;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$UrlInputFieldImplCopyWith<_$UrlInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$NumberInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$NumberInputFieldImplCopyWith(_$NumberInputFieldImpl value,
          $Res Function(_$NumberInputFieldImpl) then) =
      __$$NumberInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'name') String? name,
      @JsonKey(name: 'answer') String? answer,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'isRequired') bool isRequired});
}

/// @nodoc
class __$$NumberInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$NumberInputFieldImpl>
    implements _$$NumberInputFieldImplCopyWith<$Res> {
  __$$NumberInputFieldImplCopyWithImpl(_$NumberInputFieldImpl _value,
      $Res Function(_$NumberInputFieldImpl) _then)
      : super(_value, _then);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? name = freezed,
    Object? answer = freezed,
    Object? description = freezed,
    Object? isRequired = null,
  }) {
    return _then(_$NumberInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      name: freezed == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$NumberInputFieldImpl implements NumberInputField {
  const _$NumberInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'name') this.name,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      final String? $type})
      : $type = $type ?? 'number';

  factory _$NumberInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$NumberInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'name')
  final String? name;
  @override
  @JsonKey(name: 'answer')
  final String? answer;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.number(id: $id, label: $label, name: $name, answer: $answer, description: $description, isRequired: $isRequired)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$NumberInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.name, name) || other.name == name) &&
            (identical(other.answer, answer) || other.answer == answer) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(
      runtimeType, id, label, name, answer, description, isRequired);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$NumberInputFieldImplCopyWith<_$NumberInputFieldImpl> get copyWith =>
      __$$NumberInputFieldImplCopyWithImpl<_$NumberInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        geolocation,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)
        map,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        table,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        advtable,
  }) {
    return number(id, label, name, answer, description, isRequired);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
  }) {
    return number?.call(id, label, name, answer, description, isRequired);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
    required TResult orElse(),
  }) {
    if (number != null) {
      return number(id, label, name, answer, description, isRequired);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
    required TResult Function(MapField value) map,
    required TResult Function(TableField value) table,
    required TResult Function(AdvTableField value) advtable,
  }) {
    return number(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
    TResult? Function(MapField value)? map,
    TResult? Function(TableField value)? table,
    TResult? Function(AdvTableField value)? advtable,
  }) {
    return number?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    TResult Function(MapField value)? map,
    TResult Function(TableField value)? table,
    TResult Function(AdvTableField value)? advtable,
    required TResult orElse(),
  }) {
    if (number != null) {
      return number(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$NumberInputFieldImplToJson(
      this,
    );
  }
}

abstract class NumberInputField implements InputField {
  const factory NumberInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'name') final String? name,
          @JsonKey(name: 'answer') final String? answer,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'isRequired') final bool isRequired}) =
      _$NumberInputFieldImpl;

  factory NumberInputField.fromJson(Map<String, dynamic> json) =
      _$NumberInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @JsonKey(name: 'name')
  String? get name;
  @override
  @JsonKey(name: 'answer')
  String? get answer;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$NumberInputFieldImplCopyWith<_$NumberInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$PhoneInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$PhoneInputFieldImplCopyWith(_$PhoneInputFieldImpl value,
          $Res Function(_$PhoneInputFieldImpl) then) =
      __$$PhoneInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'name') String? name,
      @JsonKey(name: 'answer') String? answer,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'isRequired') bool isRequired});
}

/// @nodoc
class __$$PhoneInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$PhoneInputFieldImpl>
    implements _$$PhoneInputFieldImplCopyWith<$Res> {
  __$$PhoneInputFieldImplCopyWithImpl(
      _$PhoneInputFieldImpl _value, $Res Function(_$PhoneInputFieldImpl) _then)
      : super(_value, _then);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? name = freezed,
    Object? answer = freezed,
    Object? description = freezed,
    Object? isRequired = null,
  }) {
    return _then(_$PhoneInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      name: freezed == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$PhoneInputFieldImpl implements PhoneInputField {
  const _$PhoneInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'name') this.name,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      final String? $type})
      : $type = $type ?? 'phone';

  factory _$PhoneInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$PhoneInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'name')
  final String? name;
  @override
  @JsonKey(name: 'answer')
  final String? answer;
  @override
  @JsonKey(name: 'description')
  final String? description;
// @JsonKey(name: 'visible') @Default(true) bool visible,
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.phone(id: $id, label: $label, name: $name, answer: $answer, description: $description, isRequired: $isRequired)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$PhoneInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.name, name) || other.name == name) &&
            (identical(other.answer, answer) || other.answer == answer) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(
      runtimeType, id, label, name, answer, description, isRequired);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$PhoneInputFieldImplCopyWith<_$PhoneInputFieldImpl> get copyWith =>
      __$$PhoneInputFieldImplCopyWithImpl<_$PhoneInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        geolocation,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)
        map,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        table,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        advtable,
  }) {
    return phone(id, label, name, answer, description, isRequired);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
  }) {
    return phone?.call(id, label, name, answer, description, isRequired);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
    required TResult orElse(),
  }) {
    if (phone != null) {
      return phone(id, label, name, answer, description, isRequired);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
    required TResult Function(MapField value) map,
    required TResult Function(TableField value) table,
    required TResult Function(AdvTableField value) advtable,
  }) {
    return phone(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
    TResult? Function(MapField value)? map,
    TResult? Function(TableField value)? table,
    TResult? Function(AdvTableField value)? advtable,
  }) {
    return phone?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    TResult Function(MapField value)? map,
    TResult Function(TableField value)? table,
    TResult Function(AdvTableField value)? advtable,
    required TResult orElse(),
  }) {
    if (phone != null) {
      return phone(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$PhoneInputFieldImplToJson(
      this,
    );
  }
}

abstract class PhoneInputField implements InputField {
  const factory PhoneInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'name') final String? name,
          @JsonKey(name: 'answer') final String? answer,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'isRequired') final bool isRequired}) =
      _$PhoneInputFieldImpl;

  factory PhoneInputField.fromJson(Map<String, dynamic> json) =
      _$PhoneInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @JsonKey(name: 'name')
  String? get name;
  @override
  @JsonKey(name: 'answer')
  String? get answer;
  @override
  @JsonKey(name: 'description')
  String?
      get description; // @JsonKey(name: 'visible') @Default(true) bool visible,
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$PhoneInputFieldImplCopyWith<_$PhoneInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$EmailInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$EmailInputFieldImplCopyWith(_$EmailInputFieldImpl value,
          $Res Function(_$EmailInputFieldImpl) then) =
      __$$EmailInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'name') String? name,
      @JsonKey(name: 'answer') String? answer,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'isRequired') bool isRequired});
}

/// @nodoc
class __$$EmailInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$EmailInputFieldImpl>
    implements _$$EmailInputFieldImplCopyWith<$Res> {
  __$$EmailInputFieldImplCopyWithImpl(
      _$EmailInputFieldImpl _value, $Res Function(_$EmailInputFieldImpl) _then)
      : super(_value, _then);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? name = freezed,
    Object? answer = freezed,
    Object? description = freezed,
    Object? isRequired = null,
  }) {
    return _then(_$EmailInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      name: freezed == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$EmailInputFieldImpl implements EmailInputField {
  const _$EmailInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'name') this.name,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      final String? $type})
      : $type = $type ?? 'email';

  factory _$EmailInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$EmailInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'name')
  final String? name;
  @override
  @JsonKey(name: 'answer')
  final String? answer;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.email(id: $id, label: $label, name: $name, answer: $answer, description: $description, isRequired: $isRequired)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$EmailInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.name, name) || other.name == name) &&
            (identical(other.answer, answer) || other.answer == answer) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(
      runtimeType, id, label, name, answer, description, isRequired);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$EmailInputFieldImplCopyWith<_$EmailInputFieldImpl> get copyWith =>
      __$$EmailInputFieldImplCopyWithImpl<_$EmailInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        geolocation,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)
        map,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        table,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        advtable,
  }) {
    return email(id, label, name, answer, description, isRequired);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
  }) {
    return email?.call(id, label, name, answer, description, isRequired);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
    required TResult orElse(),
  }) {
    if (email != null) {
      return email(id, label, name, answer, description, isRequired);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
    required TResult Function(MapField value) map,
    required TResult Function(TableField value) table,
    required TResult Function(AdvTableField value) advtable,
  }) {
    return email(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
    TResult? Function(MapField value)? map,
    TResult? Function(TableField value)? table,
    TResult? Function(AdvTableField value)? advtable,
  }) {
    return email?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    TResult Function(MapField value)? map,
    TResult Function(TableField value)? table,
    TResult Function(AdvTableField value)? advtable,
    required TResult orElse(),
  }) {
    if (email != null) {
      return email(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$EmailInputFieldImplToJson(
      this,
    );
  }
}

abstract class EmailInputField implements InputField {
  const factory EmailInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'name') final String? name,
          @JsonKey(name: 'answer') final String? answer,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'isRequired') final bool isRequired}) =
      _$EmailInputFieldImpl;

  factory EmailInputField.fromJson(Map<String, dynamic> json) =
      _$EmailInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @JsonKey(name: 'name')
  String? get name;
  @override
  @JsonKey(name: 'answer')
  String? get answer;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$EmailInputFieldImplCopyWith<_$EmailInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$DateTimeInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$DateTimeInputFieldImplCopyWith(_$DateTimeInputFieldImpl value,
          $Res Function(_$DateTimeInputFieldImpl) then) =
      __$$DateTimeInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'answer') String? answer,
      @JsonKey(name: 'name') String? name,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'isRequired') bool isRequired});
}

/// @nodoc
class __$$DateTimeInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$DateTimeInputFieldImpl>
    implements _$$DateTimeInputFieldImplCopyWith<$Res> {
  __$$DateTimeInputFieldImplCopyWithImpl(_$DateTimeInputFieldImpl _value,
      $Res Function(_$DateTimeInputFieldImpl) _then)
      : super(_value, _then);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? answer = freezed,
    Object? name = freezed,
    Object? description = freezed,
    Object? isRequired = null,
  }) {
    return _then(_$DateTimeInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
      name: freezed == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$DateTimeInputFieldImpl implements DateTimeInputField {
  const _$DateTimeInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'name') this.name,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      final String? $type})
      : $type = $type ?? 'datetimelocal';

  factory _$DateTimeInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$DateTimeInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'answer')
  final String? answer;
  @override
  @JsonKey(name: 'name')
  final String? name;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.datetimelocal(id: $id, label: $label, answer: $answer, name: $name, description: $description, isRequired: $isRequired)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$DateTimeInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.answer, answer) || other.answer == answer) &&
            (identical(other.name, name) || other.name == name) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(
      runtimeType, id, label, answer, name, description, isRequired);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$DateTimeInputFieldImplCopyWith<_$DateTimeInputFieldImpl> get copyWith =>
      __$$DateTimeInputFieldImplCopyWithImpl<_$DateTimeInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        geolocation,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)
        map,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        table,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        advtable,
  }) {
    return datetimelocal(id, label, answer, name, description, isRequired);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
  }) {
    return datetimelocal?.call(
        id, label, answer, name, description, isRequired);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
    required TResult orElse(),
  }) {
    if (datetimelocal != null) {
      return datetimelocal(id, label, answer, name, description, isRequired);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
    required TResult Function(MapField value) map,
    required TResult Function(TableField value) table,
    required TResult Function(AdvTableField value) advtable,
  }) {
    return datetimelocal(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
    TResult? Function(MapField value)? map,
    TResult? Function(TableField value)? table,
    TResult? Function(AdvTableField value)? advtable,
  }) {
    return datetimelocal?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    TResult Function(MapField value)? map,
    TResult Function(TableField value)? table,
    TResult Function(AdvTableField value)? advtable,
    required TResult orElse(),
  }) {
    if (datetimelocal != null) {
      return datetimelocal(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$DateTimeInputFieldImplToJson(
      this,
    );
  }
}

abstract class DateTimeInputField implements InputField {
  const factory DateTimeInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'answer') final String? answer,
          @JsonKey(name: 'name') final String? name,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'isRequired') final bool isRequired}) =
      _$DateTimeInputFieldImpl;

  factory DateTimeInputField.fromJson(Map<String, dynamic> json) =
      _$DateTimeInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @override
  @JsonKey(name: 'answer')
  String? get answer;
  @JsonKey(name: 'name')
  String? get name;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$DateTimeInputFieldImplCopyWith<_$DateTimeInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$CommentInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$CommentInputFieldImplCopyWith(_$CommentInputFieldImpl value,
          $Res Function(_$CommentInputFieldImpl) then) =
      __$$CommentInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'name') String? name,
      @JsonKey(name: 'answer') String? answer,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'isRequired') bool isRequired});
}

/// @nodoc
class __$$CommentInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$CommentInputFieldImpl>
    implements _$$CommentInputFieldImplCopyWith<$Res> {
  __$$CommentInputFieldImplCopyWithImpl(_$CommentInputFieldImpl _value,
      $Res Function(_$CommentInputFieldImpl) _then)
      : super(_value, _then);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? name = freezed,
    Object? answer = freezed,
    Object? description = freezed,
    Object? isRequired = null,
  }) {
    return _then(_$CommentInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      name: freezed == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$CommentInputFieldImpl implements CommentInputField {
  const _$CommentInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'name') this.name,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      final String? $type})
      : $type = $type ?? 'comment';

  factory _$CommentInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$CommentInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'name')
  final String? name;
  @override
  @JsonKey(name: 'answer')
  final String? answer;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.comment(id: $id, label: $label, name: $name, answer: $answer, description: $description, isRequired: $isRequired)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$CommentInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.name, name) || other.name == name) &&
            (identical(other.answer, answer) || other.answer == answer) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(
      runtimeType, id, label, name, answer, description, isRequired);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$CommentInputFieldImplCopyWith<_$CommentInputFieldImpl> get copyWith =>
      __$$CommentInputFieldImplCopyWithImpl<_$CommentInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        geolocation,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)
        map,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        table,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        advtable,
  }) {
    return comment(id, label, name, answer, description, isRequired);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
  }) {
    return comment?.call(id, label, name, answer, description, isRequired);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
    required TResult orElse(),
  }) {
    if (comment != null) {
      return comment(id, label, name, answer, description, isRequired);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
    required TResult Function(MapField value) map,
    required TResult Function(TableField value) table,
    required TResult Function(AdvTableField value) advtable,
  }) {
    return comment(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
    TResult? Function(MapField value)? map,
    TResult? Function(TableField value)? table,
    TResult? Function(AdvTableField value)? advtable,
  }) {
    return comment?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    TResult Function(MapField value)? map,
    TResult Function(TableField value)? table,
    TResult Function(AdvTableField value)? advtable,
    required TResult orElse(),
  }) {
    if (comment != null) {
      return comment(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$CommentInputFieldImplToJson(
      this,
    );
  }
}

abstract class CommentInputField implements InputField {
  const factory CommentInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'name') final String? name,
          @JsonKey(name: 'answer') final String? answer,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'isRequired') final bool isRequired}) =
      _$CommentInputFieldImpl;

  factory CommentInputField.fromJson(Map<String, dynamic> json) =
      _$CommentInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @JsonKey(name: 'name')
  String? get name;
  @override
  @JsonKey(name: 'answer')
  String? get answer;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$CommentInputFieldImplCopyWith<_$CommentInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$DropdownInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$DropdownInputFieldImplCopyWith(_$DropdownInputFieldImpl value,
          $Res Function(_$DropdownInputFieldImpl) then) =
      __$$DropdownInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'name') String? name,
      @JsonKey(name: 'answer') String? answer,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'isRequired') bool isRequired,
      @JsonKey(name: 'fromManualList') bool fromManualList,
      @JsonKey(name: 'selectedLinkListLabel') String? answerList,
      @JsonKey(name: 'islinked_query') String? linkedQuery,
      @JsonKey(name: 'isConditional') bool? isConditional,
      @JsonKey(name: 'actionMessage') String? actionMessage,
      @JsonKey(name: 'association') bool? association,
      @JsonKey(name: 'allowClear') bool allowClear,
      @JsonKey(name: 'placeholder') String? hintText,
      @JsonKey(name: 'choice') @ValueTextConverter() List<ValueText> choices,
      @JsonKey(name: 'showNoneItem') bool showNoneItem,
      @JsonKey(name: 'noneText') String? noneText,
      @JsonKey(name: 'showOtherItem') bool showOtherItem,
      @JsonKey(name: 'otherText') String? otherText,
      @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder});
}

/// @nodoc
class __$$DropdownInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$DropdownInputFieldImpl>
    implements _$$DropdownInputFieldImplCopyWith<$Res> {
  __$$DropdownInputFieldImplCopyWithImpl(_$DropdownInputFieldImpl _value,
      $Res Function(_$DropdownInputFieldImpl) _then)
      : super(_value, _then);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? name = freezed,
    Object? answer = freezed,
    Object? description = freezed,
    Object? isRequired = null,
    Object? fromManualList = null,
    Object? answerList = freezed,
    Object? linkedQuery = freezed,
    Object? isConditional = freezed,
    Object? actionMessage = freezed,
    Object? association = freezed,
    Object? allowClear = null,
    Object? hintText = freezed,
    Object? choices = null,
    Object? showNoneItem = null,
    Object? noneText = freezed,
    Object? showOtherItem = null,
    Object? otherText = freezed,
    Object? otherPlaceholder = freezed,
  }) {
    return _then(_$DropdownInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      name: freezed == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
      fromManualList: null == fromManualList
          ? _value.fromManualList
          : fromManualList // ignore: cast_nullable_to_non_nullable
              as bool,
      answerList: freezed == answerList
          ? _value.answerList
          : answerList // ignore: cast_nullable_to_non_nullable
              as String?,
      linkedQuery: freezed == linkedQuery
          ? _value.linkedQuery
          : linkedQuery // ignore: cast_nullable_to_non_nullable
              as String?,
      isConditional: freezed == isConditional
          ? _value.isConditional
          : isConditional // ignore: cast_nullable_to_non_nullable
              as bool?,
      actionMessage: freezed == actionMessage
          ? _value.actionMessage
          : actionMessage // ignore: cast_nullable_to_non_nullable
              as String?,
      association: freezed == association
          ? _value.association
          : association // ignore: cast_nullable_to_non_nullable
              as bool?,
      allowClear: null == allowClear
          ? _value.allowClear
          : allowClear // ignore: cast_nullable_to_non_nullable
              as bool,
      hintText: freezed == hintText
          ? _value.hintText
          : hintText // ignore: cast_nullable_to_non_nullable
              as String?,
      choices: null == choices
          ? _value._choices
          : choices // ignore: cast_nullable_to_non_nullable
              as List<ValueText>,
      showNoneItem: null == showNoneItem
          ? _value.showNoneItem
          : showNoneItem // ignore: cast_nullable_to_non_nullable
              as bool,
      noneText: freezed == noneText
          ? _value.noneText
          : noneText // ignore: cast_nullable_to_non_nullable
              as String?,
      showOtherItem: null == showOtherItem
          ? _value.showOtherItem
          : showOtherItem // ignore: cast_nullable_to_non_nullable
              as bool,
      otherText: freezed == otherText
          ? _value.otherText
          : otherText // ignore: cast_nullable_to_non_nullable
              as String?,
      otherPlaceholder: freezed == otherPlaceholder
          ? _value.otherPlaceholder
          : otherPlaceholder // ignore: cast_nullable_to_non_nullable
              as String?,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$DropdownInputFieldImpl implements DropdownInputField {
  const _$DropdownInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'name') this.name,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      @JsonKey(name: 'fromManualList') this.fromManualList = true,
      @JsonKey(name: 'selectedLinkListLabel') this.answerList,
      @JsonKey(name: 'islinked_query') this.linkedQuery,
      @JsonKey(name: 'isConditional') this.isConditional,
      @JsonKey(name: 'actionMessage') this.actionMessage,
      @JsonKey(name: 'association') this.association,
      @JsonKey(name: 'allowClear') this.allowClear = true,
      @JsonKey(name: 'placeholder') this.hintText,
      @JsonKey(name: 'choice')
      @ValueTextConverter()
      final List<ValueText> choices = const [],
      @JsonKey(name: 'showNoneItem') this.showNoneItem = false,
      @JsonKey(name: 'noneText') this.noneText,
      @JsonKey(name: 'showOtherItem') this.showOtherItem = false,
      @JsonKey(name: 'otherText') this.otherText,
      @JsonKey(name: 'otherPlaceholder') this.otherPlaceholder,
      final String? $type})
      : _choices = choices,
        $type = $type ?? 'dropdown';

  factory _$DropdownInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$DropdownInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'name')
  final String? name;
  @override
  @JsonKey(name: 'answer')
  final String? answer;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;
  @override
  @JsonKey(name: 'fromManualList')
  final bool fromManualList;
  @override
  @JsonKey(name: 'selectedLinkListLabel')
  final String? answerList;
  @override
  @JsonKey(name: 'islinked_query')
  final String? linkedQuery;
  @override
  @JsonKey(name: 'isConditional')
  final bool? isConditional;
  @override
  @JsonKey(name: 'actionMessage')
  final String? actionMessage;
  @override
  @JsonKey(name: 'association')
  final bool? association;
// Fields.
  @override
  @JsonKey(name: 'allowClear')
  final bool allowClear;
  @override
  @JsonKey(name: 'placeholder')
  final String? hintText;
  final List<ValueText> _choices;
  @override
  @JsonKey(name: 'choice')
  @ValueTextConverter()
  List<ValueText> get choices {
    if (_choices is EqualUnmodifiableListView) return _choices;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_choices);
  }

// None
  @override
  @JsonKey(name: 'showNoneItem')
  final bool showNoneItem;
  @override
  @JsonKey(name: 'noneText')
  final String? noneText;
// Other
  @override
  @JsonKey(name: 'showOtherItem')
  final bool showOtherItem;
  @override
  @JsonKey(name: 'otherText')
  final String? otherText;
  @override
  @JsonKey(name: 'otherPlaceholder')
  final String? otherPlaceholder;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.dropdown(id: $id, label: $label, name: $name, answer: $answer, description: $description, isRequired: $isRequired, fromManualList: $fromManualList, answerList: $answerList, linkedQuery: $linkedQuery, isConditional: $isConditional, actionMessage: $actionMessage, association: $association, allowClear: $allowClear, hintText: $hintText, choices: $choices, showNoneItem: $showNoneItem, noneText: $noneText, showOtherItem: $showOtherItem, otherText: $otherText, otherPlaceholder: $otherPlaceholder)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$DropdownInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.name, name) || other.name == name) &&
            (identical(other.answer, answer) || other.answer == answer) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired) &&
            (identical(other.fromManualList, fromManualList) ||
                other.fromManualList == fromManualList) &&
            (identical(other.answerList, answerList) ||
                other.answerList == answerList) &&
            (identical(other.linkedQuery, linkedQuery) ||
                other.linkedQuery == linkedQuery) &&
            (identical(other.isConditional, isConditional) ||
                other.isConditional == isConditional) &&
            (identical(other.actionMessage, actionMessage) ||
                other.actionMessage == actionMessage) &&
            (identical(other.association, association) ||
                other.association == association) &&
            (identical(other.allowClear, allowClear) ||
                other.allowClear == allowClear) &&
            (identical(other.hintText, hintText) ||
                other.hintText == hintText) &&
            const DeepCollectionEquality().equals(other._choices, _choices) &&
            (identical(other.showNoneItem, showNoneItem) ||
                other.showNoneItem == showNoneItem) &&
            (identical(other.noneText, noneText) ||
                other.noneText == noneText) &&
            (identical(other.showOtherItem, showOtherItem) ||
                other.showOtherItem == showOtherItem) &&
            (identical(other.otherText, otherText) ||
                other.otherText == otherText) &&
            (identical(other.otherPlaceholder, otherPlaceholder) ||
                other.otherPlaceholder == otherPlaceholder));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hashAll([
        runtimeType,
        id,
        label,
        name,
        answer,
        description,
        isRequired,
        fromManualList,
        answerList,
        linkedQuery,
        isConditional,
        actionMessage,
        association,
        allowClear,
        hintText,
        const DeepCollectionEquality().hash(_choices),
        showNoneItem,
        noneText,
        showOtherItem,
        otherText,
        otherPlaceholder
      ]);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$DropdownInputFieldImplCopyWith<_$DropdownInputFieldImpl> get copyWith =>
      __$$DropdownInputFieldImplCopyWithImpl<_$DropdownInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        geolocation,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)
        map,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        table,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        advtable,
  }) {
    return dropdown(
        id,
        label,
        name,
        answer,
        description,
        isRequired,
        fromManualList,
        answerList,
        linkedQuery,
        isConditional,
        actionMessage,
        association,
        allowClear,
        hintText,
        choices,
        showNoneItem,
        noneText,
        showOtherItem,
        otherText,
        otherPlaceholder);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
  }) {
    return dropdown?.call(
        id,
        label,
        name,
        answer,
        description,
        isRequired,
        fromManualList,
        answerList,
        linkedQuery,
        isConditional,
        actionMessage,
        association,
        allowClear,
        hintText,
        choices,
        showNoneItem,
        noneText,
        showOtherItem,
        otherText,
        otherPlaceholder);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
    required TResult orElse(),
  }) {
    if (dropdown != null) {
      return dropdown(
          id,
          label,
          name,
          answer,
          description,
          isRequired,
          fromManualList,
          answerList,
          linkedQuery,
          isConditional,
          actionMessage,
          association,
          allowClear,
          hintText,
          choices,
          showNoneItem,
          noneText,
          showOtherItem,
          otherText,
          otherPlaceholder);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
    required TResult Function(MapField value) map,
    required TResult Function(TableField value) table,
    required TResult Function(AdvTableField value) advtable,
  }) {
    return dropdown(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
    TResult? Function(MapField value)? map,
    TResult? Function(TableField value)? table,
    TResult? Function(AdvTableField value)? advtable,
  }) {
    return dropdown?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    TResult Function(MapField value)? map,
    TResult Function(TableField value)? table,
    TResult Function(AdvTableField value)? advtable,
    required TResult orElse(),
  }) {
    if (dropdown != null) {
      return dropdown(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$DropdownInputFieldImplToJson(
      this,
    );
  }
}

abstract class DropdownInputField implements InputField {
  const factory DropdownInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'name') final String? name,
          @JsonKey(name: 'answer') final String? answer,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'isRequired') final bool isRequired,
          @JsonKey(name: 'fromManualList') final bool fromManualList,
          @JsonKey(name: 'selectedLinkListLabel') final String? answerList,
          @JsonKey(name: 'islinked_query') final String? linkedQuery,
          @JsonKey(name: 'isConditional') final bool? isConditional,
          @JsonKey(name: 'actionMessage') final String? actionMessage,
          @JsonKey(name: 'association') final bool? association,
          @JsonKey(name: 'allowClear') final bool allowClear,
          @JsonKey(name: 'placeholder') final String? hintText,
          @JsonKey(name: 'choice')
          @ValueTextConverter()
          final List<ValueText> choices,
          @JsonKey(name: 'showNoneItem') final bool showNoneItem,
          @JsonKey(name: 'noneText') final String? noneText,
          @JsonKey(name: 'showOtherItem') final bool showOtherItem,
          @JsonKey(name: 'otherText') final String? otherText,
          @JsonKey(name: 'otherPlaceholder') final String? otherPlaceholder}) =
      _$DropdownInputFieldImpl;

  factory DropdownInputField.fromJson(Map<String, dynamic> json) =
      _$DropdownInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @JsonKey(name: 'name')
  String? get name;
  @override
  @JsonKey(name: 'answer')
  String? get answer;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;
  @JsonKey(name: 'fromManualList')
  bool get fromManualList;
  @JsonKey(name: 'selectedLinkListLabel')
  String? get answerList;
  @JsonKey(name: 'islinked_query')
  String? get linkedQuery;
  @JsonKey(name: 'isConditional')
  bool? get isConditional;
  @JsonKey(name: 'actionMessage')
  String? get actionMessage;
  @JsonKey(name: 'association')
  bool? get association; // Fields.
  @JsonKey(name: 'allowClear')
  bool get allowClear;
  @JsonKey(name: 'placeholder')
  String? get hintText;
  @JsonKey(name: 'choice')
  @ValueTextConverter()
  List<ValueText> get choices; // None
  @JsonKey(name: 'showNoneItem')
  bool get showNoneItem;
  @JsonKey(name: 'noneText')
  String? get noneText; // Other
  @JsonKey(name: 'showOtherItem')
  bool get showOtherItem;
  @JsonKey(name: 'otherText')
  String? get otherText;
  @JsonKey(name: 'otherPlaceholder')
  String? get otherPlaceholder;

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$DropdownInputFieldImplCopyWith<_$DropdownInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$MultipleInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$MultipleInputFieldImplCopyWith(_$MultipleInputFieldImpl value,
          $Res Function(_$MultipleInputFieldImpl) then) =
      __$$MultipleInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'name') String? name,
      @JsonKey(name: 'answer') String? answer,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'visible') bool visible,
      @JsonKey(name: 'isRequired') bool isRequired,
      @JsonKey(name: 'association') bool? association,
      @JsonKey(name: 'readOnly') bool readOnly,
      @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
      @JsonKey(name: 'actionMessage') String? actionMessage,
      @JsonKey(name: 'isConditional') bool isConditional,
      @JsonKey(name: 'fromManualList') bool fromManualList,
      @JsonKey(name: 'choice') @ValueTextConverter() List<ValueText> choices,
      @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
      @JsonKey(name: 'selectedLinkListLabel') String? answerList,
      @JsonKey(name: 'islinked_query') String? linkedQuery,
      @JsonKey(name: 'showNoneItem') bool showNoneItem,
      @JsonKey(name: 'noneText') String? noneText,
      @JsonKey(name: 'showOtherItem') bool showOtherItem,
      @JsonKey(name: 'otherText') String? otherText,
      @JsonKey(name: 'otherErrorText') String? otherErrorText,
      @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
      @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem});
}

/// @nodoc
class __$$MultipleInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$MultipleInputFieldImpl>
    implements _$$MultipleInputFieldImplCopyWith<$Res> {
  __$$MultipleInputFieldImplCopyWithImpl(_$MultipleInputFieldImpl _value,
      $Res Function(_$MultipleInputFieldImpl) _then)
      : super(_value, _then);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? name = freezed,
    Object? answer = freezed,
    Object? description = freezed,
    Object? visible = null,
    Object? isRequired = null,
    Object? association = freezed,
    Object? readOnly = null,
    Object? requiredErrorText = freezed,
    Object? actionMessage = freezed,
    Object? isConditional = null,
    Object? fromManualList = null,
    Object? choices = null,
    Object? maxSelectedChoices = freezed,
    Object? answerList = freezed,
    Object? linkedQuery = freezed,
    Object? showNoneItem = null,
    Object? noneText = freezed,
    Object? showOtherItem = null,
    Object? otherText = freezed,
    Object? otherErrorText = freezed,
    Object? otherPlaceholder = freezed,
    Object? showSelectAllItem = null,
  }) {
    return _then(_$MultipleInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      name: freezed == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      visible: null == visible
          ? _value.visible
          : visible // ignore: cast_nullable_to_non_nullable
              as bool,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
      association: freezed == association
          ? _value.association
          : association // ignore: cast_nullable_to_non_nullable
              as bool?,
      readOnly: null == readOnly
          ? _value.readOnly
          : readOnly // ignore: cast_nullable_to_non_nullable
              as bool,
      requiredErrorText: freezed == requiredErrorText
          ? _value.requiredErrorText
          : requiredErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      actionMessage: freezed == actionMessage
          ? _value.actionMessage
          : actionMessage // ignore: cast_nullable_to_non_nullable
              as String?,
      isConditional: null == isConditional
          ? _value.isConditional
          : isConditional // ignore: cast_nullable_to_non_nullable
              as bool,
      fromManualList: null == fromManualList
          ? _value.fromManualList
          : fromManualList // ignore: cast_nullable_to_non_nullable
              as bool,
      choices: null == choices
          ? _value._choices
          : choices // ignore: cast_nullable_to_non_nullable
              as List<ValueText>,
      maxSelectedChoices: freezed == maxSelectedChoices
          ? _value.maxSelectedChoices
          : maxSelectedChoices // ignore: cast_nullable_to_non_nullable
              as int?,
      answerList: freezed == answerList
          ? _value.answerList
          : answerList // ignore: cast_nullable_to_non_nullable
              as String?,
      linkedQuery: freezed == linkedQuery
          ? _value.linkedQuery
          : linkedQuery // ignore: cast_nullable_to_non_nullable
              as String?,
      showNoneItem: null == showNoneItem
          ? _value.showNoneItem
          : showNoneItem // ignore: cast_nullable_to_non_nullable
              as bool,
      noneText: freezed == noneText
          ? _value.noneText
          : noneText // ignore: cast_nullable_to_non_nullable
              as String?,
      showOtherItem: null == showOtherItem
          ? _value.showOtherItem
          : showOtherItem // ignore: cast_nullable_to_non_nullable
              as bool,
      otherText: freezed == otherText
          ? _value.otherText
          : otherText // ignore: cast_nullable_to_non_nullable
              as String?,
      otherErrorText: freezed == otherErrorText
          ? _value.otherErrorText
          : otherErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      otherPlaceholder: freezed == otherPlaceholder
          ? _value.otherPlaceholder
          : otherPlaceholder // ignore: cast_nullable_to_non_nullable
              as String?,
      showSelectAllItem: null == showSelectAllItem
          ? _value.showSelectAllItem
          : showSelectAllItem // ignore: cast_nullable_to_non_nullable
              as bool,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$MultipleInputFieldImpl implements MultipleInputField {
  const _$MultipleInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'name') this.name,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'visible') this.visible = true,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      @JsonKey(name: 'association') this.association,
      @JsonKey(name: 'readOnly') this.readOnly = false,
      @JsonKey(name: 'requiredErrorText') this.requiredErrorText,
      @JsonKey(name: 'actionMessage') this.actionMessage,
      @JsonKey(name: 'isConditional') this.isConditional = false,
      @JsonKey(name: 'fromManualList') this.fromManualList = true,
      @JsonKey(name: 'choice')
      @ValueTextConverter()
      final List<ValueText> choices = const [],
      @JsonKey(name: 'maxSelectedChoices') this.maxSelectedChoices,
      @JsonKey(name: 'selectedLinkListLabel') this.answerList,
      @JsonKey(name: 'islinked_query') this.linkedQuery,
      @JsonKey(name: 'showNoneItem') this.showNoneItem = false,
      @JsonKey(name: 'noneText') this.noneText,
      @JsonKey(name: 'showOtherItem') this.showOtherItem = false,
      @JsonKey(name: 'otherText') this.otherText,
      @JsonKey(name: 'otherErrorText') this.otherErrorText,
      @JsonKey(name: 'otherPlaceholder') this.otherPlaceholder,
      @JsonKey(name: 'showSelectAllItem') this.showSelectAllItem = false,
      final String? $type})
      : _choices = choices,
        $type = $type ?? 'multipleselect';

  factory _$MultipleInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$MultipleInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'name')
  final String? name;
  @override
  @JsonKey(name: 'answer')
  final String? answer;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'visible')
  final bool visible;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;
  @override
  @JsonKey(name: 'association')
  final bool? association;
  @override
  @JsonKey(name: 'readOnly')
  final bool readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  final String? requiredErrorText;
  @override
  @JsonKey(name: 'actionMessage')
  final String? actionMessage;
  @override
  @JsonKey(name: 'isConditional')
  final bool isConditional;
  @override
  @JsonKey(name: 'fromManualList')
  final bool fromManualList;
// Fields.
  final List<ValueText> _choices;
// Fields.
  @override
  @JsonKey(name: 'choice')
  @ValueTextConverter()
  List<ValueText> get choices {
    if (_choices is EqualUnmodifiableListView) return _choices;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_choices);
  }

  @override
  @JsonKey(name: 'maxSelectedChoices')
  final int? maxSelectedChoices;
  @override
  @JsonKey(name: 'selectedLinkListLabel')
  final String? answerList;
  @override
  @JsonKey(name: 'islinked_query')
  final String? linkedQuery;
// None
  @override
  @JsonKey(name: 'showNoneItem')
  final bool showNoneItem;
  @override
  @JsonKey(name: 'noneText')
  final String? noneText;
// Other
  @override
  @JsonKey(name: 'showOtherItem')
  final bool showOtherItem;
  @override
  @JsonKey(name: 'otherText')
  final String? otherText;
  @override
  @JsonKey(name: 'otherErrorText')
  final String? otherErrorText;
  @override
  @JsonKey(name: 'otherPlaceholder')
  final String? otherPlaceholder;
// Select All
  @override
  @JsonKey(name: 'showSelectAllItem')
  final bool showSelectAllItem;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.multipleselect(id: $id, label: $label, name: $name, answer: $answer, description: $description, visible: $visible, isRequired: $isRequired, association: $association, readOnly: $readOnly, requiredErrorText: $requiredErrorText, actionMessage: $actionMessage, isConditional: $isConditional, fromManualList: $fromManualList, choices: $choices, maxSelectedChoices: $maxSelectedChoices, answerList: $answerList, linkedQuery: $linkedQuery, showNoneItem: $showNoneItem, noneText: $noneText, showOtherItem: $showOtherItem, otherText: $otherText, otherErrorText: $otherErrorText, otherPlaceholder: $otherPlaceholder, showSelectAllItem: $showSelectAllItem)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$MultipleInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.name, name) || other.name == name) &&
            (identical(other.answer, answer) || other.answer == answer) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.visible, visible) || other.visible == visible) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired) &&
            (identical(other.association, association) ||
                other.association == association) &&
            (identical(other.readOnly, readOnly) ||
                other.readOnly == readOnly) &&
            (identical(other.requiredErrorText, requiredErrorText) ||
                other.requiredErrorText == requiredErrorText) &&
            (identical(other.actionMessage, actionMessage) ||
                other.actionMessage == actionMessage) &&
            (identical(other.isConditional, isConditional) ||
                other.isConditional == isConditional) &&
            (identical(other.fromManualList, fromManualList) ||
                other.fromManualList == fromManualList) &&
            const DeepCollectionEquality().equals(other._choices, _choices) &&
            (identical(other.maxSelectedChoices, maxSelectedChoices) ||
                other.maxSelectedChoices == maxSelectedChoices) &&
            (identical(other.answerList, answerList) ||
                other.answerList == answerList) &&
            (identical(other.linkedQuery, linkedQuery) ||
                other.linkedQuery == linkedQuery) &&
            (identical(other.showNoneItem, showNoneItem) ||
                other.showNoneItem == showNoneItem) &&
            (identical(other.noneText, noneText) ||
                other.noneText == noneText) &&
            (identical(other.showOtherItem, showOtherItem) ||
                other.showOtherItem == showOtherItem) &&
            (identical(other.otherText, otherText) ||
                other.otherText == otherText) &&
            (identical(other.otherErrorText, otherErrorText) ||
                other.otherErrorText == otherErrorText) &&
            (identical(other.otherPlaceholder, otherPlaceholder) ||
                other.otherPlaceholder == otherPlaceholder) &&
            (identical(other.showSelectAllItem, showSelectAllItem) ||
                other.showSelectAllItem == showSelectAllItem));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hashAll([
        runtimeType,
        id,
        label,
        name,
        answer,
        description,
        visible,
        isRequired,
        association,
        readOnly,
        requiredErrorText,
        actionMessage,
        isConditional,
        fromManualList,
        const DeepCollectionEquality().hash(_choices),
        maxSelectedChoices,
        answerList,
        linkedQuery,
        showNoneItem,
        noneText,
        showOtherItem,
        otherText,
        otherErrorText,
        otherPlaceholder,
        showSelectAllItem
      ]);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$MultipleInputFieldImplCopyWith<_$MultipleInputFieldImpl> get copyWith =>
      __$$MultipleInputFieldImplCopyWithImpl<_$MultipleInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        geolocation,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)
        map,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        table,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        advtable,
  }) {
    return multipleselect(
        id,
        label,
        name,
        answer,
        description,
        visible,
        isRequired,
        association,
        readOnly,
        requiredErrorText,
        actionMessage,
        isConditional,
        fromManualList,
        choices,
        maxSelectedChoices,
        answerList,
        linkedQuery,
        showNoneItem,
        noneText,
        showOtherItem,
        otherText,
        otherErrorText,
        otherPlaceholder,
        showSelectAllItem);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
  }) {
    return multipleselect?.call(
        id,
        label,
        name,
        answer,
        description,
        visible,
        isRequired,
        association,
        readOnly,
        requiredErrorText,
        actionMessage,
        isConditional,
        fromManualList,
        choices,
        maxSelectedChoices,
        answerList,
        linkedQuery,
        showNoneItem,
        noneText,
        showOtherItem,
        otherText,
        otherErrorText,
        otherPlaceholder,
        showSelectAllItem);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
    required TResult orElse(),
  }) {
    if (multipleselect != null) {
      return multipleselect(
          id,
          label,
          name,
          answer,
          description,
          visible,
          isRequired,
          association,
          readOnly,
          requiredErrorText,
          actionMessage,
          isConditional,
          fromManualList,
          choices,
          maxSelectedChoices,
          answerList,
          linkedQuery,
          showNoneItem,
          noneText,
          showOtherItem,
          otherText,
          otherErrorText,
          otherPlaceholder,
          showSelectAllItem);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
    required TResult Function(MapField value) map,
    required TResult Function(TableField value) table,
    required TResult Function(AdvTableField value) advtable,
  }) {
    return multipleselect(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
    TResult? Function(MapField value)? map,
    TResult? Function(TableField value)? table,
    TResult? Function(AdvTableField value)? advtable,
  }) {
    return multipleselect?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    TResult Function(MapField value)? map,
    TResult Function(TableField value)? table,
    TResult Function(AdvTableField value)? advtable,
    required TResult orElse(),
  }) {
    if (multipleselect != null) {
      return multipleselect(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$MultipleInputFieldImplToJson(
      this,
    );
  }
}

abstract class MultipleInputField implements InputField {
  const factory MultipleInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'name') final String? name,
          @JsonKey(name: 'answer') final String? answer,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'visible') final bool visible,
          @JsonKey(name: 'isRequired') final bool isRequired,
          @JsonKey(name: 'association') final bool? association,
          @JsonKey(name: 'readOnly') final bool readOnly,
          @JsonKey(name: 'requiredErrorText') final String? requiredErrorText,
          @JsonKey(name: 'actionMessage') final String? actionMessage,
          @JsonKey(name: 'isConditional') final bool isConditional,
          @JsonKey(name: 'fromManualList') final bool fromManualList,
          @JsonKey(name: 'choice')
          @ValueTextConverter()
          final List<ValueText> choices,
          @JsonKey(name: 'maxSelectedChoices') final int? maxSelectedChoices,
          @JsonKey(name: 'selectedLinkListLabel') final String? answerList,
          @JsonKey(name: 'islinked_query') final String? linkedQuery,
          @JsonKey(name: 'showNoneItem') final bool showNoneItem,
          @JsonKey(name: 'noneText') final String? noneText,
          @JsonKey(name: 'showOtherItem') final bool showOtherItem,
          @JsonKey(name: 'otherText') final String? otherText,
          @JsonKey(name: 'otherErrorText') final String? otherErrorText,
          @JsonKey(name: 'otherPlaceholder') final String? otherPlaceholder,
          @JsonKey(name: 'showSelectAllItem') final bool showSelectAllItem}) =
      _$MultipleInputFieldImpl;

  factory MultipleInputField.fromJson(Map<String, dynamic> json) =
      _$MultipleInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @JsonKey(name: 'name')
  String? get name;
  @override
  @JsonKey(name: 'answer')
  String? get answer;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @JsonKey(name: 'visible')
  bool get visible;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;
  @JsonKey(name: 'association')
  bool? get association;
  @JsonKey(name: 'readOnly')
  bool get readOnly;
  @JsonKey(name: 'requiredErrorText')
  String? get requiredErrorText;
  @JsonKey(name: 'actionMessage')
  String? get actionMessage;
  @JsonKey(name: 'isConditional')
  bool get isConditional;
  @JsonKey(name: 'fromManualList')
  bool get fromManualList; // Fields.
  @JsonKey(name: 'choice')
  @ValueTextConverter()
  List<ValueText> get choices;
  @JsonKey(name: 'maxSelectedChoices')
  int? get maxSelectedChoices;
  @JsonKey(name: 'selectedLinkListLabel')
  String? get answerList;
  @JsonKey(name: 'islinked_query')
  String? get linkedQuery; // None
  @JsonKey(name: 'showNoneItem')
  bool get showNoneItem;
  @JsonKey(name: 'noneText')
  String? get noneText; // Other
  @JsonKey(name: 'showOtherItem')
  bool get showOtherItem;
  @JsonKey(name: 'otherText')
  String? get otherText;
  @JsonKey(name: 'otherErrorText')
  String? get otherErrorText;
  @JsonKey(name: 'otherPlaceholder')
  String? get otherPlaceholder; // Select All
  @JsonKey(name: 'showSelectAllItem')
  bool get showSelectAllItem;

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$MultipleInputFieldImplCopyWith<_$MultipleInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$CheckboxInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$CheckboxInputFieldImplCopyWith(_$CheckboxInputFieldImpl value,
          $Res Function(_$CheckboxInputFieldImpl) then) =
      __$$CheckboxInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'name') String? name,
      @JsonKey(name: 'answer') String? answer,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'visible') bool visible,
      @JsonKey(name: 'isRequired') bool isRequired,
      @JsonKey(name: 'readOnly') bool readOnly,
      @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
      @JsonKey(name: 'actionMessage') String? actionMessage,
      @JsonKey(name: 'association') bool? association,
      @JsonKey(name: 'isConditional') bool isConditional,
      @JsonKey(name: 'fromManualList') bool fromManualList,
      @JsonKey(name: 'selectedLinkListLabel') String? answerList,
      @JsonKey(name: 'islinked_query') String? linkedQuery,
      @JsonKey(name: 'choice') @ValueTextConverter() List<ValueText> choices,
      @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
      @JsonKey(name: 'showNoneItem') bool showNoneItem,
      @JsonKey(name: 'noneText') String? noneText,
      @JsonKey(name: 'showOtherItem') bool showOtherItem,
      @JsonKey(name: 'otherText') String? otherText,
      @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
      @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem});
}

/// @nodoc
class __$$CheckboxInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$CheckboxInputFieldImpl>
    implements _$$CheckboxInputFieldImplCopyWith<$Res> {
  __$$CheckboxInputFieldImplCopyWithImpl(_$CheckboxInputFieldImpl _value,
      $Res Function(_$CheckboxInputFieldImpl) _then)
      : super(_value, _then);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? name = freezed,
    Object? answer = freezed,
    Object? description = freezed,
    Object? visible = null,
    Object? isRequired = null,
    Object? readOnly = null,
    Object? requiredErrorText = freezed,
    Object? actionMessage = freezed,
    Object? association = freezed,
    Object? isConditional = null,
    Object? fromManualList = null,
    Object? answerList = freezed,
    Object? linkedQuery = freezed,
    Object? choices = null,
    Object? maxSelectedChoices = freezed,
    Object? showNoneItem = null,
    Object? noneText = freezed,
    Object? showOtherItem = null,
    Object? otherText = freezed,
    Object? otherPlaceholder = freezed,
    Object? showSelectAllItem = null,
  }) {
    return _then(_$CheckboxInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      name: freezed == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      visible: null == visible
          ? _value.visible
          : visible // ignore: cast_nullable_to_non_nullable
              as bool,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
      readOnly: null == readOnly
          ? _value.readOnly
          : readOnly // ignore: cast_nullable_to_non_nullable
              as bool,
      requiredErrorText: freezed == requiredErrorText
          ? _value.requiredErrorText
          : requiredErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      actionMessage: freezed == actionMessage
          ? _value.actionMessage
          : actionMessage // ignore: cast_nullable_to_non_nullable
              as String?,
      association: freezed == association
          ? _value.association
          : association // ignore: cast_nullable_to_non_nullable
              as bool?,
      isConditional: null == isConditional
          ? _value.isConditional
          : isConditional // ignore: cast_nullable_to_non_nullable
              as bool,
      fromManualList: null == fromManualList
          ? _value.fromManualList
          : fromManualList // ignore: cast_nullable_to_non_nullable
              as bool,
      answerList: freezed == answerList
          ? _value.answerList
          : answerList // ignore: cast_nullable_to_non_nullable
              as String?,
      linkedQuery: freezed == linkedQuery
          ? _value.linkedQuery
          : linkedQuery // ignore: cast_nullable_to_non_nullable
              as String?,
      choices: null == choices
          ? _value._choices
          : choices // ignore: cast_nullable_to_non_nullable
              as List<ValueText>,
      maxSelectedChoices: freezed == maxSelectedChoices
          ? _value.maxSelectedChoices
          : maxSelectedChoices // ignore: cast_nullable_to_non_nullable
              as int?,
      showNoneItem: null == showNoneItem
          ? _value.showNoneItem
          : showNoneItem // ignore: cast_nullable_to_non_nullable
              as bool,
      noneText: freezed == noneText
          ? _value.noneText
          : noneText // ignore: cast_nullable_to_non_nullable
              as String?,
      showOtherItem: null == showOtherItem
          ? _value.showOtherItem
          : showOtherItem // ignore: cast_nullable_to_non_nullable
              as bool,
      otherText: freezed == otherText
          ? _value.otherText
          : otherText // ignore: cast_nullable_to_non_nullable
              as String?,
      otherPlaceholder: freezed == otherPlaceholder
          ? _value.otherPlaceholder
          : otherPlaceholder // ignore: cast_nullable_to_non_nullable
              as String?,
      showSelectAllItem: null == showSelectAllItem
          ? _value.showSelectAllItem
          : showSelectAllItem // ignore: cast_nullable_to_non_nullable
              as bool,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$CheckboxInputFieldImpl implements CheckboxInputField {
  const _$CheckboxInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'name') this.name,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'visible') this.visible = true,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      @JsonKey(name: 'readOnly') this.readOnly = false,
      @JsonKey(name: 'requiredErrorText') this.requiredErrorText,
      @JsonKey(name: 'actionMessage') this.actionMessage,
      @JsonKey(name: 'association') this.association,
      @JsonKey(name: 'isConditional') this.isConditional = false,
      @JsonKey(name: 'fromManualList') this.fromManualList = true,
      @JsonKey(name: 'selectedLinkListLabel') this.answerList,
      @JsonKey(name: 'islinked_query') this.linkedQuery,
      @JsonKey(name: 'choice')
      @ValueTextConverter()
      final List<ValueText> choices = const [],
      @JsonKey(name: 'maxSelectedChoices') this.maxSelectedChoices,
      @JsonKey(name: 'showNoneItem') this.showNoneItem = false,
      @JsonKey(name: 'noneText') this.noneText,
      @JsonKey(name: 'showOtherItem') this.showOtherItem = false,
      @JsonKey(name: 'otherText') this.otherText,
      @JsonKey(name: 'otherPlaceholder') this.otherPlaceholder,
      @JsonKey(name: 'showSelectAllItem') this.showSelectAllItem = false,
      final String? $type})
      : _choices = choices,
        $type = $type ?? 'checkbox';

  factory _$CheckboxInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$CheckboxInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'name')
  final String? name;
  @override
  @JsonKey(name: 'answer')
  final String? answer;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'visible')
  final bool visible;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;
  @override
  @JsonKey(name: 'readOnly')
  final bool readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  final String? requiredErrorText;
  @override
  @JsonKey(name: 'actionMessage')
  final String? actionMessage;
  @override
  @JsonKey(name: 'association')
  final bool? association;
  @override
  @JsonKey(name: 'isConditional')
  final bool isConditional;
  @override
  @JsonKey(name: 'fromManualList')
  final bool fromManualList;
  @override
  @JsonKey(name: 'selectedLinkListLabel')
  final String? answerList;
  @override
  @JsonKey(name: 'islinked_query')
  final String? linkedQuery;
// Fields.
  final List<ValueText> _choices;
// Fields.
  @override
  @JsonKey(name: 'choice')
  @ValueTextConverter()
  List<ValueText> get choices {
    if (_choices is EqualUnmodifiableListView) return _choices;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_choices);
  }

  @override
  @JsonKey(name: 'maxSelectedChoices')
  final int? maxSelectedChoices;
// None
  @override
  @JsonKey(name: 'showNoneItem')
  final bool showNoneItem;
  @override
  @JsonKey(name: 'noneText')
  final String? noneText;
// Other
  @override
  @JsonKey(name: 'showOtherItem')
  final bool showOtherItem;
  @override
  @JsonKey(name: 'otherText')
  final String? otherText;
  @override
  @JsonKey(name: 'otherPlaceholder')
  final String? otherPlaceholder;
// Select All
  @override
  @JsonKey(name: 'showSelectAllItem')
  final bool showSelectAllItem;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.checkbox(id: $id, label: $label, name: $name, answer: $answer, description: $description, visible: $visible, isRequired: $isRequired, readOnly: $readOnly, requiredErrorText: $requiredErrorText, actionMessage: $actionMessage, association: $association, isConditional: $isConditional, fromManualList: $fromManualList, answerList: $answerList, linkedQuery: $linkedQuery, choices: $choices, maxSelectedChoices: $maxSelectedChoices, showNoneItem: $showNoneItem, noneText: $noneText, showOtherItem: $showOtherItem, otherText: $otherText, otherPlaceholder: $otherPlaceholder, showSelectAllItem: $showSelectAllItem)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$CheckboxInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.name, name) || other.name == name) &&
            (identical(other.answer, answer) || other.answer == answer) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.visible, visible) || other.visible == visible) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired) &&
            (identical(other.readOnly, readOnly) ||
                other.readOnly == readOnly) &&
            (identical(other.requiredErrorText, requiredErrorText) ||
                other.requiredErrorText == requiredErrorText) &&
            (identical(other.actionMessage, actionMessage) ||
                other.actionMessage == actionMessage) &&
            (identical(other.association, association) ||
                other.association == association) &&
            (identical(other.isConditional, isConditional) ||
                other.isConditional == isConditional) &&
            (identical(other.fromManualList, fromManualList) ||
                other.fromManualList == fromManualList) &&
            (identical(other.answerList, answerList) ||
                other.answerList == answerList) &&
            (identical(other.linkedQuery, linkedQuery) ||
                other.linkedQuery == linkedQuery) &&
            const DeepCollectionEquality().equals(other._choices, _choices) &&
            (identical(other.maxSelectedChoices, maxSelectedChoices) ||
                other.maxSelectedChoices == maxSelectedChoices) &&
            (identical(other.showNoneItem, showNoneItem) ||
                other.showNoneItem == showNoneItem) &&
            (identical(other.noneText, noneText) ||
                other.noneText == noneText) &&
            (identical(other.showOtherItem, showOtherItem) ||
                other.showOtherItem == showOtherItem) &&
            (identical(other.otherText, otherText) ||
                other.otherText == otherText) &&
            (identical(other.otherPlaceholder, otherPlaceholder) ||
                other.otherPlaceholder == otherPlaceholder) &&
            (identical(other.showSelectAllItem, showSelectAllItem) ||
                other.showSelectAllItem == showSelectAllItem));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hashAll([
        runtimeType,
        id,
        label,
        name,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        actionMessage,
        association,
        isConditional,
        fromManualList,
        answerList,
        linkedQuery,
        const DeepCollectionEquality().hash(_choices),
        maxSelectedChoices,
        showNoneItem,
        noneText,
        showOtherItem,
        otherText,
        otherPlaceholder,
        showSelectAllItem
      ]);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$CheckboxInputFieldImplCopyWith<_$CheckboxInputFieldImpl> get copyWith =>
      __$$CheckboxInputFieldImplCopyWithImpl<_$CheckboxInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        geolocation,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)
        map,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        table,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        advtable,
  }) {
    return checkbox(
        id,
        label,
        name,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        actionMessage,
        association,
        isConditional,
        fromManualList,
        answerList,
        linkedQuery,
        choices,
        maxSelectedChoices,
        showNoneItem,
        noneText,
        showOtherItem,
        otherText,
        otherPlaceholder,
        showSelectAllItem);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
  }) {
    return checkbox?.call(
        id,
        label,
        name,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        actionMessage,
        association,
        isConditional,
        fromManualList,
        answerList,
        linkedQuery,
        choices,
        maxSelectedChoices,
        showNoneItem,
        noneText,
        showOtherItem,
        otherText,
        otherPlaceholder,
        showSelectAllItem);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
    required TResult orElse(),
  }) {
    if (checkbox != null) {
      return checkbox(
          id,
          label,
          name,
          answer,
          description,
          visible,
          isRequired,
          readOnly,
          requiredErrorText,
          actionMessage,
          association,
          isConditional,
          fromManualList,
          answerList,
          linkedQuery,
          choices,
          maxSelectedChoices,
          showNoneItem,
          noneText,
          showOtherItem,
          otherText,
          otherPlaceholder,
          showSelectAllItem);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
    required TResult Function(MapField value) map,
    required TResult Function(TableField value) table,
    required TResult Function(AdvTableField value) advtable,
  }) {
    return checkbox(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
    TResult? Function(MapField value)? map,
    TResult? Function(TableField value)? table,
    TResult? Function(AdvTableField value)? advtable,
  }) {
    return checkbox?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    TResult Function(MapField value)? map,
    TResult Function(TableField value)? table,
    TResult Function(AdvTableField value)? advtable,
    required TResult orElse(),
  }) {
    if (checkbox != null) {
      return checkbox(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$CheckboxInputFieldImplToJson(
      this,
    );
  }
}

abstract class CheckboxInputField implements InputField {
  const factory CheckboxInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'name') final String? name,
          @JsonKey(name: 'answer') final String? answer,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'visible') final bool visible,
          @JsonKey(name: 'isRequired') final bool isRequired,
          @JsonKey(name: 'readOnly') final bool readOnly,
          @JsonKey(name: 'requiredErrorText') final String? requiredErrorText,
          @JsonKey(name: 'actionMessage') final String? actionMessage,
          @JsonKey(name: 'association') final bool? association,
          @JsonKey(name: 'isConditional') final bool isConditional,
          @JsonKey(name: 'fromManualList') final bool fromManualList,
          @JsonKey(name: 'selectedLinkListLabel') final String? answerList,
          @JsonKey(name: 'islinked_query') final String? linkedQuery,
          @JsonKey(name: 'choice')
          @ValueTextConverter()
          final List<ValueText> choices,
          @JsonKey(name: 'maxSelectedChoices') final int? maxSelectedChoices,
          @JsonKey(name: 'showNoneItem') final bool showNoneItem,
          @JsonKey(name: 'noneText') final String? noneText,
          @JsonKey(name: 'showOtherItem') final bool showOtherItem,
          @JsonKey(name: 'otherText') final String? otherText,
          @JsonKey(name: 'otherPlaceholder') final String? otherPlaceholder,
          @JsonKey(name: 'showSelectAllItem') final bool showSelectAllItem}) =
      _$CheckboxInputFieldImpl;

  factory CheckboxInputField.fromJson(Map<String, dynamic> json) =
      _$CheckboxInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @JsonKey(name: 'name')
  String? get name;
  @override
  @JsonKey(name: 'answer')
  String? get answer;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @JsonKey(name: 'visible')
  bool get visible;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;
  @JsonKey(name: 'readOnly')
  bool get readOnly;
  @JsonKey(name: 'requiredErrorText')
  String? get requiredErrorText;
  @JsonKey(name: 'actionMessage')
  String? get actionMessage;
  @JsonKey(name: 'association')
  bool? get association;
  @JsonKey(name: 'isConditional')
  bool get isConditional;
  @JsonKey(name: 'fromManualList')
  bool get fromManualList;
  @JsonKey(name: 'selectedLinkListLabel')
  String? get answerList;
  @JsonKey(name: 'islinked_query')
  String? get linkedQuery; // Fields.
  @JsonKey(name: 'choice')
  @ValueTextConverter()
  List<ValueText> get choices;
  @JsonKey(name: 'maxSelectedChoices')
  int? get maxSelectedChoices; // None
  @JsonKey(name: 'showNoneItem')
  bool get showNoneItem;
  @JsonKey(name: 'noneText')
  String? get noneText; // Other
  @JsonKey(name: 'showOtherItem')
  bool get showOtherItem;
  @JsonKey(name: 'otherText')
  String? get otherText;
  @JsonKey(name: 'otherPlaceholder')
  String? get otherPlaceholder; // Select All
  @JsonKey(name: 'showSelectAllItem')
  bool get showSelectAllItem;

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$CheckboxInputFieldImplCopyWith<_$CheckboxInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$RadioInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$RadioInputFieldImplCopyWith(_$RadioInputFieldImpl value,
          $Res Function(_$RadioInputFieldImpl) then) =
      __$$RadioInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'name') String? name,
      @JsonKey(name: 'answer') String? answer,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'visible') bool visible,
      @JsonKey(name: 'isRequired') bool isRequired,
      @JsonKey(name: 'readOnly') bool readOnly,
      @JsonKey(name: 'association') bool? association,
      @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
      @JsonKey(name: 'actionMessage') String? actionMessage,
      @JsonKey(name: 'selectedLinkListLabel') String? selectedLinkListLabel,
      @JsonKey(name: 'isConditional') bool isConditional,
      @JsonKey(name: 'choice') @ValueTextConverter() List<ValueText> choices,
      @JsonKey(name: 'showNoneItem') bool showNoneItem,
      @JsonKey(name: 'noneText') String? noneText,
      @JsonKey(name: 'showOtherItem') bool showOtherItem,
      @JsonKey(name: 'otherAnswer') String? otherAnswer,
      @JsonKey(name: 'otherText') String? otherText,
      @JsonKey(name: 'otherErrorText') String? otherErrorText,
      @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
      @JsonKey(name: 'showClearButton') bool showClearButton});
}

/// @nodoc
class __$$RadioInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$RadioInputFieldImpl>
    implements _$$RadioInputFieldImplCopyWith<$Res> {
  __$$RadioInputFieldImplCopyWithImpl(
      _$RadioInputFieldImpl _value, $Res Function(_$RadioInputFieldImpl) _then)
      : super(_value, _then);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? name = freezed,
    Object? answer = freezed,
    Object? description = freezed,
    Object? visible = null,
    Object? isRequired = null,
    Object? readOnly = null,
    Object? association = freezed,
    Object? requiredErrorText = freezed,
    Object? actionMessage = freezed,
    Object? selectedLinkListLabel = freezed,
    Object? isConditional = null,
    Object? choices = null,
    Object? showNoneItem = null,
    Object? noneText = freezed,
    Object? showOtherItem = null,
    Object? otherAnswer = freezed,
    Object? otherText = freezed,
    Object? otherErrorText = freezed,
    Object? otherPlaceholder = freezed,
    Object? showClearButton = null,
  }) {
    return _then(_$RadioInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      name: freezed == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      visible: null == visible
          ? _value.visible
          : visible // ignore: cast_nullable_to_non_nullable
              as bool,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
      readOnly: null == readOnly
          ? _value.readOnly
          : readOnly // ignore: cast_nullable_to_non_nullable
              as bool,
      association: freezed == association
          ? _value.association
          : association // ignore: cast_nullable_to_non_nullable
              as bool?,
      requiredErrorText: freezed == requiredErrorText
          ? _value.requiredErrorText
          : requiredErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      actionMessage: freezed == actionMessage
          ? _value.actionMessage
          : actionMessage // ignore: cast_nullable_to_non_nullable
              as String?,
      selectedLinkListLabel: freezed == selectedLinkListLabel
          ? _value.selectedLinkListLabel
          : selectedLinkListLabel // ignore: cast_nullable_to_non_nullable
              as String?,
      isConditional: null == isConditional
          ? _value.isConditional
          : isConditional // ignore: cast_nullable_to_non_nullable
              as bool,
      choices: null == choices
          ? _value._choices
          : choices // ignore: cast_nullable_to_non_nullable
              as List<ValueText>,
      showNoneItem: null == showNoneItem
          ? _value.showNoneItem
          : showNoneItem // ignore: cast_nullable_to_non_nullable
              as bool,
      noneText: freezed == noneText
          ? _value.noneText
          : noneText // ignore: cast_nullable_to_non_nullable
              as String?,
      showOtherItem: null == showOtherItem
          ? _value.showOtherItem
          : showOtherItem // ignore: cast_nullable_to_non_nullable
              as bool,
      otherAnswer: freezed == otherAnswer
          ? _value.otherAnswer
          : otherAnswer // ignore: cast_nullable_to_non_nullable
              as String?,
      otherText: freezed == otherText
          ? _value.otherText
          : otherText // ignore: cast_nullable_to_non_nullable
              as String?,
      otherErrorText: freezed == otherErrorText
          ? _value.otherErrorText
          : otherErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      otherPlaceholder: freezed == otherPlaceholder
          ? _value.otherPlaceholder
          : otherPlaceholder // ignore: cast_nullable_to_non_nullable
              as String?,
      showClearButton: null == showClearButton
          ? _value.showClearButton
          : showClearButton // ignore: cast_nullable_to_non_nullable
              as bool,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$RadioInputFieldImpl implements RadioInputField {
  const _$RadioInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'name') this.name,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'visible') this.visible = true,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      @JsonKey(name: 'readOnly') this.readOnly = false,
      @JsonKey(name: 'association') this.association,
      @JsonKey(name: 'requiredErrorText') this.requiredErrorText,
      @JsonKey(name: 'actionMessage') this.actionMessage,
      @JsonKey(name: 'selectedLinkListLabel') this.selectedLinkListLabel,
      @JsonKey(name: 'isConditional') this.isConditional = false,
      @JsonKey(name: 'choice')
      @ValueTextConverter()
      final List<ValueText> choices = const [],
      @JsonKey(name: 'showNoneItem') this.showNoneItem = false,
      @JsonKey(name: 'noneText') this.noneText,
      @JsonKey(name: 'showOtherItem') this.showOtherItem = false,
      @JsonKey(name: 'otherAnswer') this.otherAnswer,
      @JsonKey(name: 'otherText') this.otherText,
      @JsonKey(name: 'otherErrorText') this.otherErrorText,
      @JsonKey(name: 'otherPlaceholder') this.otherPlaceholder,
      @JsonKey(name: 'showClearButton') this.showClearButton = false,
      final String? $type})
      : _choices = choices,
        $type = $type ?? 'radiogroup';

  factory _$RadioInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$RadioInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'name')
  final String? name;
  @override
  @JsonKey(name: 'answer')
  final String? answer;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'visible')
  final bool visible;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;
  @override
  @JsonKey(name: 'readOnly')
  final bool readOnly;
  @override
  @JsonKey(name: 'association')
  final bool? association;
  @override
  @JsonKey(name: 'requiredErrorText')
  final String? requiredErrorText;
  @override
  @JsonKey(name: 'actionMessage')
  final String? actionMessage;
  @override
  @JsonKey(name: 'selectedLinkListLabel')
  final String? selectedLinkListLabel;
  @override
  @JsonKey(name: 'isConditional')
  final bool isConditional;
// Fields.
  final List<ValueText> _choices;
// Fields.
  @override
  @JsonKey(name: 'choice')
  @ValueTextConverter()
  List<ValueText> get choices {
    if (_choices is EqualUnmodifiableListView) return _choices;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_choices);
  }

// None
  @override
  @JsonKey(name: 'showNoneItem')
  final bool showNoneItem;
  @override
  @JsonKey(name: 'noneText')
  final String? noneText;
// Other
  @override
  @JsonKey(name: 'showOtherItem')
  final bool showOtherItem;
  @override
  @JsonKey(name: 'otherAnswer')
  final String? otherAnswer;
  @override
  @JsonKey(name: 'otherText')
  final String? otherText;
  @override
  @JsonKey(name: 'otherErrorText')
  final String? otherErrorText;
  @override
  @JsonKey(name: 'otherPlaceholder')
  final String? otherPlaceholder;
// Show clear
  @override
  @JsonKey(name: 'showClearButton')
  final bool showClearButton;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.radiogroup(id: $id, label: $label, name: $name, answer: $answer, description: $description, visible: $visible, isRequired: $isRequired, readOnly: $readOnly, association: $association, requiredErrorText: $requiredErrorText, actionMessage: $actionMessage, selectedLinkListLabel: $selectedLinkListLabel, isConditional: $isConditional, choices: $choices, showNoneItem: $showNoneItem, noneText: $noneText, showOtherItem: $showOtherItem, otherAnswer: $otherAnswer, otherText: $otherText, otherErrorText: $otherErrorText, otherPlaceholder: $otherPlaceholder, showClearButton: $showClearButton)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$RadioInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.name, name) || other.name == name) &&
            (identical(other.answer, answer) || other.answer == answer) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.visible, visible) || other.visible == visible) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired) &&
            (identical(other.readOnly, readOnly) ||
                other.readOnly == readOnly) &&
            (identical(other.association, association) ||
                other.association == association) &&
            (identical(other.requiredErrorText, requiredErrorText) ||
                other.requiredErrorText == requiredErrorText) &&
            (identical(other.actionMessage, actionMessage) ||
                other.actionMessage == actionMessage) &&
            (identical(other.selectedLinkListLabel, selectedLinkListLabel) ||
                other.selectedLinkListLabel == selectedLinkListLabel) &&
            (identical(other.isConditional, isConditional) ||
                other.isConditional == isConditional) &&
            const DeepCollectionEquality().equals(other._choices, _choices) &&
            (identical(other.showNoneItem, showNoneItem) ||
                other.showNoneItem == showNoneItem) &&
            (identical(other.noneText, noneText) ||
                other.noneText == noneText) &&
            (identical(other.showOtherItem, showOtherItem) ||
                other.showOtherItem == showOtherItem) &&
            (identical(other.otherAnswer, otherAnswer) ||
                other.otherAnswer == otherAnswer) &&
            (identical(other.otherText, otherText) ||
                other.otherText == otherText) &&
            (identical(other.otherErrorText, otherErrorText) ||
                other.otherErrorText == otherErrorText) &&
            (identical(other.otherPlaceholder, otherPlaceholder) ||
                other.otherPlaceholder == otherPlaceholder) &&
            (identical(other.showClearButton, showClearButton) ||
                other.showClearButton == showClearButton));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hashAll([
        runtimeType,
        id,
        label,
        name,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        association,
        requiredErrorText,
        actionMessage,
        selectedLinkListLabel,
        isConditional,
        const DeepCollectionEquality().hash(_choices),
        showNoneItem,
        noneText,
        showOtherItem,
        otherAnswer,
        otherText,
        otherErrorText,
        otherPlaceholder,
        showClearButton
      ]);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$RadioInputFieldImplCopyWith<_$RadioInputFieldImpl> get copyWith =>
      __$$RadioInputFieldImplCopyWithImpl<_$RadioInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        geolocation,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)
        map,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        table,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        advtable,
  }) {
    return radiogroup(
        id,
        label,
        name,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        association,
        requiredErrorText,
        actionMessage,
        selectedLinkListLabel,
        isConditional,
        choices,
        showNoneItem,
        noneText,
        showOtherItem,
        otherAnswer,
        otherText,
        otherErrorText,
        otherPlaceholder,
        showClearButton);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
  }) {
    return radiogroup?.call(
        id,
        label,
        name,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        association,
        requiredErrorText,
        actionMessage,
        selectedLinkListLabel,
        isConditional,
        choices,
        showNoneItem,
        noneText,
        showOtherItem,
        otherAnswer,
        otherText,
        otherErrorText,
        otherPlaceholder,
        showClearButton);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
    required TResult orElse(),
  }) {
    if (radiogroup != null) {
      return radiogroup(
          id,
          label,
          name,
          answer,
          description,
          visible,
          isRequired,
          readOnly,
          association,
          requiredErrorText,
          actionMessage,
          selectedLinkListLabel,
          isConditional,
          choices,
          showNoneItem,
          noneText,
          showOtherItem,
          otherAnswer,
          otherText,
          otherErrorText,
          otherPlaceholder,
          showClearButton);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
    required TResult Function(MapField value) map,
    required TResult Function(TableField value) table,
    required TResult Function(AdvTableField value) advtable,
  }) {
    return radiogroup(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
    TResult? Function(MapField value)? map,
    TResult? Function(TableField value)? table,
    TResult? Function(AdvTableField value)? advtable,
  }) {
    return radiogroup?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    TResult Function(MapField value)? map,
    TResult Function(TableField value)? table,
    TResult Function(AdvTableField value)? advtable,
    required TResult orElse(),
  }) {
    if (radiogroup != null) {
      return radiogroup(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$RadioInputFieldImplToJson(
      this,
    );
  }
}

abstract class RadioInputField implements InputField {
  const factory RadioInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'name') final String? name,
          @JsonKey(name: 'answer') final String? answer,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'visible') final bool visible,
          @JsonKey(name: 'isRequired') final bool isRequired,
          @JsonKey(name: 'readOnly') final bool readOnly,
          @JsonKey(name: 'association') final bool? association,
          @JsonKey(name: 'requiredErrorText') final String? requiredErrorText,
          @JsonKey(name: 'actionMessage') final String? actionMessage,
          @JsonKey(name: 'selectedLinkListLabel')
          final String? selectedLinkListLabel,
          @JsonKey(name: 'isConditional') final bool isConditional,
          @JsonKey(name: 'choice')
          @ValueTextConverter()
          final List<ValueText> choices,
          @JsonKey(name: 'showNoneItem') final bool showNoneItem,
          @JsonKey(name: 'noneText') final String? noneText,
          @JsonKey(name: 'showOtherItem') final bool showOtherItem,
          @JsonKey(name: 'otherAnswer') final String? otherAnswer,
          @JsonKey(name: 'otherText') final String? otherText,
          @JsonKey(name: 'otherErrorText') final String? otherErrorText,
          @JsonKey(name: 'otherPlaceholder') final String? otherPlaceholder,
          @JsonKey(name: 'showClearButton') final bool showClearButton}) =
      _$RadioInputFieldImpl;

  factory RadioInputField.fromJson(Map<String, dynamic> json) =
      _$RadioInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @JsonKey(name: 'name')
  String? get name;
  @override
  @JsonKey(name: 'answer')
  String? get answer;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @JsonKey(name: 'visible')
  bool get visible;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;
  @JsonKey(name: 'readOnly')
  bool get readOnly;
  @JsonKey(name: 'association')
  bool? get association;
  @JsonKey(name: 'requiredErrorText')
  String? get requiredErrorText;
  @JsonKey(name: 'actionMessage')
  String? get actionMessage;
  @JsonKey(name: 'selectedLinkListLabel')
  String? get selectedLinkListLabel;
  @JsonKey(name: 'isConditional')
  bool get isConditional; // Fields.
  @JsonKey(name: 'choice')
  @ValueTextConverter()
  List<ValueText> get choices; // None
  @JsonKey(name: 'showNoneItem')
  bool get showNoneItem;
  @JsonKey(name: 'noneText')
  String? get noneText; // Other
  @JsonKey(name: 'showOtherItem')
  bool get showOtherItem;
  @JsonKey(name: 'otherAnswer')
  String? get otherAnswer;
  @JsonKey(name: 'otherText')
  String? get otherText;
  @JsonKey(name: 'otherErrorText')
  String? get otherErrorText;
  @JsonKey(name: 'otherPlaceholder')
  String? get otherPlaceholder; // Show clear
  @JsonKey(name: 'showClearButton')
  bool get showClearButton;

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$RadioInputFieldImplCopyWith<_$RadioInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$YesNoInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$YesNoInputFieldImplCopyWith(_$YesNoInputFieldImpl value,
          $Res Function(_$YesNoInputFieldImpl) then) =
      __$$YesNoInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'name') String? name,
      @JsonKey(name: 'answer') String? answer,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'visible') bool visible,
      @JsonKey(name: 'isRequired') bool isRequired,
      @JsonKey(name: 'readOnly') bool readOnly,
      @JsonKey(name: 'isConditional') bool isConditional,
      @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
      @JsonKey(name: 'selectedLinkListLabel') String? selectedLinkListLabel,
      @JsonKey(name: 'actionMessage') String? actionMessage,
      @JsonKey(name: 'choice') @ValueTextConverter() List<ValueText> choices,
      @JsonKey(name: 'showNoneItem') bool showNoneItem,
      @JsonKey(name: 'noneText') String? noneText,
      @JsonKey(name: 'showOtherItem') bool showOtherItem,
      @JsonKey(name: 'otherText') String? otherText,
      @JsonKey(name: 'otherErrorText') String? otherErrorText,
      @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
      @JsonKey(name: 'showClearButton') bool showClearButton});
}

/// @nodoc
class __$$YesNoInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$YesNoInputFieldImpl>
    implements _$$YesNoInputFieldImplCopyWith<$Res> {
  __$$YesNoInputFieldImplCopyWithImpl(
      _$YesNoInputFieldImpl _value, $Res Function(_$YesNoInputFieldImpl) _then)
      : super(_value, _then);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? name = freezed,
    Object? answer = freezed,
    Object? description = freezed,
    Object? visible = null,
    Object? isRequired = null,
    Object? readOnly = null,
    Object? isConditional = null,
    Object? requiredErrorText = freezed,
    Object? selectedLinkListLabel = freezed,
    Object? actionMessage = freezed,
    Object? choices = null,
    Object? showNoneItem = null,
    Object? noneText = freezed,
    Object? showOtherItem = null,
    Object? otherText = freezed,
    Object? otherErrorText = freezed,
    Object? otherPlaceholder = freezed,
    Object? showClearButton = null,
  }) {
    return _then(_$YesNoInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      name: freezed == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      visible: null == visible
          ? _value.visible
          : visible // ignore: cast_nullable_to_non_nullable
              as bool,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
      readOnly: null == readOnly
          ? _value.readOnly
          : readOnly // ignore: cast_nullable_to_non_nullable
              as bool,
      isConditional: null == isConditional
          ? _value.isConditional
          : isConditional // ignore: cast_nullable_to_non_nullable
              as bool,
      requiredErrorText: freezed == requiredErrorText
          ? _value.requiredErrorText
          : requiredErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      selectedLinkListLabel: freezed == selectedLinkListLabel
          ? _value.selectedLinkListLabel
          : selectedLinkListLabel // ignore: cast_nullable_to_non_nullable
              as String?,
      actionMessage: freezed == actionMessage
          ? _value.actionMessage
          : actionMessage // ignore: cast_nullable_to_non_nullable
              as String?,
      choices: null == choices
          ? _value._choices
          : choices // ignore: cast_nullable_to_non_nullable
              as List<ValueText>,
      showNoneItem: null == showNoneItem
          ? _value.showNoneItem
          : showNoneItem // ignore: cast_nullable_to_non_nullable
              as bool,
      noneText: freezed == noneText
          ? _value.noneText
          : noneText // ignore: cast_nullable_to_non_nullable
              as String?,
      showOtherItem: null == showOtherItem
          ? _value.showOtherItem
          : showOtherItem // ignore: cast_nullable_to_non_nullable
              as bool,
      otherText: freezed == otherText
          ? _value.otherText
          : otherText // ignore: cast_nullable_to_non_nullable
              as String?,
      otherErrorText: freezed == otherErrorText
          ? _value.otherErrorText
          : otherErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      otherPlaceholder: freezed == otherPlaceholder
          ? _value.otherPlaceholder
          : otherPlaceholder // ignore: cast_nullable_to_non_nullable
              as String?,
      showClearButton: null == showClearButton
          ? _value.showClearButton
          : showClearButton // ignore: cast_nullable_to_non_nullable
              as bool,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$YesNoInputFieldImpl implements YesNoInputField {
  const _$YesNoInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'name') this.name,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'visible') this.visible = true,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      @JsonKey(name: 'readOnly') this.readOnly = false,
      @JsonKey(name: 'isConditional') this.isConditional = false,
      @JsonKey(name: 'requiredErrorText') this.requiredErrorText,
      @JsonKey(name: 'selectedLinkListLabel') this.selectedLinkListLabel,
      @JsonKey(name: 'actionMessage') this.actionMessage,
      @JsonKey(name: 'choice')
      @ValueTextConverter()
      final List<ValueText> choices = const [],
      @JsonKey(name: 'showNoneItem') this.showNoneItem = false,
      @JsonKey(name: 'noneText') this.noneText,
      @JsonKey(name: 'showOtherItem') this.showOtherItem = false,
      @JsonKey(name: 'otherText') this.otherText,
      @JsonKey(name: 'otherErrorText') this.otherErrorText,
      @JsonKey(name: 'otherPlaceholder') this.otherPlaceholder,
      @JsonKey(name: 'showClearButton') this.showClearButton = false,
      final String? $type})
      : _choices = choices,
        $type = $type ?? 'yesno';

  factory _$YesNoInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$YesNoInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'name')
  final String? name;
  @override
  @JsonKey(name: 'answer')
  final String? answer;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'visible')
  final bool visible;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;
  @override
  @JsonKey(name: 'readOnly')
  final bool readOnly;
  @override
  @JsonKey(name: 'isConditional')
  final bool isConditional;
  @override
  @JsonKey(name: 'requiredErrorText')
  final String? requiredErrorText;
  @override
  @JsonKey(name: 'selectedLinkListLabel')
  final String? selectedLinkListLabel;
  @override
  @JsonKey(name: 'actionMessage')
  final String? actionMessage;
// Fields.
  final List<ValueText> _choices;
// Fields.
  @override
  @JsonKey(name: 'choice')
  @ValueTextConverter()
  List<ValueText> get choices {
    if (_choices is EqualUnmodifiableListView) return _choices;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_choices);
  }

// None
  @override
  @JsonKey(name: 'showNoneItem')
  final bool showNoneItem;
  @override
  @JsonKey(name: 'noneText')
  final String? noneText;
// Other
  @override
  @JsonKey(name: 'showOtherItem')
  final bool showOtherItem;
  @override
  @JsonKey(name: 'otherText')
  final String? otherText;
  @override
  @JsonKey(name: 'otherErrorText')
  final String? otherErrorText;
  @override
  @JsonKey(name: 'otherPlaceholder')
  final String? otherPlaceholder;
// Show clear
  @override
  @JsonKey(name: 'showClearButton')
  final bool showClearButton;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.yesno(id: $id, label: $label, name: $name, answer: $answer, description: $description, visible: $visible, isRequired: $isRequired, readOnly: $readOnly, isConditional: $isConditional, requiredErrorText: $requiredErrorText, selectedLinkListLabel: $selectedLinkListLabel, actionMessage: $actionMessage, choices: $choices, showNoneItem: $showNoneItem, noneText: $noneText, showOtherItem: $showOtherItem, otherText: $otherText, otherErrorText: $otherErrorText, otherPlaceholder: $otherPlaceholder, showClearButton: $showClearButton)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$YesNoInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.name, name) || other.name == name) &&
            (identical(other.answer, answer) || other.answer == answer) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.visible, visible) || other.visible == visible) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired) &&
            (identical(other.readOnly, readOnly) ||
                other.readOnly == readOnly) &&
            (identical(other.isConditional, isConditional) ||
                other.isConditional == isConditional) &&
            (identical(other.requiredErrorText, requiredErrorText) ||
                other.requiredErrorText == requiredErrorText) &&
            (identical(other.selectedLinkListLabel, selectedLinkListLabel) ||
                other.selectedLinkListLabel == selectedLinkListLabel) &&
            (identical(other.actionMessage, actionMessage) ||
                other.actionMessage == actionMessage) &&
            const DeepCollectionEquality().equals(other._choices, _choices) &&
            (identical(other.showNoneItem, showNoneItem) ||
                other.showNoneItem == showNoneItem) &&
            (identical(other.noneText, noneText) ||
                other.noneText == noneText) &&
            (identical(other.showOtherItem, showOtherItem) ||
                other.showOtherItem == showOtherItem) &&
            (identical(other.otherText, otherText) ||
                other.otherText == otherText) &&
            (identical(other.otherErrorText, otherErrorText) ||
                other.otherErrorText == otherErrorText) &&
            (identical(other.otherPlaceholder, otherPlaceholder) ||
                other.otherPlaceholder == otherPlaceholder) &&
            (identical(other.showClearButton, showClearButton) ||
                other.showClearButton == showClearButton));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hashAll([
        runtimeType,
        id,
        label,
        name,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        isConditional,
        requiredErrorText,
        selectedLinkListLabel,
        actionMessage,
        const DeepCollectionEquality().hash(_choices),
        showNoneItem,
        noneText,
        showOtherItem,
        otherText,
        otherErrorText,
        otherPlaceholder,
        showClearButton
      ]);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$YesNoInputFieldImplCopyWith<_$YesNoInputFieldImpl> get copyWith =>
      __$$YesNoInputFieldImplCopyWithImpl<_$YesNoInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        geolocation,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)
        map,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        table,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        advtable,
  }) {
    return yesno(
        id,
        label,
        name,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        isConditional,
        requiredErrorText,
        selectedLinkListLabel,
        actionMessage,
        choices,
        showNoneItem,
        noneText,
        showOtherItem,
        otherText,
        otherErrorText,
        otherPlaceholder,
        showClearButton);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
  }) {
    return yesno?.call(
        id,
        label,
        name,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        isConditional,
        requiredErrorText,
        selectedLinkListLabel,
        actionMessage,
        choices,
        showNoneItem,
        noneText,
        showOtherItem,
        otherText,
        otherErrorText,
        otherPlaceholder,
        showClearButton);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
    required TResult orElse(),
  }) {
    if (yesno != null) {
      return yesno(
          id,
          label,
          name,
          answer,
          description,
          visible,
          isRequired,
          readOnly,
          isConditional,
          requiredErrorText,
          selectedLinkListLabel,
          actionMessage,
          choices,
          showNoneItem,
          noneText,
          showOtherItem,
          otherText,
          otherErrorText,
          otherPlaceholder,
          showClearButton);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
    required TResult Function(MapField value) map,
    required TResult Function(TableField value) table,
    required TResult Function(AdvTableField value) advtable,
  }) {
    return yesno(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
    TResult? Function(MapField value)? map,
    TResult? Function(TableField value)? table,
    TResult? Function(AdvTableField value)? advtable,
  }) {
    return yesno?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    TResult Function(MapField value)? map,
    TResult Function(TableField value)? table,
    TResult Function(AdvTableField value)? advtable,
    required TResult orElse(),
  }) {
    if (yesno != null) {
      return yesno(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$YesNoInputFieldImplToJson(
      this,
    );
  }
}

abstract class YesNoInputField implements InputField {
  const factory YesNoInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'name') final String? name,
          @JsonKey(name: 'answer') final String? answer,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'visible') final bool visible,
          @JsonKey(name: 'isRequired') final bool isRequired,
          @JsonKey(name: 'readOnly') final bool readOnly,
          @JsonKey(name: 'isConditional') final bool isConditional,
          @JsonKey(name: 'requiredErrorText') final String? requiredErrorText,
          @JsonKey(name: 'selectedLinkListLabel')
          final String? selectedLinkListLabel,
          @JsonKey(name: 'actionMessage') final String? actionMessage,
          @JsonKey(name: 'choice')
          @ValueTextConverter()
          final List<ValueText> choices,
          @JsonKey(name: 'showNoneItem') final bool showNoneItem,
          @JsonKey(name: 'noneText') final String? noneText,
          @JsonKey(name: 'showOtherItem') final bool showOtherItem,
          @JsonKey(name: 'otherText') final String? otherText,
          @JsonKey(name: 'otherErrorText') final String? otherErrorText,
          @JsonKey(name: 'otherPlaceholder') final String? otherPlaceholder,
          @JsonKey(name: 'showClearButton') final bool showClearButton}) =
      _$YesNoInputFieldImpl;

  factory YesNoInputField.fromJson(Map<String, dynamic> json) =
      _$YesNoInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @JsonKey(name: 'name')
  String? get name;
  @override
  @JsonKey(name: 'answer')
  String? get answer;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @JsonKey(name: 'visible')
  bool get visible;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;
  @JsonKey(name: 'readOnly')
  bool get readOnly;
  @JsonKey(name: 'isConditional')
  bool get isConditional;
  @JsonKey(name: 'requiredErrorText')
  String? get requiredErrorText;
  @JsonKey(name: 'selectedLinkListLabel')
  String? get selectedLinkListLabel;
  @JsonKey(name: 'actionMessage')
  String? get actionMessage; // Fields.
  @JsonKey(name: 'choice')
  @ValueTextConverter()
  List<ValueText> get choices; // None
  @JsonKey(name: 'showNoneItem')
  bool get showNoneItem;
  @JsonKey(name: 'noneText')
  String? get noneText; // Other
  @JsonKey(name: 'showOtherItem')
  bool get showOtherItem;
  @JsonKey(name: 'otherText')
  String? get otherText;
  @JsonKey(name: 'otherErrorText')
  String? get otherErrorText;
  @JsonKey(name: 'otherPlaceholder')
  String? get otherPlaceholder; // Show clear
  @JsonKey(name: 'showClearButton')
  bool get showClearButton;

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$YesNoInputFieldImplCopyWith<_$YesNoInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$YesNoNaInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$YesNoNaInputFieldImplCopyWith(_$YesNoNaInputFieldImpl value,
          $Res Function(_$YesNoNaInputFieldImpl) then) =
      __$$YesNoNaInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'name') String? name,
      @JsonKey(name: 'answer') String? answer,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'visible') bool visible,
      @JsonKey(name: 'isRequired') bool isRequired,
      @JsonKey(name: 'readOnly') bool readOnly,
      @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
      @JsonKey(name: 'actionMessage') String? actionMessage,
      @JsonKey(name: 'isConditional') bool isConditional,
      @JsonKey(name: 'selectedLinkListLabel') String? selectedLinkListLabel,
      @JsonKey(name: 'choice') @ValueTextConverter() List<ValueText> choices,
      @JsonKey(name: 'showNoneItem') bool showNoneItem,
      @JsonKey(name: 'noneText') String? noneText,
      @JsonKey(name: 'showOtherItem') bool showOtherItem,
      @JsonKey(name: 'otherText') String? otherText,
      @JsonKey(name: 'otherErrorText') String? otherErrorText,
      @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
      @JsonKey(name: 'showClearButton') bool showClearButton});
}

/// @nodoc
class __$$YesNoNaInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$YesNoNaInputFieldImpl>
    implements _$$YesNoNaInputFieldImplCopyWith<$Res> {
  __$$YesNoNaInputFieldImplCopyWithImpl(_$YesNoNaInputFieldImpl _value,
      $Res Function(_$YesNoNaInputFieldImpl) _then)
      : super(_value, _then);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? name = freezed,
    Object? answer = freezed,
    Object? description = freezed,
    Object? visible = null,
    Object? isRequired = null,
    Object? readOnly = null,
    Object? requiredErrorText = freezed,
    Object? actionMessage = freezed,
    Object? isConditional = null,
    Object? selectedLinkListLabel = freezed,
    Object? choices = null,
    Object? showNoneItem = null,
    Object? noneText = freezed,
    Object? showOtherItem = null,
    Object? otherText = freezed,
    Object? otherErrorText = freezed,
    Object? otherPlaceholder = freezed,
    Object? showClearButton = null,
  }) {
    return _then(_$YesNoNaInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      name: freezed == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      visible: null == visible
          ? _value.visible
          : visible // ignore: cast_nullable_to_non_nullable
              as bool,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
      readOnly: null == readOnly
          ? _value.readOnly
          : readOnly // ignore: cast_nullable_to_non_nullable
              as bool,
      requiredErrorText: freezed == requiredErrorText
          ? _value.requiredErrorText
          : requiredErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      actionMessage: freezed == actionMessage
          ? _value.actionMessage
          : actionMessage // ignore: cast_nullable_to_non_nullable
              as String?,
      isConditional: null == isConditional
          ? _value.isConditional
          : isConditional // ignore: cast_nullable_to_non_nullable
              as bool,
      selectedLinkListLabel: freezed == selectedLinkListLabel
          ? _value.selectedLinkListLabel
          : selectedLinkListLabel // ignore: cast_nullable_to_non_nullable
              as String?,
      choices: null == choices
          ? _value._choices
          : choices // ignore: cast_nullable_to_non_nullable
              as List<ValueText>,
      showNoneItem: null == showNoneItem
          ? _value.showNoneItem
          : showNoneItem // ignore: cast_nullable_to_non_nullable
              as bool,
      noneText: freezed == noneText
          ? _value.noneText
          : noneText // ignore: cast_nullable_to_non_nullable
              as String?,
      showOtherItem: null == showOtherItem
          ? _value.showOtherItem
          : showOtherItem // ignore: cast_nullable_to_non_nullable
              as bool,
      otherText: freezed == otherText
          ? _value.otherText
          : otherText // ignore: cast_nullable_to_non_nullable
              as String?,
      otherErrorText: freezed == otherErrorText
          ? _value.otherErrorText
          : otherErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      otherPlaceholder: freezed == otherPlaceholder
          ? _value.otherPlaceholder
          : otherPlaceholder // ignore: cast_nullable_to_non_nullable
              as String?,
      showClearButton: null == showClearButton
          ? _value.showClearButton
          : showClearButton // ignore: cast_nullable_to_non_nullable
              as bool,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$YesNoNaInputFieldImpl implements YesNoNaInputField {
  const _$YesNoNaInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'name') this.name,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'visible') this.visible = true,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      @JsonKey(name: 'readOnly') this.readOnly = false,
      @JsonKey(name: 'requiredErrorText') this.requiredErrorText,
      @JsonKey(name: 'actionMessage') this.actionMessage,
      @JsonKey(name: 'isConditional') this.isConditional = false,
      @JsonKey(name: 'selectedLinkListLabel') this.selectedLinkListLabel,
      @JsonKey(name: 'choice')
      @ValueTextConverter()
      final List<ValueText> choices = const [],
      @JsonKey(name: 'showNoneItem') this.showNoneItem = false,
      @JsonKey(name: 'noneText') this.noneText,
      @JsonKey(name: 'showOtherItem') this.showOtherItem = false,
      @JsonKey(name: 'otherText') this.otherText,
      @JsonKey(name: 'otherErrorText') this.otherErrorText,
      @JsonKey(name: 'otherPlaceholder') this.otherPlaceholder,
      @JsonKey(name: 'showClearButton') this.showClearButton = false,
      final String? $type})
      : _choices = choices,
        $type = $type ?? 'yesnona';

  factory _$YesNoNaInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$YesNoNaInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'name')
  final String? name;
  @override
  @JsonKey(name: 'answer')
  final String? answer;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'visible')
  final bool visible;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;
  @override
  @JsonKey(name: 'readOnly')
  final bool readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  final String? requiredErrorText;
  @override
  @JsonKey(name: 'actionMessage')
  final String? actionMessage;
  @override
  @JsonKey(name: 'isConditional')
  final bool isConditional;
  @override
  @JsonKey(name: 'selectedLinkListLabel')
  final String? selectedLinkListLabel;
// Fields.
  final List<ValueText> _choices;
// Fields.
  @override
  @JsonKey(name: 'choice')
  @ValueTextConverter()
  List<ValueText> get choices {
    if (_choices is EqualUnmodifiableListView) return _choices;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_choices);
  }

// None
  @override
  @JsonKey(name: 'showNoneItem')
  final bool showNoneItem;
  @override
  @JsonKey(name: 'noneText')
  final String? noneText;
// Other
  @override
  @JsonKey(name: 'showOtherItem')
  final bool showOtherItem;
  @override
  @JsonKey(name: 'otherText')
  final String? otherText;
  @override
  @JsonKey(name: 'otherErrorText')
  final String? otherErrorText;
  @override
  @JsonKey(name: 'otherPlaceholder')
  final String? otherPlaceholder;
// Show clear
  @override
  @JsonKey(name: 'showClearButton')
  final bool showClearButton;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.yesnona(id: $id, label: $label, name: $name, answer: $answer, description: $description, visible: $visible, isRequired: $isRequired, readOnly: $readOnly, requiredErrorText: $requiredErrorText, actionMessage: $actionMessage, isConditional: $isConditional, selectedLinkListLabel: $selectedLinkListLabel, choices: $choices, showNoneItem: $showNoneItem, noneText: $noneText, showOtherItem: $showOtherItem, otherText: $otherText, otherErrorText: $otherErrorText, otherPlaceholder: $otherPlaceholder, showClearButton: $showClearButton)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$YesNoNaInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.name, name) || other.name == name) &&
            (identical(other.answer, answer) || other.answer == answer) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.visible, visible) || other.visible == visible) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired) &&
            (identical(other.readOnly, readOnly) ||
                other.readOnly == readOnly) &&
            (identical(other.requiredErrorText, requiredErrorText) ||
                other.requiredErrorText == requiredErrorText) &&
            (identical(other.actionMessage, actionMessage) ||
                other.actionMessage == actionMessage) &&
            (identical(other.isConditional, isConditional) ||
                other.isConditional == isConditional) &&
            (identical(other.selectedLinkListLabel, selectedLinkListLabel) ||
                other.selectedLinkListLabel == selectedLinkListLabel) &&
            const DeepCollectionEquality().equals(other._choices, _choices) &&
            (identical(other.showNoneItem, showNoneItem) ||
                other.showNoneItem == showNoneItem) &&
            (identical(other.noneText, noneText) ||
                other.noneText == noneText) &&
            (identical(other.showOtherItem, showOtherItem) ||
                other.showOtherItem == showOtherItem) &&
            (identical(other.otherText, otherText) ||
                other.otherText == otherText) &&
            (identical(other.otherErrorText, otherErrorText) ||
                other.otherErrorText == otherErrorText) &&
            (identical(other.otherPlaceholder, otherPlaceholder) ||
                other.otherPlaceholder == otherPlaceholder) &&
            (identical(other.showClearButton, showClearButton) ||
                other.showClearButton == showClearButton));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hashAll([
        runtimeType,
        id,
        label,
        name,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        actionMessage,
        isConditional,
        selectedLinkListLabel,
        const DeepCollectionEquality().hash(_choices),
        showNoneItem,
        noneText,
        showOtherItem,
        otherText,
        otherErrorText,
        otherPlaceholder,
        showClearButton
      ]);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$YesNoNaInputFieldImplCopyWith<_$YesNoNaInputFieldImpl> get copyWith =>
      __$$YesNoNaInputFieldImplCopyWithImpl<_$YesNoNaInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        geolocation,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)
        map,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        table,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        advtable,
  }) {
    return yesnona(
        id,
        label,
        name,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        actionMessage,
        isConditional,
        selectedLinkListLabel,
        choices,
        showNoneItem,
        noneText,
        showOtherItem,
        otherText,
        otherErrorText,
        otherPlaceholder,
        showClearButton);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
  }) {
    return yesnona?.call(
        id,
        label,
        name,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        actionMessage,
        isConditional,
        selectedLinkListLabel,
        choices,
        showNoneItem,
        noneText,
        showOtherItem,
        otherText,
        otherErrorText,
        otherPlaceholder,
        showClearButton);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
    required TResult orElse(),
  }) {
    if (yesnona != null) {
      return yesnona(
          id,
          label,
          name,
          answer,
          description,
          visible,
          isRequired,
          readOnly,
          requiredErrorText,
          actionMessage,
          isConditional,
          selectedLinkListLabel,
          choices,
          showNoneItem,
          noneText,
          showOtherItem,
          otherText,
          otherErrorText,
          otherPlaceholder,
          showClearButton);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
    required TResult Function(MapField value) map,
    required TResult Function(TableField value) table,
    required TResult Function(AdvTableField value) advtable,
  }) {
    return yesnona(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
    TResult? Function(MapField value)? map,
    TResult? Function(TableField value)? table,
    TResult? Function(AdvTableField value)? advtable,
  }) {
    return yesnona?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    TResult Function(MapField value)? map,
    TResult Function(TableField value)? table,
    TResult Function(AdvTableField value)? advtable,
    required TResult orElse(),
  }) {
    if (yesnona != null) {
      return yesnona(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$YesNoNaInputFieldImplToJson(
      this,
    );
  }
}

abstract class YesNoNaInputField implements InputField {
  const factory YesNoNaInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'name') final String? name,
          @JsonKey(name: 'answer') final String? answer,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'visible') final bool visible,
          @JsonKey(name: 'isRequired') final bool isRequired,
          @JsonKey(name: 'readOnly') final bool readOnly,
          @JsonKey(name: 'requiredErrorText') final String? requiredErrorText,
          @JsonKey(name: 'actionMessage') final String? actionMessage,
          @JsonKey(name: 'isConditional') final bool isConditional,
          @JsonKey(name: 'selectedLinkListLabel')
          final String? selectedLinkListLabel,
          @JsonKey(name: 'choice')
          @ValueTextConverter()
          final List<ValueText> choices,
          @JsonKey(name: 'showNoneItem') final bool showNoneItem,
          @JsonKey(name: 'noneText') final String? noneText,
          @JsonKey(name: 'showOtherItem') final bool showOtherItem,
          @JsonKey(name: 'otherText') final String? otherText,
          @JsonKey(name: 'otherErrorText') final String? otherErrorText,
          @JsonKey(name: 'otherPlaceholder') final String? otherPlaceholder,
          @JsonKey(name: 'showClearButton') final bool showClearButton}) =
      _$YesNoNaInputFieldImpl;

  factory YesNoNaInputField.fromJson(Map<String, dynamic> json) =
      _$YesNoNaInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @JsonKey(name: 'name')
  String? get name;
  @override
  @JsonKey(name: 'answer')
  String? get answer;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @JsonKey(name: 'visible')
  bool get visible;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;
  @JsonKey(name: 'readOnly')
  bool get readOnly;
  @JsonKey(name: 'requiredErrorText')
  String? get requiredErrorText;
  @JsonKey(name: 'actionMessage')
  String? get actionMessage;
  @JsonKey(name: 'isConditional')
  bool get isConditional;
  @JsonKey(name: 'selectedLinkListLabel')
  String? get selectedLinkListLabel; // Fields.
  @JsonKey(name: 'choice')
  @ValueTextConverter()
  List<ValueText> get choices; // None
  @JsonKey(name: 'showNoneItem')
  bool get showNoneItem;
  @JsonKey(name: 'noneText')
  String? get noneText; // Other
  @JsonKey(name: 'showOtherItem')
  bool get showOtherItem;
  @JsonKey(name: 'otherText')
  String? get otherText;
  @JsonKey(name: 'otherErrorText')
  String? get otherErrorText;
  @JsonKey(name: 'otherPlaceholder')
  String? get otherPlaceholder; // Show clear
  @JsonKey(name: 'showClearButton')
  bool get showClearButton;

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$YesNoNaInputFieldImplCopyWith<_$YesNoNaInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$FileInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$FileInputFieldImplCopyWith(_$FileInputFieldImpl value,
          $Res Function(_$FileInputFieldImpl) then) =
      __$$FileInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'name') String? name,
      @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'isMultiple') bool isMultiple,
      @JsonKey(name: 'isRequired') bool isRequired});
}

/// @nodoc
class __$$FileInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$FileInputFieldImpl>
    implements _$$FileInputFieldImplCopyWith<$Res> {
  __$$FileInputFieldImplCopyWithImpl(
      _$FileInputFieldImpl _value, $Res Function(_$FileInputFieldImpl) _then)
      : super(_value, _then);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? name = freezed,
    Object? answer = freezed,
    Object? description = freezed,
    Object? isMultiple = null,
    Object? isRequired = null,
  }) {
    return _then(_$FileInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      name: freezed == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value._answer
          : answer // ignore: cast_nullable_to_non_nullable
              as List<Map<String, dynamic>>?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      isMultiple: null == isMultiple
          ? _value.isMultiple
          : isMultiple // ignore: cast_nullable_to_non_nullable
              as bool,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$FileInputFieldImpl implements FileInputField {
  const _$FileInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'name') this.name,
      @JsonKey(name: 'answer') final List<Map<String, dynamic>>? answer,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'isMultiple') this.isMultiple = false,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      final String? $type})
      : _answer = answer,
        $type = $type ?? 'files';

  factory _$FileInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$FileInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'name')
  final String? name;
  final List<Map<String, dynamic>>? _answer;
  @override
  @JsonKey(name: 'answer')
  List<Map<String, dynamic>>? get answer {
    final value = _answer;
    if (value == null) return null;
    if (_answer is EqualUnmodifiableListView) return _answer;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(value);
  }

  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'isMultiple')
  final bool isMultiple;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.files(id: $id, label: $label, name: $name, answer: $answer, description: $description, isMultiple: $isMultiple, isRequired: $isRequired)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$FileInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.name, name) || other.name == name) &&
            const DeepCollectionEquality().equals(other._answer, _answer) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.isMultiple, isMultiple) ||
                other.isMultiple == isMultiple) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(
      runtimeType,
      id,
      label,
      name,
      const DeepCollectionEquality().hash(_answer),
      description,
      isMultiple,
      isRequired);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$FileInputFieldImplCopyWith<_$FileInputFieldImpl> get copyWith =>
      __$$FileInputFieldImplCopyWithImpl<_$FileInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        geolocation,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)
        map,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        table,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        advtable,
  }) {
    return files(id, label, name, answer, description, isMultiple, isRequired);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
  }) {
    return files?.call(
        id, label, name, answer, description, isMultiple, isRequired);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
    required TResult orElse(),
  }) {
    if (files != null) {
      return files(
          id, label, name, answer, description, isMultiple, isRequired);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
    required TResult Function(MapField value) map,
    required TResult Function(TableField value) table,
    required TResult Function(AdvTableField value) advtable,
  }) {
    return files(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
    TResult? Function(MapField value)? map,
    TResult? Function(TableField value)? table,
    TResult? Function(AdvTableField value)? advtable,
  }) {
    return files?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    TResult Function(MapField value)? map,
    TResult Function(TableField value)? table,
    TResult Function(AdvTableField value)? advtable,
    required TResult orElse(),
  }) {
    if (files != null) {
      return files(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$FileInputFieldImplToJson(
      this,
    );
  }
}

abstract class FileInputField implements InputField {
  const factory FileInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'name') final String? name,
          @JsonKey(name: 'answer') final List<Map<String, dynamic>>? answer,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'isMultiple') final bool isMultiple,
          @JsonKey(name: 'isRequired') final bool isRequired}) =
      _$FileInputFieldImpl;

  factory FileInputField.fromJson(Map<String, dynamic> json) =
      _$FileInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @JsonKey(name: 'name')
  String? get name;
  @override
  @JsonKey(name: 'answer')
  List<Map<String, dynamic>>? get answer;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @JsonKey(name: 'isMultiple')
  bool get isMultiple;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$FileInputFieldImplCopyWith<_$FileInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$ImageInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$ImageInputFieldImplCopyWith(_$ImageInputFieldImpl value,
          $Res Function(_$ImageInputFieldImpl) then) =
      __$$ImageInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'name') String? name,
      @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'isMultiple') bool isMultiple,
      @JsonKey(name: 'isRequired') bool isRequired});
}

/// @nodoc
class __$$ImageInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$ImageInputFieldImpl>
    implements _$$ImageInputFieldImplCopyWith<$Res> {
  __$$ImageInputFieldImplCopyWithImpl(
      _$ImageInputFieldImpl _value, $Res Function(_$ImageInputFieldImpl) _then)
      : super(_value, _then);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? name = freezed,
    Object? answer = freezed,
    Object? description = freezed,
    Object? isMultiple = null,
    Object? isRequired = null,
  }) {
    return _then(_$ImageInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      name: freezed == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value._answer
          : answer // ignore: cast_nullable_to_non_nullable
              as List<Map<String, dynamic>>?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      isMultiple: null == isMultiple
          ? _value.isMultiple
          : isMultiple // ignore: cast_nullable_to_non_nullable
              as bool,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$ImageInputFieldImpl implements ImageInputField {
  const _$ImageInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'name') this.name,
      @JsonKey(name: 'answer') final List<Map<String, dynamic>>? answer,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'isMultiple') this.isMultiple = false,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      final String? $type})
      : _answer = answer,
        $type = $type ?? 'images';

  factory _$ImageInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$ImageInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'name')
  final String? name;
  final List<Map<String, dynamic>>? _answer;
  @override
  @JsonKey(name: 'answer')
  List<Map<String, dynamic>>? get answer {
    final value = _answer;
    if (value == null) return null;
    if (_answer is EqualUnmodifiableListView) return _answer;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(value);
  }

  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'isMultiple')
  final bool isMultiple;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.images(id: $id, label: $label, name: $name, answer: $answer, description: $description, isMultiple: $isMultiple, isRequired: $isRequired)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$ImageInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.name, name) || other.name == name) &&
            const DeepCollectionEquality().equals(other._answer, _answer) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.isMultiple, isMultiple) ||
                other.isMultiple == isMultiple) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(
      runtimeType,
      id,
      label,
      name,
      const DeepCollectionEquality().hash(_answer),
      description,
      isMultiple,
      isRequired);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$ImageInputFieldImplCopyWith<_$ImageInputFieldImpl> get copyWith =>
      __$$ImageInputFieldImplCopyWithImpl<_$ImageInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        geolocation,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)
        map,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        table,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        advtable,
  }) {
    return images(id, label, name, answer, description, isMultiple, isRequired);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
  }) {
    return images?.call(
        id, label, name, answer, description, isMultiple, isRequired);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
    required TResult orElse(),
  }) {
    if (images != null) {
      return images(
          id, label, name, answer, description, isMultiple, isRequired);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
    required TResult Function(MapField value) map,
    required TResult Function(TableField value) table,
    required TResult Function(AdvTableField value) advtable,
  }) {
    return images(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
    TResult? Function(MapField value)? map,
    TResult? Function(TableField value)? table,
    TResult? Function(AdvTableField value)? advtable,
  }) {
    return images?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    TResult Function(MapField value)? map,
    TResult Function(TableField value)? table,
    TResult Function(AdvTableField value)? advtable,
    required TResult orElse(),
  }) {
    if (images != null) {
      return images(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$ImageInputFieldImplToJson(
      this,
    );
  }
}

abstract class ImageInputField implements InputField {
  const factory ImageInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'name') final String? name,
          @JsonKey(name: 'answer') final List<Map<String, dynamic>>? answer,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'isMultiple') final bool isMultiple,
          @JsonKey(name: 'isRequired') final bool isRequired}) =
      _$ImageInputFieldImpl;

  factory ImageInputField.fromJson(Map<String, dynamic> json) =
      _$ImageInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @JsonKey(name: 'name')
  String? get name;
  @override
  @JsonKey(name: 'answer')
  List<Map<String, dynamic>>? get answer;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @JsonKey(name: 'isMultiple')
  bool get isMultiple;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$ImageInputFieldImplCopyWith<_$ImageInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$GeolocationFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$GeolocationFieldImplCopyWith(_$GeolocationFieldImpl value,
          $Res Function(_$GeolocationFieldImpl) then) =
      __$$GeolocationFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'name') String? name,
      @JsonKey(name: 'answer') Map<String, dynamic>? answer,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'isRequired') bool isRequired});
}

/// @nodoc
class __$$GeolocationFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$GeolocationFieldImpl>
    implements _$$GeolocationFieldImplCopyWith<$Res> {
  __$$GeolocationFieldImplCopyWithImpl(_$GeolocationFieldImpl _value,
      $Res Function(_$GeolocationFieldImpl) _then)
      : super(_value, _then);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? name = freezed,
    Object? answer = freezed,
    Object? description = freezed,
    Object? isRequired = null,
  }) {
    return _then(_$GeolocationFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      name: freezed == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value._answer
          : answer // ignore: cast_nullable_to_non_nullable
              as Map<String, dynamic>?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$GeolocationFieldImpl implements GeolocationField {
  const _$GeolocationFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'name') this.name,
      @JsonKey(name: 'answer') final Map<String, dynamic>? answer,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      final String? $type})
      : _answer = answer,
        $type = $type ?? 'geolocation';

  factory _$GeolocationFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$GeolocationFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'name')
  final String? name;
  final Map<String, dynamic>? _answer;
  @override
  @JsonKey(name: 'answer')
  Map<String, dynamic>? get answer {
    final value = _answer;
    if (value == null) return null;
    if (_answer is EqualUnmodifiableMapView) return _answer;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableMapView(value);
  }

  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.geolocation(id: $id, label: $label, name: $name, answer: $answer, description: $description, isRequired: $isRequired)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$GeolocationFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.name, name) || other.name == name) &&
            const DeepCollectionEquality().equals(other._answer, _answer) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, id, label, name,
      const DeepCollectionEquality().hash(_answer), description, isRequired);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$GeolocationFieldImplCopyWith<_$GeolocationFieldImpl> get copyWith =>
      __$$GeolocationFieldImplCopyWithImpl<_$GeolocationFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        geolocation,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)
        map,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        table,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        advtable,
  }) {
    return geolocation(id, label, name, answer, description, isRequired);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
  }) {
    return geolocation?.call(id, label, name, answer, description, isRequired);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
    required TResult orElse(),
  }) {
    if (geolocation != null) {
      return geolocation(id, label, name, answer, description, isRequired);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
    required TResult Function(MapField value) map,
    required TResult Function(TableField value) table,
    required TResult Function(AdvTableField value) advtable,
  }) {
    return geolocation(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
    TResult? Function(MapField value)? map,
    TResult? Function(TableField value)? table,
    TResult? Function(AdvTableField value)? advtable,
  }) {
    return geolocation?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    TResult Function(MapField value)? map,
    TResult Function(TableField value)? table,
    TResult Function(AdvTableField value)? advtable,
    required TResult orElse(),
  }) {
    if (geolocation != null) {
      return geolocation(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$GeolocationFieldImplToJson(
      this,
    );
  }
}

abstract class GeolocationField implements InputField {
  const factory GeolocationField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'name') final String? name,
          @JsonKey(name: 'answer') final Map<String, dynamic>? answer,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'isRequired') final bool isRequired}) =
      _$GeolocationFieldImpl;

  factory GeolocationField.fromJson(Map<String, dynamic> json) =
      _$GeolocationFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @JsonKey(name: 'name')
  String? get name;
  @override
  @JsonKey(name: 'answer')
  Map<String, dynamic>? get answer;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$GeolocationFieldImplCopyWith<_$GeolocationFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$MapFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$MapFieldImplCopyWith(
          _$MapFieldImpl value, $Res Function(_$MapFieldImpl) then) =
      __$$MapFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'name') String? name,
      @JsonKey(name: 'isRequired') bool isRequired,
      @JsonKey(name: 'addressLine') String? addressLine,
      @JsonKey(name: 'answer') String? answer,
      @JsonKey(name: 'description') String? description});
}

/// @nodoc
class __$$MapFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$MapFieldImpl>
    implements _$$MapFieldImplCopyWith<$Res> {
  __$$MapFieldImplCopyWithImpl(
      _$MapFieldImpl _value, $Res Function(_$MapFieldImpl) _then)
      : super(_value, _then);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? name = freezed,
    Object? isRequired = null,
    Object? addressLine = freezed,
    Object? answer = freezed,
    Object? description = freezed,
  }) {
    return _then(_$MapFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      name: freezed == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as String?,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
      addressLine: freezed == addressLine
          ? _value.addressLine
          : addressLine // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$MapFieldImpl implements MapField {
  const _$MapFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'name') this.name,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      @JsonKey(name: 'addressLine') this.addressLine,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'description') this.description,
      final String? $type})
      : $type = $type ?? 'map';

  factory _$MapFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$MapFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'name')
  final String? name;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;
  @override
  @JsonKey(name: 'addressLine')
  final String? addressLine;
  @override
  @JsonKey(name: 'answer')
  final String? answer;
  @override
  @JsonKey(name: 'description')
  final String? description;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.map(id: $id, label: $label, name: $name, isRequired: $isRequired, addressLine: $addressLine, answer: $answer, description: $description)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$MapFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.name, name) || other.name == name) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired) &&
            (identical(other.addressLine, addressLine) ||
                other.addressLine == addressLine) &&
            (identical(other.answer, answer) || other.answer == answer) &&
            (identical(other.description, description) ||
                other.description == description));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, id, label, name, isRequired,
      addressLine, answer, description);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$MapFieldImplCopyWith<_$MapFieldImpl> get copyWith =>
      __$$MapFieldImplCopyWithImpl<_$MapFieldImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        geolocation,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)
        map,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        table,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        advtable,
  }) {
    return map(id, label, name, isRequired, addressLine, answer, description);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
  }) {
    return map?.call(
        id, label, name, isRequired, addressLine, answer, description);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
    required TResult orElse(),
  }) {
    if (map != null) {
      return map(id, label, name, isRequired, addressLine, answer, description);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
    required TResult Function(MapField value) map,
    required TResult Function(TableField value) table,
    required TResult Function(AdvTableField value) advtable,
  }) {
    return map(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
    TResult? Function(MapField value)? map,
    TResult? Function(TableField value)? table,
    TResult? Function(AdvTableField value)? advtable,
  }) {
    return map?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    TResult Function(MapField value)? map,
    TResult Function(TableField value)? table,
    TResult Function(AdvTableField value)? advtable,
    required TResult orElse(),
  }) {
    if (map != null) {
      return map(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$MapFieldImplToJson(
      this,
    );
  }
}

abstract class MapField implements InputField {
  const factory MapField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'name') final String? name,
          @JsonKey(name: 'isRequired') final bool isRequired,
          @JsonKey(name: 'addressLine') final String? addressLine,
          @JsonKey(name: 'answer') final String? answer,
          @JsonKey(name: 'description') final String? description}) =
      _$MapFieldImpl;

  factory MapField.fromJson(Map<String, dynamic> json) =
      _$MapFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @JsonKey(name: 'name')
  String? get name;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;
  @JsonKey(name: 'addressLine')
  String? get addressLine;
  @override
  @JsonKey(name: 'answer')
  String? get answer;
  @override
  @JsonKey(name: 'description')
  String? get description;

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$MapFieldImplCopyWith<_$MapFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$TableFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$TableFieldImplCopyWith(
          _$TableFieldImpl value, $Res Function(_$TableFieldImpl) then) =
      __$$TableFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'tableId') String? tableId,
      List<String>? headers,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'name') String? name,
      @JsonKey(name: 'isRequired') bool isRequired,
      @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'visible') bool visible,
      @JsonKey(name: 'readOnly') bool readOnly,
      @JsonKey(name: 'answer') dynamic answer,
      @JsonKey(name: 'isRow') bool isRow,
      @JsonKey(name: 'contents')
      @InputFieldConverter()
      List<List<InputField>>? inputFields});
}

/// @nodoc
class __$$TableFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$TableFieldImpl>
    implements _$$TableFieldImplCopyWith<$Res> {
  __$$TableFieldImplCopyWithImpl(
      _$TableFieldImpl _value, $Res Function(_$TableFieldImpl) _then)
      : super(_value, _then);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? tableId = freezed,
    Object? headers = freezed,
    Object? label = freezed,
    Object? name = freezed,
    Object? isRequired = null,
    Object? requiredErrorText = freezed,
    Object? description = freezed,
    Object? visible = null,
    Object? readOnly = null,
    Object? answer = freezed,
    Object? isRow = null,
    Object? inputFields = freezed,
  }) {
    return _then(_$TableFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      tableId: freezed == tableId
          ? _value.tableId
          : tableId // ignore: cast_nullable_to_non_nullable
              as String?,
      headers: freezed == headers
          ? _value._headers
          : headers // ignore: cast_nullable_to_non_nullable
              as List<String>?,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      name: freezed == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as String?,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
      requiredErrorText: freezed == requiredErrorText
          ? _value.requiredErrorText
          : requiredErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      visible: null == visible
          ? _value.visible
          : visible // ignore: cast_nullable_to_non_nullable
              as bool,
      readOnly: null == readOnly
          ? _value.readOnly
          : readOnly // ignore: cast_nullable_to_non_nullable
              as bool,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as dynamic,
      isRow: null == isRow
          ? _value.isRow
          : isRow // ignore: cast_nullable_to_non_nullable
              as bool,
      inputFields: freezed == inputFields
          ? _value._inputFields
          : inputFields // ignore: cast_nullable_to_non_nullable
              as List<List<InputField>>?,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$TableFieldImpl implements TableField {
  const _$TableFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'tableId') this.tableId,
      final List<String>? headers,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'name') this.name,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      @JsonKey(name: 'requiredErrorText') this.requiredErrorText,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'visible') this.visible = true,
      @JsonKey(name: 'readOnly') this.readOnly = false,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'isRow') this.isRow = true,
      @JsonKey(name: 'contents')
      @InputFieldConverter()
      final List<List<InputField>>? inputFields,
      final String? $type})
      : _headers = headers,
        _inputFields = inputFields,
        $type = $type ?? 'table';

  factory _$TableFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$TableFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'tableId')
  final String? tableId;
  final List<String>? _headers;
  @override
  List<String>? get headers {
    final value = _headers;
    if (value == null) return null;
    if (_headers is EqualUnmodifiableListView) return _headers;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(value);
  }

  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'name')
  final String? name;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;
  @override
  @JsonKey(name: 'requiredErrorText')
  final String? requiredErrorText;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'visible')
  final bool visible;
  @override
  @JsonKey(name: 'readOnly')
  final bool readOnly;
  @override
  @JsonKey(name: 'answer')
  final dynamic answer;
  @override
  @JsonKey(name: 'isRow')
  final bool isRow;
  final List<List<InputField>>? _inputFields;
  @override
  @JsonKey(name: 'contents')
  @InputFieldConverter()
  List<List<InputField>>? get inputFields {
    final value = _inputFields;
    if (value == null) return null;
    if (_inputFields is EqualUnmodifiableListView) return _inputFields;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(value);
  }

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.table(id: $id, tableId: $tableId, headers: $headers, label: $label, name: $name, isRequired: $isRequired, requiredErrorText: $requiredErrorText, description: $description, visible: $visible, readOnly: $readOnly, answer: $answer, isRow: $isRow, inputFields: $inputFields)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$TableFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.tableId, tableId) || other.tableId == tableId) &&
            const DeepCollectionEquality().equals(other._headers, _headers) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.name, name) || other.name == name) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired) &&
            (identical(other.requiredErrorText, requiredErrorText) ||
                other.requiredErrorText == requiredErrorText) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.visible, visible) || other.visible == visible) &&
            (identical(other.readOnly, readOnly) ||
                other.readOnly == readOnly) &&
            const DeepCollectionEquality().equals(other.answer, answer) &&
            (identical(other.isRow, isRow) || other.isRow == isRow) &&
            const DeepCollectionEquality()
                .equals(other._inputFields, _inputFields));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(
      runtimeType,
      id,
      tableId,
      const DeepCollectionEquality().hash(_headers),
      label,
      name,
      isRequired,
      requiredErrorText,
      description,
      visible,
      readOnly,
      const DeepCollectionEquality().hash(answer),
      isRow,
      const DeepCollectionEquality().hash(_inputFields));

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$TableFieldImplCopyWith<_$TableFieldImpl> get copyWith =>
      __$$TableFieldImplCopyWithImpl<_$TableFieldImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        geolocation,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)
        map,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        table,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        advtable,
  }) {
    return table(
        id,
        tableId,
        headers,
        label,
        name,
        isRequired,
        requiredErrorText,
        description,
        visible,
        readOnly,
        answer,
        isRow,
        inputFields);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
  }) {
    return table?.call(
        id,
        tableId,
        headers,
        label,
        name,
        isRequired,
        requiredErrorText,
        description,
        visible,
        readOnly,
        answer,
        isRow,
        inputFields);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
    required TResult orElse(),
  }) {
    if (table != null) {
      return table(
          id,
          tableId,
          headers,
          label,
          name,
          isRequired,
          requiredErrorText,
          description,
          visible,
          readOnly,
          answer,
          isRow,
          inputFields);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
    required TResult Function(MapField value) map,
    required TResult Function(TableField value) table,
    required TResult Function(AdvTableField value) advtable,
  }) {
    return table(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
    TResult? Function(MapField value)? map,
    TResult? Function(TableField value)? table,
    TResult? Function(AdvTableField value)? advtable,
  }) {
    return table?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    TResult Function(MapField value)? map,
    TResult Function(TableField value)? table,
    TResult Function(AdvTableField value)? advtable,
    required TResult orElse(),
  }) {
    if (table != null) {
      return table(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$TableFieldImplToJson(
      this,
    );
  }
}

abstract class TableField implements InputField {
  const factory TableField(
      {@JsonKey(name: 'id') required final String id,
      @JsonKey(name: 'tableId') final String? tableId,
      final List<String>? headers,
      @JsonKey(name: 'label') final String? label,
      @JsonKey(name: 'name') final String? name,
      @JsonKey(name: 'isRequired') final bool isRequired,
      @JsonKey(name: 'requiredErrorText') final String? requiredErrorText,
      @JsonKey(name: 'description') final String? description,
      @JsonKey(name: 'visible') final bool visible,
      @JsonKey(name: 'readOnly') final bool readOnly,
      @JsonKey(name: 'answer') final dynamic answer,
      @JsonKey(name: 'isRow') final bool isRow,
      @JsonKey(name: 'contents')
      @InputFieldConverter()
      final List<List<InputField>>? inputFields}) = _$TableFieldImpl;

  factory TableField.fromJson(Map<String, dynamic> json) =
      _$TableFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @JsonKey(name: 'tableId')
  String? get tableId;
  List<String>? get headers;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @JsonKey(name: 'name')
  String? get name;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;
  @JsonKey(name: 'requiredErrorText')
  String? get requiredErrorText;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @JsonKey(name: 'visible')
  bool get visible;
  @JsonKey(name: 'readOnly')
  bool get readOnly;
  @override
  @JsonKey(name: 'answer')
  dynamic get answer;
  @JsonKey(name: 'isRow')
  bool get isRow;
  @JsonKey(name: 'contents')
  @InputFieldConverter()
  List<List<InputField>>? get inputFields;

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$TableFieldImplCopyWith<_$TableFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$AdvTableFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$AdvTableFieldImplCopyWith(
          _$AdvTableFieldImpl value, $Res Function(_$AdvTableFieldImpl) then) =
      __$$AdvTableFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      List<String>? headers,
      @JsonKey(name: 'tableId') String? tableId,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'name') String? name,
      @JsonKey(name: 'isRequired') bool isRequired,
      @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'visible') bool visible,
      @JsonKey(name: 'readOnly') bool readOnly,
      @JsonKey(name: 'answer') dynamic answer,
      @JsonKey(name: 'isRow') bool isRow,
      @JsonKey(name: 'contents')
      @InputFieldConverter()
      List<List<InputField>>? inputFields});
}

/// @nodoc
class __$$AdvTableFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$AdvTableFieldImpl>
    implements _$$AdvTableFieldImplCopyWith<$Res> {
  __$$AdvTableFieldImplCopyWithImpl(
      _$AdvTableFieldImpl _value, $Res Function(_$AdvTableFieldImpl) _then)
      : super(_value, _then);

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? headers = freezed,
    Object? tableId = freezed,
    Object? label = freezed,
    Object? name = freezed,
    Object? isRequired = null,
    Object? requiredErrorText = freezed,
    Object? description = freezed,
    Object? visible = null,
    Object? readOnly = null,
    Object? answer = freezed,
    Object? isRow = null,
    Object? inputFields = freezed,
  }) {
    return _then(_$AdvTableFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      headers: freezed == headers
          ? _value._headers
          : headers // ignore: cast_nullable_to_non_nullable
              as List<String>?,
      tableId: freezed == tableId
          ? _value.tableId
          : tableId // ignore: cast_nullable_to_non_nullable
              as String?,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      name: freezed == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as String?,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
      requiredErrorText: freezed == requiredErrorText
          ? _value.requiredErrorText
          : requiredErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      visible: null == visible
          ? _value.visible
          : visible // ignore: cast_nullable_to_non_nullable
              as bool,
      readOnly: null == readOnly
          ? _value.readOnly
          : readOnly // ignore: cast_nullable_to_non_nullable
              as bool,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as dynamic,
      isRow: null == isRow
          ? _value.isRow
          : isRow // ignore: cast_nullable_to_non_nullable
              as bool,
      inputFields: freezed == inputFields
          ? _value._inputFields
          : inputFields // ignore: cast_nullable_to_non_nullable
              as List<List<InputField>>?,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$AdvTableFieldImpl implements AdvTableField {
  const _$AdvTableFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      final List<String>? headers,
      @JsonKey(name: 'tableId') this.tableId,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'name') this.name,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      @JsonKey(name: 'requiredErrorText') this.requiredErrorText,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'visible') this.visible = true,
      @JsonKey(name: 'readOnly') this.readOnly = false,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'isRow') this.isRow = true,
      @JsonKey(name: 'contents')
      @InputFieldConverter()
      final List<List<InputField>>? inputFields,
      final String? $type})
      : _headers = headers,
        _inputFields = inputFields,
        $type = $type ?? 'advtable';

  factory _$AdvTableFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$AdvTableFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  final List<String>? _headers;
  @override
  List<String>? get headers {
    final value = _headers;
    if (value == null) return null;
    if (_headers is EqualUnmodifiableListView) return _headers;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(value);
  }

  @override
  @JsonKey(name: 'tableId')
  final String? tableId;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'name')
  final String? name;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;
  @override
  @JsonKey(name: 'requiredErrorText')
  final String? requiredErrorText;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'visible')
  final bool visible;
  @override
  @JsonKey(name: 'readOnly')
  final bool readOnly;
  @override
  @JsonKey(name: 'answer')
  final dynamic answer;
  @override
  @JsonKey(name: 'isRow')
  final bool isRow;
  final List<List<InputField>>? _inputFields;
  @override
  @JsonKey(name: 'contents')
  @InputFieldConverter()
  List<List<InputField>>? get inputFields {
    final value = _inputFields;
    if (value == null) return null;
    if (_inputFields is EqualUnmodifiableListView) return _inputFields;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(value);
  }

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.advtable(id: $id, headers: $headers, tableId: $tableId, label: $label, name: $name, isRequired: $isRequired, requiredErrorText: $requiredErrorText, description: $description, visible: $visible, readOnly: $readOnly, answer: $answer, isRow: $isRow, inputFields: $inputFields)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$AdvTableFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            const DeepCollectionEquality().equals(other._headers, _headers) &&
            (identical(other.tableId, tableId) || other.tableId == tableId) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.name, name) || other.name == name) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired) &&
            (identical(other.requiredErrorText, requiredErrorText) ||
                other.requiredErrorText == requiredErrorText) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.visible, visible) || other.visible == visible) &&
            (identical(other.readOnly, readOnly) ||
                other.readOnly == readOnly) &&
            const DeepCollectionEquality().equals(other.answer, answer) &&
            (identical(other.isRow, isRow) || other.isRow == isRow) &&
            const DeepCollectionEquality()
                .equals(other._inputFields, _inputFields));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(
      runtimeType,
      id,
      const DeepCollectionEquality().hash(_headers),
      tableId,
      label,
      name,
      isRequired,
      requiredErrorText,
      description,
      visible,
      readOnly,
      const DeepCollectionEquality().hash(answer),
      isRow,
      const DeepCollectionEquality().hash(_inputFields));

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$AdvTableFieldImplCopyWith<_$AdvTableFieldImpl> get copyWith =>
      __$$AdvTableFieldImplCopyWithImpl<_$AdvTableFieldImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)
        geolocation,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)
        map,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        table,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)
        advtable,
  }) {
    return advtable(
        id,
        headers,
        tableId,
        label,
        name,
        isRequired,
        requiredErrorText,
        description,
        visible,
        readOnly,
        answer,
        isRow,
        inputFields);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
  }) {
    return advtable?.call(
        id,
        headers,
        tableId,
        label,
        name,
        isRequired,
        requiredErrorText,
        description,
        visible,
        readOnly,
        answer,
        isRow,
        inputFields);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') String? answer)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(readValue: readInstruction) String? instruction,
            String? description,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'isRequired') bool isRequired)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'isRequired') bool isRequired)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'association') bool? association,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherAnswer') String? otherAnswer,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'selectedLinkListLabel')
            String? selectedLinkListLabel,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'isRequired') bool isRequired)?
        geolocation,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'addressLine') String? addressLine,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description)?
        map,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'tableId') String? tableId,
            List<String>? headers,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        table,
    TResult Function(
            @JsonKey(name: 'id') String id,
            List<String>? headers,
            @JsonKey(name: 'tableId') String? tableId,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') dynamic answer,
            @JsonKey(name: 'isRow') bool isRow,
            @JsonKey(name: 'contents')
            @InputFieldConverter()
            List<List<InputField>>? inputFields)?
        advtable,
    required TResult orElse(),
  }) {
    if (advtable != null) {
      return advtable(
          id,
          headers,
          tableId,
          label,
          name,
          isRequired,
          requiredErrorText,
          description,
          visible,
          readOnly,
          answer,
          isRow,
          inputFields);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
    required TResult Function(MapField value) map,
    required TResult Function(TableField value) table,
    required TResult Function(AdvTableField value) advtable,
  }) {
    return advtable(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
    TResult? Function(MapField value)? map,
    TResult? Function(TableField value)? table,
    TResult? Function(AdvTableField value)? advtable,
  }) {
    return advtable?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    TResult Function(MapField value)? map,
    TResult Function(TableField value)? table,
    TResult Function(AdvTableField value)? advtable,
    required TResult orElse(),
  }) {
    if (advtable != null) {
      return advtable(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$AdvTableFieldImplToJson(
      this,
    );
  }
}

abstract class AdvTableField implements InputField {
  const factory AdvTableField(
      {@JsonKey(name: 'id') required final String id,
      final List<String>? headers,
      @JsonKey(name: 'tableId') final String? tableId,
      @JsonKey(name: 'label') final String? label,
      @JsonKey(name: 'name') final String? name,
      @JsonKey(name: 'isRequired') final bool isRequired,
      @JsonKey(name: 'requiredErrorText') final String? requiredErrorText,
      @JsonKey(name: 'description') final String? description,
      @JsonKey(name: 'visible') final bool visible,
      @JsonKey(name: 'readOnly') final bool readOnly,
      @JsonKey(name: 'answer') final dynamic answer,
      @JsonKey(name: 'isRow') final bool isRow,
      @JsonKey(name: 'contents')
      @InputFieldConverter()
      final List<List<InputField>>? inputFields}) = _$AdvTableFieldImpl;

  factory AdvTableField.fromJson(Map<String, dynamic> json) =
      _$AdvTableFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  List<String>? get headers;
  @JsonKey(name: 'tableId')
  String? get tableId;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @JsonKey(name: 'name')
  String? get name;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;
  @JsonKey(name: 'requiredErrorText')
  String? get requiredErrorText;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @JsonKey(name: 'visible')
  bool get visible;
  @JsonKey(name: 'readOnly')
  bool get readOnly;
  @override
  @JsonKey(name: 'answer')
  dynamic get answer;
  @JsonKey(name: 'isRow')
  bool get isRow;
  @JsonKey(name: 'contents')
  @InputFieldConverter()
  List<List<InputField>>? get inputFields;

  /// Create a copy of InputField
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$AdvTableFieldImplCopyWith<_$AdvTableFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}
