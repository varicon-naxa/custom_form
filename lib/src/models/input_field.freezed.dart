// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'input_field.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

T _$identity<T>(T value) => value;

final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#custom-getters-and-methods');

InputField _$InputFieldFromJson(Map<String, dynamic> json) {
  switch (json['type']) {
    case 'text':
      return TextInputField.fromJson(json);
    case 'signature':
      return SignatureInputField.fromJson(json);
    case 'multisignature':
      return MultiSignatureInputField.fromJson(json);
    case 'date':
      return DateInputField.fromJson(json);
    case 'instruction':
      return InstructionInputField.fromJson(json);
    case 'section':
      return SectionInputField.fromJson(json);
    case 'time':
      return TimeInputField.fromJson(json);
    case 'url':
      return UrlInputField.fromJson(json);
    case 'number':
      return NumberInputField.fromJson(json);
    case 'phone':
      return PhoneInputField.fromJson(json);
    case 'email':
      return EmailInputField.fromJson(json);
    case 'datetimelocal':
      return DateTimeInputField.fromJson(json);
    case 'comment':
      return CommentInputField.fromJson(json);
    case 'dropdown':
      return DropdownInputField.fromJson(json);
    case 'multipleselect':
      return MultipleInputField.fromJson(json);
    case 'checkbox':
      return CheckboxInputField.fromJson(json);
    case 'radiogroup':
      return RadioInputField.fromJson(json);
    case 'yesno':
      return YesNoInputField.fromJson(json);
    case 'yesnona':
      return YesNoNaInputField.fromJson(json);
    case 'files':
      return FileInputField.fromJson(json);
    case 'images':
      return ImageInputField.fromJson(json);
    case 'geolocation':
      return GeolocationField.fromJson(json);

    default:
      return _FallbackInputField.fromJson(json);
  }
}

/// @nodoc
mixin _$InputField {
  @JsonKey(name: 'id')
  String get id => throw _privateConstructorUsedError;
  @JsonKey(name: 'label')
  String? get label => throw _privateConstructorUsedError;
  @JsonKey(name: 'answer')
  Object? get answer => throw _privateConstructorUsedError;
  @JsonKey(name: 'description')
  String? get description => throw _privateConstructorUsedError;
  @JsonKey(name: 'visible')
  bool get visible => throw _privateConstructorUsedError;
  @JsonKey(name: 'isRequired')
  bool get isRequired => throw _privateConstructorUsedError;
  @JsonKey(name: 'readOnly')
  bool get readOnly => throw _privateConstructorUsedError;
  @JsonKey(name: 'requiredErrorText')
  String? get requiredErrorText => throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        geolocation,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
    required TResult orElse(),
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    required TResult orElse(),
  }) =>
      throw _privateConstructorUsedError;
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
  @JsonKey(ignore: true)
  $InputFieldCopyWith<InputField> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $InputFieldCopyWith<$Res> {
  factory $InputFieldCopyWith(
          InputField value, $Res Function(InputField) then) =
      _$InputFieldCopyWithImpl<$Res, InputField>;
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'visible') bool visible,
      @JsonKey(name: 'isRequired') bool isRequired,
      @JsonKey(name: 'readOnly') bool readOnly,
      @JsonKey(name: 'requiredErrorText') String? requiredErrorText});
}

/// @nodoc
class _$InputFieldCopyWithImpl<$Res, $Val extends InputField>
    implements $InputFieldCopyWith<$Res> {
  _$InputFieldCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? description = freezed,
    Object? visible = null,
    Object? isRequired = null,
    Object? readOnly = null,
    Object? requiredErrorText = freezed,
  }) {
    return _then(_value.copyWith(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      visible: null == visible
          ? _value.visible
          : visible // ignore: cast_nullable_to_non_nullable
              as bool,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
      readOnly: null == readOnly
          ? _value.readOnly
          : readOnly // ignore: cast_nullable_to_non_nullable
              as bool,
      requiredErrorText: freezed == requiredErrorText
          ? _value.requiredErrorText
          : requiredErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$FallbackInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$FallbackInputFieldImplCopyWith(_$FallbackInputFieldImpl value,
          $Res Function(_$FallbackInputFieldImpl) then) =
      __$$FallbackInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'answer') String? answer,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'visible') bool visible,
      @JsonKey(name: 'isRequired') bool isRequired,
      @JsonKey(name: 'readOnly') bool readOnly,
      @JsonKey(name: 'requiredErrorText') String? requiredErrorText});
}

/// @nodoc
class __$$FallbackInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$FallbackInputFieldImpl>
    implements _$$FallbackInputFieldImplCopyWith<$Res> {
  __$$FallbackInputFieldImplCopyWithImpl(_$FallbackInputFieldImpl _value,
      $Res Function(_$FallbackInputFieldImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? answer = freezed,
    Object? description = freezed,
    Object? visible = null,
    Object? isRequired = null,
    Object? readOnly = null,
    Object? requiredErrorText = freezed,
  }) {
    return _then(_$FallbackInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      visible: null == visible
          ? _value.visible
          : visible // ignore: cast_nullable_to_non_nullable
              as bool,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
      readOnly: null == readOnly
          ? _value.readOnly
          : readOnly // ignore: cast_nullable_to_non_nullable
              as bool,
      requiredErrorText: freezed == requiredErrorText
          ? _value.requiredErrorText
          : requiredErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$FallbackInputFieldImpl implements _FallbackInputField {
  const _$FallbackInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'visible') this.visible = true,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      @JsonKey(name: 'readOnly') this.readOnly = false,
      @JsonKey(name: 'requiredErrorText') this.requiredErrorText,
      final String? $type})
      : $type = $type ?? 'fallback';

  factory _$FallbackInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$FallbackInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'answer')
  final String? answer;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'visible')
  final bool visible;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;
  @override
  @JsonKey(name: 'readOnly')
  final bool readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  final String? requiredErrorText;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.fallback(id: $id, label: $label, answer: $answer, description: $description, visible: $visible, isRequired: $isRequired, readOnly: $readOnly, requiredErrorText: $requiredErrorText)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$FallbackInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.answer, answer) || other.answer == answer) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.visible, visible) || other.visible == visible) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired) &&
            (identical(other.readOnly, readOnly) ||
                other.readOnly == readOnly) &&
            (identical(other.requiredErrorText, requiredErrorText) ||
                other.requiredErrorText == requiredErrorText));
  }

  @JsonKey(ignore: true)
  @override
  int get hashCode => Object.hash(runtimeType, id, label, answer, description,
      visible, isRequired, readOnly, requiredErrorText);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$FallbackInputFieldImplCopyWith<_$FallbackInputFieldImpl> get copyWith =>
      __$$FallbackInputFieldImplCopyWithImpl<_$FallbackInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        geolocation,
  }) {
    return fallback(id, label, answer, description, visible, isRequired,
        readOnly, requiredErrorText);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
  }) {
    return fallback?.call(id, label, answer, description, visible, isRequired,
        readOnly, requiredErrorText);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
    required TResult orElse(),
  }) {
    if (fallback != null) {
      return fallback(id, label, answer, description, visible, isRequired,
          readOnly, requiredErrorText);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
  }) {
    return fallback(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
  }) {
    return fallback?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    required TResult orElse(),
  }) {
    if (fallback != null) {
      return fallback(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$FallbackInputFieldImplToJson(
      this,
    );
  }
}

abstract class _FallbackInputField implements InputField {
  const factory _FallbackInputField(
      {@JsonKey(name: 'id') required final String id,
      @JsonKey(name: 'label') final String? label,
      @JsonKey(name: 'answer') final String? answer,
      @JsonKey(name: 'description') final String? description,
      @JsonKey(name: 'visible') final bool visible,
      @JsonKey(name: 'isRequired') final bool isRequired,
      @JsonKey(name: 'readOnly') final bool readOnly,
      @JsonKey(name: 'requiredErrorText')
      final String? requiredErrorText}) = _$FallbackInputFieldImpl;

  factory _FallbackInputField.fromJson(Map<String, dynamic> json) =
      _$FallbackInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @override
  @JsonKey(name: 'answer')
  String? get answer;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @override
  @JsonKey(name: 'visible')
  bool get visible;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;
  @override
  @JsonKey(name: 'readOnly')
  bool get readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  String? get requiredErrorText;
  @override
  @JsonKey(ignore: true)
  _$$FallbackInputFieldImplCopyWith<_$FallbackInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$TextInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$TextInputFieldImplCopyWith(_$TextInputFieldImpl value,
          $Res Function(_$TextInputFieldImpl) then) =
      __$$TextInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'name') String? name,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'visible') bool visible,
      @JsonKey(name: 'isRequired') bool isRequired,
      @JsonKey(name: 'readOnly') bool readOnly,
      @JsonKey(name: 'answer') String? answer,
      @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
      @JsonKey(name: 'placeholder') String? hintText,
      @JsonKey(name: 'maxLength') int? maxLength,
      @JsonKey(name: 'min') dynamic min,
      @JsonKey(name: 'minErrorText') String? minErrorText,
      @JsonKey(name: 'max') dynamic max,
      @JsonKey(name: 'maxErrorText') String? maxErrorText});
}

/// @nodoc
class __$$TextInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$TextInputFieldImpl>
    implements _$$TextInputFieldImplCopyWith<$Res> {
  __$$TextInputFieldImplCopyWithImpl(
      _$TextInputFieldImpl _value, $Res Function(_$TextInputFieldImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? name = freezed,
    Object? description = freezed,
    Object? visible = null,
    Object? isRequired = null,
    Object? readOnly = null,
    Object? answer = freezed,
    Object? requiredErrorText = freezed,
    Object? hintText = freezed,
    Object? maxLength = freezed,
    Object? min = freezed,
    Object? minErrorText = freezed,
    Object? max = freezed,
    Object? maxErrorText = freezed,
  }) {
    return _then(_$TextInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      name: freezed == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      visible: null == visible
          ? _value.visible
          : visible // ignore: cast_nullable_to_non_nullable
              as bool,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
      readOnly: null == readOnly
          ? _value.readOnly
          : readOnly // ignore: cast_nullable_to_non_nullable
              as bool,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
      requiredErrorText: freezed == requiredErrorText
          ? _value.requiredErrorText
          : requiredErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      hintText: freezed == hintText
          ? _value.hintText
          : hintText // ignore: cast_nullable_to_non_nullable
              as String?,
      maxLength: freezed == maxLength
          ? _value.maxLength
          : maxLength // ignore: cast_nullable_to_non_nullable
              as int?,
      min: freezed == min
          ? _value.min
          : min // ignore: cast_nullable_to_non_nullable
              as dynamic,
      minErrorText: freezed == minErrorText
          ? _value.minErrorText
          : minErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      max: freezed == max
          ? _value.max
          : max // ignore: cast_nullable_to_non_nullable
              as dynamic,
      maxErrorText: freezed == maxErrorText
          ? _value.maxErrorText
          : maxErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$TextInputFieldImpl implements TextInputField {
  const _$TextInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'name') this.name,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'visible') this.visible = true,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      @JsonKey(name: 'readOnly') this.readOnly = false,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'requiredErrorText') this.requiredErrorText,
      @JsonKey(name: 'placeholder') this.hintText,
      @JsonKey(name: 'maxLength') this.maxLength,
      @JsonKey(name: 'min') this.min,
      @JsonKey(name: 'minErrorText') this.minErrorText,
      @JsonKey(name: 'max') this.max,
      @JsonKey(name: 'maxErrorText') this.maxErrorText,
      final String? $type})
      : $type = $type ?? 'text';

  factory _$TextInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$TextInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'name')
  final String? name;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'visible')
  final bool visible;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;
  @override
  @JsonKey(name: 'readOnly')
  final bool readOnly;
  @override
  @JsonKey(name: 'answer')
  final String? answer;
  @override
  @JsonKey(name: 'requiredErrorText')
  final String? requiredErrorText;
// Fields.
  @override
  @JsonKey(name: 'placeholder')
  final String? hintText;
  @override
  @JsonKey(name: 'maxLength')
  final int? maxLength;
// For number field validation.
  @override
  @JsonKey(name: 'min')
  final dynamic min;
  @override
  @JsonKey(name: 'minErrorText')
  final String? minErrorText;
  @override
  @JsonKey(name: 'max')
  final dynamic max;
  @override
  @JsonKey(name: 'maxErrorText')
  final String? maxErrorText;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.text(id: $id, label: $label, name: $name, description: $description, visible: $visible, isRequired: $isRequired, readOnly: $readOnly, answer: $answer, requiredErrorText: $requiredErrorText, hintText: $hintText, maxLength: $maxLength, min: $min, minErrorText: $minErrorText, max: $max, maxErrorText: $maxErrorText)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$TextInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.name, name) || other.name == name) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.visible, visible) || other.visible == visible) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired) &&
            (identical(other.readOnly, readOnly) ||
                other.readOnly == readOnly) &&
            (identical(other.answer, answer) || other.answer == answer) &&
            (identical(other.requiredErrorText, requiredErrorText) ||
                other.requiredErrorText == requiredErrorText) &&
            (identical(other.hintText, hintText) ||
                other.hintText == hintText) &&
            (identical(other.maxLength, maxLength) ||
                other.maxLength == maxLength) &&
            const DeepCollectionEquality().equals(other.min, min) &&
            (identical(other.minErrorText, minErrorText) ||
                other.minErrorText == minErrorText) &&
            const DeepCollectionEquality().equals(other.max, max) &&
            (identical(other.maxErrorText, maxErrorText) ||
                other.maxErrorText == maxErrorText));
  }

  @JsonKey(ignore: true)
  @override
  int get hashCode => Object.hash(
      runtimeType,
      id,
      label,
      name,
      description,
      visible,
      isRequired,
      readOnly,
      answer,
      requiredErrorText,
      hintText,
      maxLength,
      const DeepCollectionEquality().hash(min),
      minErrorText,
      const DeepCollectionEquality().hash(max),
      maxErrorText);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$TextInputFieldImplCopyWith<_$TextInputFieldImpl> get copyWith =>
      __$$TextInputFieldImplCopyWithImpl<_$TextInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        geolocation,
  }) {
    return text(
        id,
        label,
        name,
        description,
        visible,
        isRequired,
        readOnly,
        answer,
        requiredErrorText,
        hintText,
        maxLength,
        min,
        minErrorText,
        max,
        maxErrorText);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
  }) {
    return text?.call(
        id,
        label,
        name,
        description,
        visible,
        isRequired,
        readOnly,
        answer,
        requiredErrorText,
        hintText,
        maxLength,
        min,
        minErrorText,
        max,
        maxErrorText);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
    required TResult orElse(),
  }) {
    if (text != null) {
      return text(
          id,
          label,
          name,
          description,
          visible,
          isRequired,
          readOnly,
          answer,
          requiredErrorText,
          hintText,
          maxLength,
          min,
          minErrorText,
          max,
          maxErrorText);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
  }) {
    return text(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
  }) {
    return text?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    required TResult orElse(),
  }) {
    if (text != null) {
      return text(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$TextInputFieldImplToJson(
      this,
    );
  }
}

abstract class TextInputField implements InputField {
  const factory TextInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'name') final String? name,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'visible') final bool visible,
          @JsonKey(name: 'isRequired') final bool isRequired,
          @JsonKey(name: 'readOnly') final bool readOnly,
          @JsonKey(name: 'answer') final String? answer,
          @JsonKey(name: 'requiredErrorText') final String? requiredErrorText,
          @JsonKey(name: 'placeholder') final String? hintText,
          @JsonKey(name: 'maxLength') final int? maxLength,
          @JsonKey(name: 'min') final dynamic min,
          @JsonKey(name: 'minErrorText') final String? minErrorText,
          @JsonKey(name: 'max') final dynamic max,
          @JsonKey(name: 'maxErrorText') final String? maxErrorText}) =
      _$TextInputFieldImpl;

  factory TextInputField.fromJson(Map<String, dynamic> json) =
      _$TextInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @JsonKey(name: 'name')
  String? get name;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @override
  @JsonKey(name: 'visible')
  bool get visible;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;
  @override
  @JsonKey(name: 'readOnly')
  bool get readOnly;
  @override
  @JsonKey(name: 'answer')
  String? get answer;
  @override
  @JsonKey(name: 'requiredErrorText')
  String? get requiredErrorText; // Fields.
  @JsonKey(name: 'placeholder')
  String? get hintText;
  @JsonKey(name: 'maxLength')
  int? get maxLength; // For number field validation.
  @JsonKey(name: 'min')
  dynamic get min;
  @JsonKey(name: 'minErrorText')
  String? get minErrorText;
  @JsonKey(name: 'max')
  dynamic get max;
  @JsonKey(name: 'maxErrorText')
  String? get maxErrorText;
  @override
  @JsonKey(ignore: true)
  _$$TextInputFieldImplCopyWith<_$TextInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$SignatureInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$SignatureInputFieldImplCopyWith(_$SignatureInputFieldImpl value,
          $Res Function(_$SignatureInputFieldImpl) then) =
      __$$SignatureInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'visible') bool visible,
      @JsonKey(name: 'isRequired') bool isRequired,
      @JsonKey(name: 'readOnly') bool readOnly,
      @JsonKey(name: 'answer') Map<String, dynamic>? answer,
      @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
      @JsonKey(name: 'placeholder') String? hintText,
      @JsonKey(name: 'maxLength') int? maxLength,
      @JsonKey(name: 'min') dynamic min,
      @JsonKey(name: 'minErrorText') String? minErrorText,
      @JsonKey(name: 'max') dynamic max,
      @JsonKey(name: 'maxErrorText') String? maxErrorText});
}

/// @nodoc
class __$$SignatureInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$SignatureInputFieldImpl>
    implements _$$SignatureInputFieldImplCopyWith<$Res> {
  __$$SignatureInputFieldImplCopyWithImpl(_$SignatureInputFieldImpl _value,
      $Res Function(_$SignatureInputFieldImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? description = freezed,
    Object? visible = null,
    Object? isRequired = null,
    Object? readOnly = null,
    Object? answer = freezed,
    Object? requiredErrorText = freezed,
    Object? hintText = freezed,
    Object? maxLength = freezed,
    Object? min = freezed,
    Object? minErrorText = freezed,
    Object? max = freezed,
    Object? maxErrorText = freezed,
  }) {
    return _then(_$SignatureInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      visible: null == visible
          ? _value.visible
          : visible // ignore: cast_nullable_to_non_nullable
              as bool,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
      readOnly: null == readOnly
          ? _value.readOnly
          : readOnly // ignore: cast_nullable_to_non_nullable
              as bool,
      answer: freezed == answer
          ? _value._answer
          : answer // ignore: cast_nullable_to_non_nullable
              as Map<String, dynamic>?,
      requiredErrorText: freezed == requiredErrorText
          ? _value.requiredErrorText
          : requiredErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      hintText: freezed == hintText
          ? _value.hintText
          : hintText // ignore: cast_nullable_to_non_nullable
              as String?,
      maxLength: freezed == maxLength
          ? _value.maxLength
          : maxLength // ignore: cast_nullable_to_non_nullable
              as int?,
      min: freezed == min
          ? _value.min
          : min // ignore: cast_nullable_to_non_nullable
              as dynamic,
      minErrorText: freezed == minErrorText
          ? _value.minErrorText
          : minErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      max: freezed == max
          ? _value.max
          : max // ignore: cast_nullable_to_non_nullable
              as dynamic,
      maxErrorText: freezed == maxErrorText
          ? _value.maxErrorText
          : maxErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$SignatureInputFieldImpl implements SignatureInputField {
  const _$SignatureInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'visible') this.visible = true,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      @JsonKey(name: 'readOnly') this.readOnly = false,
      @JsonKey(name: 'answer') final Map<String, dynamic>? answer,
      @JsonKey(name: 'requiredErrorText') this.requiredErrorText,
      @JsonKey(name: 'placeholder') this.hintText,
      @JsonKey(name: 'maxLength') this.maxLength,
      @JsonKey(name: 'min') this.min,
      @JsonKey(name: 'minErrorText') this.minErrorText,
      @JsonKey(name: 'max') this.max,
      @JsonKey(name: 'maxErrorText') this.maxErrorText,
      final String? $type})
      : _answer = answer,
        $type = $type ?? 'signature';

  factory _$SignatureInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$SignatureInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'visible')
  final bool visible;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;
  @override
  @JsonKey(name: 'readOnly')
  final bool readOnly;
  final Map<String, dynamic>? _answer;
  @override
  @JsonKey(name: 'answer')
  Map<String, dynamic>? get answer {
    final value = _answer;
    if (value == null) return null;
    if (_answer is EqualUnmodifiableMapView) return _answer;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableMapView(value);
  }

  @override
  @JsonKey(name: 'requiredErrorText')
  final String? requiredErrorText;
// Fields.
  @override
  @JsonKey(name: 'placeholder')
  final String? hintText;
  @override
  @JsonKey(name: 'maxLength')
  final int? maxLength;
// For number field validation.
  @override
  @JsonKey(name: 'min')
  final dynamic min;
  @override
  @JsonKey(name: 'minErrorText')
  final String? minErrorText;
  @override
  @JsonKey(name: 'max')
  final dynamic max;
  @override
  @JsonKey(name: 'maxErrorText')
  final String? maxErrorText;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.signature(id: $id, label: $label, description: $description, visible: $visible, isRequired: $isRequired, readOnly: $readOnly, answer: $answer, requiredErrorText: $requiredErrorText, hintText: $hintText, maxLength: $maxLength, min: $min, minErrorText: $minErrorText, max: $max, maxErrorText: $maxErrorText)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$SignatureInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.visible, visible) || other.visible == visible) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired) &&
            (identical(other.readOnly, readOnly) ||
                other.readOnly == readOnly) &&
            const DeepCollectionEquality().equals(other._answer, _answer) &&
            (identical(other.requiredErrorText, requiredErrorText) ||
                other.requiredErrorText == requiredErrorText) &&
            (identical(other.hintText, hintText) ||
                other.hintText == hintText) &&
            (identical(other.maxLength, maxLength) ||
                other.maxLength == maxLength) &&
            const DeepCollectionEquality().equals(other.min, min) &&
            (identical(other.minErrorText, minErrorText) ||
                other.minErrorText == minErrorText) &&
            const DeepCollectionEquality().equals(other.max, max) &&
            (identical(other.maxErrorText, maxErrorText) ||
                other.maxErrorText == maxErrorText));
  }

  @JsonKey(ignore: true)
  @override
  int get hashCode => Object.hash(
      runtimeType,
      id,
      label,
      description,
      visible,
      isRequired,
      readOnly,
      const DeepCollectionEquality().hash(_answer),
      requiredErrorText,
      hintText,
      maxLength,
      const DeepCollectionEquality().hash(min),
      minErrorText,
      const DeepCollectionEquality().hash(max),
      maxErrorText);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$SignatureInputFieldImplCopyWith<_$SignatureInputFieldImpl> get copyWith =>
      __$$SignatureInputFieldImplCopyWithImpl<_$SignatureInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        geolocation,
  }) {
    return signature(
        id,
        label,
        description,
        visible,
        isRequired,
        readOnly,
        answer,
        requiredErrorText,
        hintText,
        maxLength,
        min,
        minErrorText,
        max,
        maxErrorText);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
  }) {
    return signature?.call(
        id,
        label,
        description,
        visible,
        isRequired,
        readOnly,
        answer,
        requiredErrorText,
        hintText,
        maxLength,
        min,
        minErrorText,
        max,
        maxErrorText);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
    required TResult orElse(),
  }) {
    if (signature != null) {
      return signature(
          id,
          label,
          description,
          visible,
          isRequired,
          readOnly,
          answer,
          requiredErrorText,
          hintText,
          maxLength,
          min,
          minErrorText,
          max,
          maxErrorText);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
  }) {
    return signature(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
  }) {
    return signature?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    required TResult orElse(),
  }) {
    if (signature != null) {
      return signature(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$SignatureInputFieldImplToJson(
      this,
    );
  }
}

abstract class SignatureInputField implements InputField {
  const factory SignatureInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'visible') final bool visible,
          @JsonKey(name: 'isRequired') final bool isRequired,
          @JsonKey(name: 'readOnly') final bool readOnly,
          @JsonKey(name: 'answer') final Map<String, dynamic>? answer,
          @JsonKey(name: 'requiredErrorText') final String? requiredErrorText,
          @JsonKey(name: 'placeholder') final String? hintText,
          @JsonKey(name: 'maxLength') final int? maxLength,
          @JsonKey(name: 'min') final dynamic min,
          @JsonKey(name: 'minErrorText') final String? minErrorText,
          @JsonKey(name: 'max') final dynamic max,
          @JsonKey(name: 'maxErrorText') final String? maxErrorText}) =
      _$SignatureInputFieldImpl;

  factory SignatureInputField.fromJson(Map<String, dynamic> json) =
      _$SignatureInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @override
  @JsonKey(name: 'visible')
  bool get visible;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;
  @override
  @JsonKey(name: 'readOnly')
  bool get readOnly;
  @override
  @JsonKey(name: 'answer')
  Map<String, dynamic>? get answer;
  @override
  @JsonKey(name: 'requiredErrorText')
  String? get requiredErrorText; // Fields.
  @JsonKey(name: 'placeholder')
  String? get hintText;
  @JsonKey(name: 'maxLength')
  int? get maxLength; // For number field validation.
  @JsonKey(name: 'min')
  dynamic get min;
  @JsonKey(name: 'minErrorText')
  String? get minErrorText;
  @JsonKey(name: 'max')
  dynamic get max;
  @JsonKey(name: 'maxErrorText')
  String? get maxErrorText;
  @override
  @JsonKey(ignore: true)
  _$$SignatureInputFieldImplCopyWith<_$SignatureInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$MultiSignatureInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$MultiSignatureInputFieldImplCopyWith(
          _$MultiSignatureInputFieldImpl value,
          $Res Function(_$MultiSignatureInputFieldImpl) then) =
      __$$MultiSignatureInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'visible') bool visible,
      @JsonKey(name: 'isRequired') bool isRequired,
      @JsonKey(name: 'readOnly') bool readOnly,
      @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
      @JsonKey(name: 'answer') List<SingleSignature>? answer});
}

/// @nodoc
class __$$MultiSignatureInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$MultiSignatureInputFieldImpl>
    implements _$$MultiSignatureInputFieldImplCopyWith<$Res> {
  __$$MultiSignatureInputFieldImplCopyWithImpl(
      _$MultiSignatureInputFieldImpl _value,
      $Res Function(_$MultiSignatureInputFieldImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? description = freezed,
    Object? visible = null,
    Object? isRequired = null,
    Object? readOnly = null,
    Object? requiredErrorText = freezed,
    Object? answer = freezed,
  }) {
    return _then(_$MultiSignatureInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      visible: null == visible
          ? _value.visible
          : visible // ignore: cast_nullable_to_non_nullable
              as bool,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
      readOnly: null == readOnly
          ? _value.readOnly
          : readOnly // ignore: cast_nullable_to_non_nullable
              as bool,
      requiredErrorText: freezed == requiredErrorText
          ? _value.requiredErrorText
          : requiredErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value._answer
          : answer // ignore: cast_nullable_to_non_nullable
              as List<SingleSignature>?,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$MultiSignatureInputFieldImpl implements MultiSignatureInputField {
  const _$MultiSignatureInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'visible') this.visible = true,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      @JsonKey(name: 'readOnly') this.readOnly = false,
      @JsonKey(name: 'requiredErrorText') this.requiredErrorText,
      @JsonKey(name: 'answer') final List<SingleSignature>? answer,
      final String? $type})
      : _answer = answer,
        $type = $type ?? 'multisignature';

  factory _$MultiSignatureInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$MultiSignatureInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'visible')
  final bool visible;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;
  @override
  @JsonKey(name: 'readOnly')
  final bool readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  final String? requiredErrorText;
  final List<SingleSignature>? _answer;
  @override
  @JsonKey(name: 'answer')
  List<SingleSignature>? get answer {
    final value = _answer;
    if (value == null) return null;
    if (_answer is EqualUnmodifiableListView) return _answer;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(value);
  }

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.multisignature(id: $id, label: $label, description: $description, visible: $visible, isRequired: $isRequired, readOnly: $readOnly, requiredErrorText: $requiredErrorText, answer: $answer)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$MultiSignatureInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.visible, visible) || other.visible == visible) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired) &&
            (identical(other.readOnly, readOnly) ||
                other.readOnly == readOnly) &&
            (identical(other.requiredErrorText, requiredErrorText) ||
                other.requiredErrorText == requiredErrorText) &&
            const DeepCollectionEquality().equals(other._answer, _answer));
  }

  @JsonKey(ignore: true)
  @override
  int get hashCode => Object.hash(
      runtimeType,
      id,
      label,
      description,
      visible,
      isRequired,
      readOnly,
      requiredErrorText,
      const DeepCollectionEquality().hash(_answer));

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$MultiSignatureInputFieldImplCopyWith<_$MultiSignatureInputFieldImpl>
      get copyWith => __$$MultiSignatureInputFieldImplCopyWithImpl<
          _$MultiSignatureInputFieldImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        geolocation,
  }) {
    return multisignature(id, label, description, visible, isRequired, readOnly,
        requiredErrorText, answer);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
  }) {
    return multisignature?.call(id, label, description, visible, isRequired,
        readOnly, requiredErrorText, answer);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
    required TResult orElse(),
  }) {
    if (multisignature != null) {
      return multisignature(id, label, description, visible, isRequired,
          readOnly, requiredErrorText, answer);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
  }) {
    return multisignature(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
  }) {
    return multisignature?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    required TResult orElse(),
  }) {
    if (multisignature != null) {
      return multisignature(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$MultiSignatureInputFieldImplToJson(
      this,
    );
  }
}

abstract class MultiSignatureInputField implements InputField {
  const factory MultiSignatureInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'visible') final bool visible,
          @JsonKey(name: 'isRequired') final bool isRequired,
          @JsonKey(name: 'readOnly') final bool readOnly,
          @JsonKey(name: 'requiredErrorText') final String? requiredErrorText,
          @JsonKey(name: 'answer') final List<SingleSignature>? answer}) =
      _$MultiSignatureInputFieldImpl;

  factory MultiSignatureInputField.fromJson(Map<String, dynamic> json) =
      _$MultiSignatureInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @override
  @JsonKey(name: 'visible')
  bool get visible;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;
  @override
  @JsonKey(name: 'readOnly')
  bool get readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  String? get requiredErrorText;
  @override
  @JsonKey(name: 'answer')
  List<SingleSignature>? get answer;
  @override
  @JsonKey(ignore: true)
  _$$MultiSignatureInputFieldImplCopyWith<_$MultiSignatureInputFieldImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$DateInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$DateInputFieldImplCopyWith(_$DateInputFieldImpl value,
          $Res Function(_$DateInputFieldImpl) then) =
      __$$DateInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'answer') String? answer,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'visible') bool visible,
      @JsonKey(name: 'isRequired') bool isRequired,
      @JsonKey(name: 'readOnly') bool readOnly,
      @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
      @JsonKey(name: 'placeholder') String? hintText,
      @JsonKey(name: 'maxLength') int? maxLength,
      @JsonKey(name: 'min') dynamic min,
      @JsonKey(name: 'minErrorText') String? minErrorText,
      @JsonKey(name: 'max') dynamic max,
      @JsonKey(name: 'maxErrorText') String? maxErrorText});
}

/// @nodoc
class __$$DateInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$DateInputFieldImpl>
    implements _$$DateInputFieldImplCopyWith<$Res> {
  __$$DateInputFieldImplCopyWithImpl(
      _$DateInputFieldImpl _value, $Res Function(_$DateInputFieldImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? answer = freezed,
    Object? description = freezed,
    Object? visible = null,
    Object? isRequired = null,
    Object? readOnly = null,
    Object? requiredErrorText = freezed,
    Object? hintText = freezed,
    Object? maxLength = freezed,
    Object? min = freezed,
    Object? minErrorText = freezed,
    Object? max = freezed,
    Object? maxErrorText = freezed,
  }) {
    return _then(_$DateInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      visible: null == visible
          ? _value.visible
          : visible // ignore: cast_nullable_to_non_nullable
              as bool,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
      readOnly: null == readOnly
          ? _value.readOnly
          : readOnly // ignore: cast_nullable_to_non_nullable
              as bool,
      requiredErrorText: freezed == requiredErrorText
          ? _value.requiredErrorText
          : requiredErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      hintText: freezed == hintText
          ? _value.hintText
          : hintText // ignore: cast_nullable_to_non_nullable
              as String?,
      maxLength: freezed == maxLength
          ? _value.maxLength
          : maxLength // ignore: cast_nullable_to_non_nullable
              as int?,
      min: freezed == min
          ? _value.min
          : min // ignore: cast_nullable_to_non_nullable
              as dynamic,
      minErrorText: freezed == minErrorText
          ? _value.minErrorText
          : minErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      max: freezed == max
          ? _value.max
          : max // ignore: cast_nullable_to_non_nullable
              as dynamic,
      maxErrorText: freezed == maxErrorText
          ? _value.maxErrorText
          : maxErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$DateInputFieldImpl implements DateInputField {
  const _$DateInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'visible') this.visible = true,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      @JsonKey(name: 'readOnly') this.readOnly = false,
      @JsonKey(name: 'requiredErrorText') this.requiredErrorText,
      @JsonKey(name: 'placeholder') this.hintText,
      @JsonKey(name: 'maxLength') this.maxLength,
      @JsonKey(name: 'min') this.min,
      @JsonKey(name: 'minErrorText') this.minErrorText,
      @JsonKey(name: 'max') this.max,
      @JsonKey(name: 'maxErrorText') this.maxErrorText,
      final String? $type})
      : $type = $type ?? 'date';

  factory _$DateInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$DateInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'answer')
  final String? answer;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'visible')
  final bool visible;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;
  @override
  @JsonKey(name: 'readOnly')
  final bool readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  final String? requiredErrorText;
// Fields.
  @override
  @JsonKey(name: 'placeholder')
  final String? hintText;
  @override
  @JsonKey(name: 'maxLength')
  final int? maxLength;
// For number field validation.
  @override
  @JsonKey(name: 'min')
  final dynamic min;
  @override
  @JsonKey(name: 'minErrorText')
  final String? minErrorText;
  @override
  @JsonKey(name: 'max')
  final dynamic max;
  @override
  @JsonKey(name: 'maxErrorText')
  final String? maxErrorText;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.date(id: $id, label: $label, answer: $answer, description: $description, visible: $visible, isRequired: $isRequired, readOnly: $readOnly, requiredErrorText: $requiredErrorText, hintText: $hintText, maxLength: $maxLength, min: $min, minErrorText: $minErrorText, max: $max, maxErrorText: $maxErrorText)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$DateInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.answer, answer) || other.answer == answer) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.visible, visible) || other.visible == visible) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired) &&
            (identical(other.readOnly, readOnly) ||
                other.readOnly == readOnly) &&
            (identical(other.requiredErrorText, requiredErrorText) ||
                other.requiredErrorText == requiredErrorText) &&
            (identical(other.hintText, hintText) ||
                other.hintText == hintText) &&
            (identical(other.maxLength, maxLength) ||
                other.maxLength == maxLength) &&
            const DeepCollectionEquality().equals(other.min, min) &&
            (identical(other.minErrorText, minErrorText) ||
                other.minErrorText == minErrorText) &&
            const DeepCollectionEquality().equals(other.max, max) &&
            (identical(other.maxErrorText, maxErrorText) ||
                other.maxErrorText == maxErrorText));
  }

  @JsonKey(ignore: true)
  @override
  int get hashCode => Object.hash(
      runtimeType,
      id,
      label,
      answer,
      description,
      visible,
      isRequired,
      readOnly,
      requiredErrorText,
      hintText,
      maxLength,
      const DeepCollectionEquality().hash(min),
      minErrorText,
      const DeepCollectionEquality().hash(max),
      maxErrorText);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$DateInputFieldImplCopyWith<_$DateInputFieldImpl> get copyWith =>
      __$$DateInputFieldImplCopyWithImpl<_$DateInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        geolocation,
  }) {
    return date(
        id,
        label,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        hintText,
        maxLength,
        min,
        minErrorText,
        max,
        maxErrorText);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
  }) {
    return date?.call(
        id,
        label,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        hintText,
        maxLength,
        min,
        minErrorText,
        max,
        maxErrorText);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
    required TResult orElse(),
  }) {
    if (date != null) {
      return date(
          id,
          label,
          answer,
          description,
          visible,
          isRequired,
          readOnly,
          requiredErrorText,
          hintText,
          maxLength,
          min,
          minErrorText,
          max,
          maxErrorText);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
  }) {
    return date(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
  }) {
    return date?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    required TResult orElse(),
  }) {
    if (date != null) {
      return date(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$DateInputFieldImplToJson(
      this,
    );
  }
}

abstract class DateInputField implements InputField {
  const factory DateInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'answer') final String? answer,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'visible') final bool visible,
          @JsonKey(name: 'isRequired') final bool isRequired,
          @JsonKey(name: 'readOnly') final bool readOnly,
          @JsonKey(name: 'requiredErrorText') final String? requiredErrorText,
          @JsonKey(name: 'placeholder') final String? hintText,
          @JsonKey(name: 'maxLength') final int? maxLength,
          @JsonKey(name: 'min') final dynamic min,
          @JsonKey(name: 'minErrorText') final String? minErrorText,
          @JsonKey(name: 'max') final dynamic max,
          @JsonKey(name: 'maxErrorText') final String? maxErrorText}) =
      _$DateInputFieldImpl;

  factory DateInputField.fromJson(Map<String, dynamic> json) =
      _$DateInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @override
  @JsonKey(name: 'answer')
  String? get answer;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @override
  @JsonKey(name: 'visible')
  bool get visible;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;
  @override
  @JsonKey(name: 'readOnly')
  bool get readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  String? get requiredErrorText; // Fields.
  @JsonKey(name: 'placeholder')
  String? get hintText;
  @JsonKey(name: 'maxLength')
  int? get maxLength; // For number field validation.
  @JsonKey(name: 'min')
  dynamic get min;
  @JsonKey(name: 'minErrorText')
  String? get minErrorText;
  @JsonKey(name: 'max')
  dynamic get max;
  @JsonKey(name: 'maxErrorText')
  String? get maxErrorText;
  @override
  @JsonKey(ignore: true)
  _$$DateInputFieldImplCopyWith<_$DateInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$InstructionInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$InstructionInputFieldImplCopyWith(
          _$InstructionInputFieldImpl value,
          $Res Function(_$InstructionInputFieldImpl) then) =
      __$$InstructionInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'answer') String? answer,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'instruction') String? instruction,
      @JsonKey(name: 'attachments') List<Map<String, dynamic>>? attachments,
      @JsonKey(name: 'visible') bool visible,
      @JsonKey(name: 'isRequired') bool isRequired,
      @JsonKey(name: 'readOnly') bool readOnly,
      @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
      @JsonKey(name: 'placeholder') String? hintText,
      @JsonKey(name: 'maxLength') int? maxLength,
      @JsonKey(name: 'min') dynamic min,
      @JsonKey(name: 'minErrorText') String? minErrorText,
      @JsonKey(name: 'max') dynamic max,
      @JsonKey(name: 'maxErrorText') String? maxErrorText});
}

/// @nodoc
class __$$InstructionInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$InstructionInputFieldImpl>
    implements _$$InstructionInputFieldImplCopyWith<$Res> {
  __$$InstructionInputFieldImplCopyWithImpl(_$InstructionInputFieldImpl _value,
      $Res Function(_$InstructionInputFieldImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? answer = freezed,
    Object? description = freezed,
    Object? instruction = freezed,
    Object? attachments = freezed,
    Object? visible = null,
    Object? isRequired = null,
    Object? readOnly = null,
    Object? requiredErrorText = freezed,
    Object? hintText = freezed,
    Object? maxLength = freezed,
    Object? min = freezed,
    Object? minErrorText = freezed,
    Object? max = freezed,
    Object? maxErrorText = freezed,
  }) {
    return _then(_$InstructionInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      instruction: freezed == instruction
          ? _value.instruction
          : instruction // ignore: cast_nullable_to_non_nullable
              as String?,
      attachments: freezed == attachments
          ? _value._attachments
          : attachments // ignore: cast_nullable_to_non_nullable
              as List<Map<String, dynamic>>?,
      visible: null == visible
          ? _value.visible
          : visible // ignore: cast_nullable_to_non_nullable
              as bool,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
      readOnly: null == readOnly
          ? _value.readOnly
          : readOnly // ignore: cast_nullable_to_non_nullable
              as bool,
      requiredErrorText: freezed == requiredErrorText
          ? _value.requiredErrorText
          : requiredErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      hintText: freezed == hintText
          ? _value.hintText
          : hintText // ignore: cast_nullable_to_non_nullable
              as String?,
      maxLength: freezed == maxLength
          ? _value.maxLength
          : maxLength // ignore: cast_nullable_to_non_nullable
              as int?,
      min: freezed == min
          ? _value.min
          : min // ignore: cast_nullable_to_non_nullable
              as dynamic,
      minErrorText: freezed == minErrorText
          ? _value.minErrorText
          : minErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      max: freezed == max
          ? _value.max
          : max // ignore: cast_nullable_to_non_nullable
              as dynamic,
      maxErrorText: freezed == maxErrorText
          ? _value.maxErrorText
          : maxErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$InstructionInputFieldImpl implements InstructionInputField {
  const _$InstructionInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'instruction') this.instruction,
      @JsonKey(name: 'attachments')
      final List<Map<String, dynamic>>? attachments,
      @JsonKey(name: 'visible') this.visible = true,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      @JsonKey(name: 'readOnly') this.readOnly = false,
      @JsonKey(name: 'requiredErrorText') this.requiredErrorText,
      @JsonKey(name: 'placeholder') this.hintText,
      @JsonKey(name: 'maxLength') this.maxLength,
      @JsonKey(name: 'min') this.min,
      @JsonKey(name: 'minErrorText') this.minErrorText,
      @JsonKey(name: 'max') this.max,
      @JsonKey(name: 'maxErrorText') this.maxErrorText,
      final String? $type})
      : _attachments = attachments,
        $type = $type ?? 'instruction';

  factory _$InstructionInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$InstructionInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'answer')
  final String? answer;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'instruction')
  final String? instruction;
  final List<Map<String, dynamic>>? _attachments;
  @override
  @JsonKey(name: 'attachments')
  List<Map<String, dynamic>>? get attachments {
    final value = _attachments;
    if (value == null) return null;
    if (_attachments is EqualUnmodifiableListView) return _attachments;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(value);
  }

  @override
  @JsonKey(name: 'visible')
  final bool visible;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;
  @override
  @JsonKey(name: 'readOnly')
  final bool readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  final String? requiredErrorText;
// Fields.
  @override
  @JsonKey(name: 'placeholder')
  final String? hintText;
  @override
  @JsonKey(name: 'maxLength')
  final int? maxLength;
// For number field validation.
  @override
  @JsonKey(name: 'min')
  final dynamic min;
  @override
  @JsonKey(name: 'minErrorText')
  final String? minErrorText;
  @override
  @JsonKey(name: 'max')
  final dynamic max;
  @override
  @JsonKey(name: 'maxErrorText')
  final String? maxErrorText;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.instruction(id: $id, label: $label, answer: $answer, description: $description, instruction: $instruction, attachments: $attachments, visible: $visible, isRequired: $isRequired, readOnly: $readOnly, requiredErrorText: $requiredErrorText, hintText: $hintText, maxLength: $maxLength, min: $min, minErrorText: $minErrorText, max: $max, maxErrorText: $maxErrorText)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$InstructionInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.answer, answer) || other.answer == answer) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.instruction, instruction) ||
                other.instruction == instruction) &&
            const DeepCollectionEquality()
                .equals(other._attachments, _attachments) &&
            (identical(other.visible, visible) || other.visible == visible) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired) &&
            (identical(other.readOnly, readOnly) ||
                other.readOnly == readOnly) &&
            (identical(other.requiredErrorText, requiredErrorText) ||
                other.requiredErrorText == requiredErrorText) &&
            (identical(other.hintText, hintText) ||
                other.hintText == hintText) &&
            (identical(other.maxLength, maxLength) ||
                other.maxLength == maxLength) &&
            const DeepCollectionEquality().equals(other.min, min) &&
            (identical(other.minErrorText, minErrorText) ||
                other.minErrorText == minErrorText) &&
            const DeepCollectionEquality().equals(other.max, max) &&
            (identical(other.maxErrorText, maxErrorText) ||
                other.maxErrorText == maxErrorText));
  }

  @JsonKey(ignore: true)
  @override
  int get hashCode => Object.hash(
      runtimeType,
      id,
      label,
      answer,
      description,
      instruction,
      const DeepCollectionEquality().hash(_attachments),
      visible,
      isRequired,
      readOnly,
      requiredErrorText,
      hintText,
      maxLength,
      const DeepCollectionEquality().hash(min),
      minErrorText,
      const DeepCollectionEquality().hash(max),
      maxErrorText);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$InstructionInputFieldImplCopyWith<_$InstructionInputFieldImpl>
      get copyWith => __$$InstructionInputFieldImplCopyWithImpl<
          _$InstructionInputFieldImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        geolocation,
  }) {
    return instruction(
        id,
        label,
        answer,
        description,
        this.instruction,
        attachments,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        hintText,
        maxLength,
        min,
        minErrorText,
        max,
        maxErrorText);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
  }) {
    return instruction?.call(
        id,
        label,
        answer,
        description,
        this.instruction,
        attachments,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        hintText,
        maxLength,
        min,
        minErrorText,
        max,
        maxErrorText);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
    required TResult orElse(),
  }) {
    if (instruction != null) {
      return instruction(
          id,
          label,
          answer,
          description,
          this.instruction,
          attachments,
          visible,
          isRequired,
          readOnly,
          requiredErrorText,
          hintText,
          maxLength,
          min,
          minErrorText,
          max,
          maxErrorText);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
  }) {
    return instruction(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
  }) {
    return instruction?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    required TResult orElse(),
  }) {
    if (instruction != null) {
      return instruction(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$InstructionInputFieldImplToJson(
      this,
    );
  }
}

abstract class InstructionInputField implements InputField {
  const factory InstructionInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'answer') final String? answer,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'instruction') final String? instruction,
          @JsonKey(name: 'attachments')
          final List<Map<String, dynamic>>? attachments,
          @JsonKey(name: 'visible') final bool visible,
          @JsonKey(name: 'isRequired') final bool isRequired,
          @JsonKey(name: 'readOnly') final bool readOnly,
          @JsonKey(name: 'requiredErrorText') final String? requiredErrorText,
          @JsonKey(name: 'placeholder') final String? hintText,
          @JsonKey(name: 'maxLength') final int? maxLength,
          @JsonKey(name: 'min') final dynamic min,
          @JsonKey(name: 'minErrorText') final String? minErrorText,
          @JsonKey(name: 'max') final dynamic max,
          @JsonKey(name: 'maxErrorText') final String? maxErrorText}) =
      _$InstructionInputFieldImpl;

  factory InstructionInputField.fromJson(Map<String, dynamic> json) =
      _$InstructionInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @override
  @JsonKey(name: 'answer')
  String? get answer;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @JsonKey(name: 'instruction')
  String? get instruction;
  @JsonKey(name: 'attachments')
  List<Map<String, dynamic>>? get attachments;
  @override
  @JsonKey(name: 'visible')
  bool get visible;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;
  @override
  @JsonKey(name: 'readOnly')
  bool get readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  String? get requiredErrorText; // Fields.
  @JsonKey(name: 'placeholder')
  String? get hintText;
  @JsonKey(name: 'maxLength')
  int? get maxLength; // For number field validation.
  @JsonKey(name: 'min')
  dynamic get min;
  @JsonKey(name: 'minErrorText')
  String? get minErrorText;
  @JsonKey(name: 'max')
  dynamic get max;
  @JsonKey(name: 'maxErrorText')
  String? get maxErrorText;
  @override
  @JsonKey(ignore: true)
  _$$InstructionInputFieldImplCopyWith<_$InstructionInputFieldImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$SectionInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$SectionInputFieldImplCopyWith(_$SectionInputFieldImpl value,
          $Res Function(_$SectionInputFieldImpl) then) =
      __$$SectionInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'answer') String? answer,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'instruction') String? instruction,
      @JsonKey(name: 'visible') bool visible,
      @JsonKey(name: 'isRequired') bool isRequired,
      @JsonKey(name: 'readOnly') bool readOnly,
      @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
      @JsonKey(name: 'placeholder') String? hintText,
      @JsonKey(name: 'maxLength') int? maxLength,
      @JsonKey(name: 'min') dynamic min,
      @JsonKey(name: 'minErrorText') String? minErrorText,
      @JsonKey(name: 'max') dynamic max,
      @JsonKey(name: 'maxErrorText') String? maxErrorText});
}

/// @nodoc
class __$$SectionInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$SectionInputFieldImpl>
    implements _$$SectionInputFieldImplCopyWith<$Res> {
  __$$SectionInputFieldImplCopyWithImpl(_$SectionInputFieldImpl _value,
      $Res Function(_$SectionInputFieldImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? answer = freezed,
    Object? description = freezed,
    Object? instruction = freezed,
    Object? visible = null,
    Object? isRequired = null,
    Object? readOnly = null,
    Object? requiredErrorText = freezed,
    Object? hintText = freezed,
    Object? maxLength = freezed,
    Object? min = freezed,
    Object? minErrorText = freezed,
    Object? max = freezed,
    Object? maxErrorText = freezed,
  }) {
    return _then(_$SectionInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      instruction: freezed == instruction
          ? _value.instruction
          : instruction // ignore: cast_nullable_to_non_nullable
              as String?,
      visible: null == visible
          ? _value.visible
          : visible // ignore: cast_nullable_to_non_nullable
              as bool,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
      readOnly: null == readOnly
          ? _value.readOnly
          : readOnly // ignore: cast_nullable_to_non_nullable
              as bool,
      requiredErrorText: freezed == requiredErrorText
          ? _value.requiredErrorText
          : requiredErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      hintText: freezed == hintText
          ? _value.hintText
          : hintText // ignore: cast_nullable_to_non_nullable
              as String?,
      maxLength: freezed == maxLength
          ? _value.maxLength
          : maxLength // ignore: cast_nullable_to_non_nullable
              as int?,
      min: freezed == min
          ? _value.min
          : min // ignore: cast_nullable_to_non_nullable
              as dynamic,
      minErrorText: freezed == minErrorText
          ? _value.minErrorText
          : minErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      max: freezed == max
          ? _value.max
          : max // ignore: cast_nullable_to_non_nullable
              as dynamic,
      maxErrorText: freezed == maxErrorText
          ? _value.maxErrorText
          : maxErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$SectionInputFieldImpl implements SectionInputField {
  const _$SectionInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'instruction') this.instruction,
      @JsonKey(name: 'visible') this.visible = true,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      @JsonKey(name: 'readOnly') this.readOnly = false,
      @JsonKey(name: 'requiredErrorText') this.requiredErrorText,
      @JsonKey(name: 'placeholder') this.hintText,
      @JsonKey(name: 'maxLength') this.maxLength,
      @JsonKey(name: 'min') this.min,
      @JsonKey(name: 'minErrorText') this.minErrorText,
      @JsonKey(name: 'max') this.max,
      @JsonKey(name: 'maxErrorText') this.maxErrorText,
      final String? $type})
      : $type = $type ?? 'section';

  factory _$SectionInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$SectionInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'answer')
  final String? answer;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'instruction')
  final String? instruction;
  @override
  @JsonKey(name: 'visible')
  final bool visible;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;
  @override
  @JsonKey(name: 'readOnly')
  final bool readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  final String? requiredErrorText;
// Fields.
  @override
  @JsonKey(name: 'placeholder')
  final String? hintText;
  @override
  @JsonKey(name: 'maxLength')
  final int? maxLength;
// For number field validation.
  @override
  @JsonKey(name: 'min')
  final dynamic min;
  @override
  @JsonKey(name: 'minErrorText')
  final String? minErrorText;
  @override
  @JsonKey(name: 'max')
  final dynamic max;
  @override
  @JsonKey(name: 'maxErrorText')
  final String? maxErrorText;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.section(id: $id, label: $label, answer: $answer, description: $description, instruction: $instruction, visible: $visible, isRequired: $isRequired, readOnly: $readOnly, requiredErrorText: $requiredErrorText, hintText: $hintText, maxLength: $maxLength, min: $min, minErrorText: $minErrorText, max: $max, maxErrorText: $maxErrorText)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$SectionInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.answer, answer) || other.answer == answer) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.instruction, instruction) ||
                other.instruction == instruction) &&
            (identical(other.visible, visible) || other.visible == visible) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired) &&
            (identical(other.readOnly, readOnly) ||
                other.readOnly == readOnly) &&
            (identical(other.requiredErrorText, requiredErrorText) ||
                other.requiredErrorText == requiredErrorText) &&
            (identical(other.hintText, hintText) ||
                other.hintText == hintText) &&
            (identical(other.maxLength, maxLength) ||
                other.maxLength == maxLength) &&
            const DeepCollectionEquality().equals(other.min, min) &&
            (identical(other.minErrorText, minErrorText) ||
                other.minErrorText == minErrorText) &&
            const DeepCollectionEquality().equals(other.max, max) &&
            (identical(other.maxErrorText, maxErrorText) ||
                other.maxErrorText == maxErrorText));
  }

  @JsonKey(ignore: true)
  @override
  int get hashCode => Object.hash(
      runtimeType,
      id,
      label,
      answer,
      description,
      instruction,
      visible,
      isRequired,
      readOnly,
      requiredErrorText,
      hintText,
      maxLength,
      const DeepCollectionEquality().hash(min),
      minErrorText,
      const DeepCollectionEquality().hash(max),
      maxErrorText);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$SectionInputFieldImplCopyWith<_$SectionInputFieldImpl> get copyWith =>
      __$$SectionInputFieldImplCopyWithImpl<_$SectionInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        geolocation,
  }) {
    return section(
        id,
        label,
        answer,
        description,
        this.instruction,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        hintText,
        maxLength,
        min,
        minErrorText,
        max,
        maxErrorText);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
  }) {
    return section?.call(
        id,
        label,
        answer,
        description,
        this.instruction,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        hintText,
        maxLength,
        min,
        minErrorText,
        max,
        maxErrorText);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
    required TResult orElse(),
  }) {
    if (section != null) {
      return section(
          id,
          label,
          answer,
          description,
          this.instruction,
          visible,
          isRequired,
          readOnly,
          requiredErrorText,
          hintText,
          maxLength,
          min,
          minErrorText,
          max,
          maxErrorText);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
  }) {
    return section(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
  }) {
    return section?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    required TResult orElse(),
  }) {
    if (section != null) {
      return section(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$SectionInputFieldImplToJson(
      this,
    );
  }
}

abstract class SectionInputField implements InputField {
  const factory SectionInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'answer') final String? answer,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'instruction') final String? instruction,
          @JsonKey(name: 'visible') final bool visible,
          @JsonKey(name: 'isRequired') final bool isRequired,
          @JsonKey(name: 'readOnly') final bool readOnly,
          @JsonKey(name: 'requiredErrorText') final String? requiredErrorText,
          @JsonKey(name: 'placeholder') final String? hintText,
          @JsonKey(name: 'maxLength') final int? maxLength,
          @JsonKey(name: 'min') final dynamic min,
          @JsonKey(name: 'minErrorText') final String? minErrorText,
          @JsonKey(name: 'max') final dynamic max,
          @JsonKey(name: 'maxErrorText') final String? maxErrorText}) =
      _$SectionInputFieldImpl;

  factory SectionInputField.fromJson(Map<String, dynamic> json) =
      _$SectionInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @override
  @JsonKey(name: 'answer')
  String? get answer;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @JsonKey(name: 'instruction')
  String? get instruction;
  @override
  @JsonKey(name: 'visible')
  bool get visible;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;
  @override
  @JsonKey(name: 'readOnly')
  bool get readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  String? get requiredErrorText; // Fields.
  @JsonKey(name: 'placeholder')
  String? get hintText;
  @JsonKey(name: 'maxLength')
  int? get maxLength; // For number field validation.
  @JsonKey(name: 'min')
  dynamic get min;
  @JsonKey(name: 'minErrorText')
  String? get minErrorText;
  @JsonKey(name: 'max')
  dynamic get max;
  @JsonKey(name: 'maxErrorText')
  String? get maxErrorText;
  @override
  @JsonKey(ignore: true)
  _$$SectionInputFieldImplCopyWith<_$SectionInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$TimeInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$TimeInputFieldImplCopyWith(_$TimeInputFieldImpl value,
          $Res Function(_$TimeInputFieldImpl) then) =
      __$$TimeInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'answer') String? answer,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'visible') bool visible,
      @JsonKey(name: 'isRequired') bool isRequired,
      @JsonKey(name: 'readOnly') bool readOnly,
      @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
      @JsonKey(name: 'placeholder') String? hintText,
      @JsonKey(name: 'maxLength') int? maxLength,
      @JsonKey(name: 'min') dynamic min,
      @JsonKey(name: 'minErrorText') String? minErrorText,
      @JsonKey(name: 'max') dynamic max,
      @JsonKey(name: 'maxErrorText') String? maxErrorText});
}

/// @nodoc
class __$$TimeInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$TimeInputFieldImpl>
    implements _$$TimeInputFieldImplCopyWith<$Res> {
  __$$TimeInputFieldImplCopyWithImpl(
      _$TimeInputFieldImpl _value, $Res Function(_$TimeInputFieldImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? answer = freezed,
    Object? description = freezed,
    Object? visible = null,
    Object? isRequired = null,
    Object? readOnly = null,
    Object? requiredErrorText = freezed,
    Object? hintText = freezed,
    Object? maxLength = freezed,
    Object? min = freezed,
    Object? minErrorText = freezed,
    Object? max = freezed,
    Object? maxErrorText = freezed,
  }) {
    return _then(_$TimeInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      visible: null == visible
          ? _value.visible
          : visible // ignore: cast_nullable_to_non_nullable
              as bool,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
      readOnly: null == readOnly
          ? _value.readOnly
          : readOnly // ignore: cast_nullable_to_non_nullable
              as bool,
      requiredErrorText: freezed == requiredErrorText
          ? _value.requiredErrorText
          : requiredErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      hintText: freezed == hintText
          ? _value.hintText
          : hintText // ignore: cast_nullable_to_non_nullable
              as String?,
      maxLength: freezed == maxLength
          ? _value.maxLength
          : maxLength // ignore: cast_nullable_to_non_nullable
              as int?,
      min: freezed == min
          ? _value.min
          : min // ignore: cast_nullable_to_non_nullable
              as dynamic,
      minErrorText: freezed == minErrorText
          ? _value.minErrorText
          : minErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      max: freezed == max
          ? _value.max
          : max // ignore: cast_nullable_to_non_nullable
              as dynamic,
      maxErrorText: freezed == maxErrorText
          ? _value.maxErrorText
          : maxErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$TimeInputFieldImpl implements TimeInputField {
  const _$TimeInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'visible') this.visible = true,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      @JsonKey(name: 'readOnly') this.readOnly = false,
      @JsonKey(name: 'requiredErrorText') this.requiredErrorText,
      @JsonKey(name: 'placeholder') this.hintText,
      @JsonKey(name: 'maxLength') this.maxLength,
      @JsonKey(name: 'min') this.min,
      @JsonKey(name: 'minErrorText') this.minErrorText,
      @JsonKey(name: 'max') this.max,
      @JsonKey(name: 'maxErrorText') this.maxErrorText,
      final String? $type})
      : $type = $type ?? 'time';

  factory _$TimeInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$TimeInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'answer')
  final String? answer;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'visible')
  final bool visible;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;
  @override
  @JsonKey(name: 'readOnly')
  final bool readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  final String? requiredErrorText;
// Fields.
  @override
  @JsonKey(name: 'placeholder')
  final String? hintText;
  @override
  @JsonKey(name: 'maxLength')
  final int? maxLength;
// For number field validation.
  @override
  @JsonKey(name: 'min')
  final dynamic min;
  @override
  @JsonKey(name: 'minErrorText')
  final String? minErrorText;
  @override
  @JsonKey(name: 'max')
  final dynamic max;
  @override
  @JsonKey(name: 'maxErrorText')
  final String? maxErrorText;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.time(id: $id, label: $label, answer: $answer, description: $description, visible: $visible, isRequired: $isRequired, readOnly: $readOnly, requiredErrorText: $requiredErrorText, hintText: $hintText, maxLength: $maxLength, min: $min, minErrorText: $minErrorText, max: $max, maxErrorText: $maxErrorText)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$TimeInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.answer, answer) || other.answer == answer) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.visible, visible) || other.visible == visible) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired) &&
            (identical(other.readOnly, readOnly) ||
                other.readOnly == readOnly) &&
            (identical(other.requiredErrorText, requiredErrorText) ||
                other.requiredErrorText == requiredErrorText) &&
            (identical(other.hintText, hintText) ||
                other.hintText == hintText) &&
            (identical(other.maxLength, maxLength) ||
                other.maxLength == maxLength) &&
            const DeepCollectionEquality().equals(other.min, min) &&
            (identical(other.minErrorText, minErrorText) ||
                other.minErrorText == minErrorText) &&
            const DeepCollectionEquality().equals(other.max, max) &&
            (identical(other.maxErrorText, maxErrorText) ||
                other.maxErrorText == maxErrorText));
  }

  @JsonKey(ignore: true)
  @override
  int get hashCode => Object.hash(
      runtimeType,
      id,
      label,
      answer,
      description,
      visible,
      isRequired,
      readOnly,
      requiredErrorText,
      hintText,
      maxLength,
      const DeepCollectionEquality().hash(min),
      minErrorText,
      const DeepCollectionEquality().hash(max),
      maxErrorText);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$TimeInputFieldImplCopyWith<_$TimeInputFieldImpl> get copyWith =>
      __$$TimeInputFieldImplCopyWithImpl<_$TimeInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        geolocation,
  }) {
    return time(
        id,
        label,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        hintText,
        maxLength,
        min,
        minErrorText,
        max,
        maxErrorText);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
  }) {
    return time?.call(
        id,
        label,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        hintText,
        maxLength,
        min,
        minErrorText,
        max,
        maxErrorText);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
    required TResult orElse(),
  }) {
    if (time != null) {
      return time(
          id,
          label,
          answer,
          description,
          visible,
          isRequired,
          readOnly,
          requiredErrorText,
          hintText,
          maxLength,
          min,
          minErrorText,
          max,
          maxErrorText);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
  }) {
    return time(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
  }) {
    return time?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    required TResult orElse(),
  }) {
    if (time != null) {
      return time(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$TimeInputFieldImplToJson(
      this,
    );
  }
}

abstract class TimeInputField implements InputField {
  const factory TimeInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'answer') final String? answer,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'visible') final bool visible,
          @JsonKey(name: 'isRequired') final bool isRequired,
          @JsonKey(name: 'readOnly') final bool readOnly,
          @JsonKey(name: 'requiredErrorText') final String? requiredErrorText,
          @JsonKey(name: 'placeholder') final String? hintText,
          @JsonKey(name: 'maxLength') final int? maxLength,
          @JsonKey(name: 'min') final dynamic min,
          @JsonKey(name: 'minErrorText') final String? minErrorText,
          @JsonKey(name: 'max') final dynamic max,
          @JsonKey(name: 'maxErrorText') final String? maxErrorText}) =
      _$TimeInputFieldImpl;

  factory TimeInputField.fromJson(Map<String, dynamic> json) =
      _$TimeInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @override
  @JsonKey(name: 'answer')
  String? get answer;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @override
  @JsonKey(name: 'visible')
  bool get visible;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;
  @override
  @JsonKey(name: 'readOnly')
  bool get readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  String? get requiredErrorText; // Fields.
  @JsonKey(name: 'placeholder')
  String? get hintText;
  @JsonKey(name: 'maxLength')
  int? get maxLength; // For number field validation.
  @JsonKey(name: 'min')
  dynamic get min;
  @JsonKey(name: 'minErrorText')
  String? get minErrorText;
  @JsonKey(name: 'max')
  dynamic get max;
  @JsonKey(name: 'maxErrorText')
  String? get maxErrorText;
  @override
  @JsonKey(ignore: true)
  _$$TimeInputFieldImplCopyWith<_$TimeInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$UrlInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$UrlInputFieldImplCopyWith(
          _$UrlInputFieldImpl value, $Res Function(_$UrlInputFieldImpl) then) =
      __$$UrlInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'answer') String? answer,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'visible') bool visible,
      @JsonKey(name: 'isRequired') bool isRequired,
      @JsonKey(name: 'readOnly') bool readOnly,
      @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
      @JsonKey(name: 'placeholder') String? hintText,
      @JsonKey(name: 'maxLength') int? maxLength,
      @JsonKey(name: 'min') dynamic min,
      @JsonKey(name: 'minErrorText') String? minErrorText,
      @JsonKey(name: 'max') dynamic max,
      @JsonKey(name: 'maxErrorText') String? maxErrorText});
}

/// @nodoc
class __$$UrlInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$UrlInputFieldImpl>
    implements _$$UrlInputFieldImplCopyWith<$Res> {
  __$$UrlInputFieldImplCopyWithImpl(
      _$UrlInputFieldImpl _value, $Res Function(_$UrlInputFieldImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? answer = freezed,
    Object? description = freezed,
    Object? visible = null,
    Object? isRequired = null,
    Object? readOnly = null,
    Object? requiredErrorText = freezed,
    Object? hintText = freezed,
    Object? maxLength = freezed,
    Object? min = freezed,
    Object? minErrorText = freezed,
    Object? max = freezed,
    Object? maxErrorText = freezed,
  }) {
    return _then(_$UrlInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      visible: null == visible
          ? _value.visible
          : visible // ignore: cast_nullable_to_non_nullable
              as bool,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
      readOnly: null == readOnly
          ? _value.readOnly
          : readOnly // ignore: cast_nullable_to_non_nullable
              as bool,
      requiredErrorText: freezed == requiredErrorText
          ? _value.requiredErrorText
          : requiredErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      hintText: freezed == hintText
          ? _value.hintText
          : hintText // ignore: cast_nullable_to_non_nullable
              as String?,
      maxLength: freezed == maxLength
          ? _value.maxLength
          : maxLength // ignore: cast_nullable_to_non_nullable
              as int?,
      min: freezed == min
          ? _value.min
          : min // ignore: cast_nullable_to_non_nullable
              as dynamic,
      minErrorText: freezed == minErrorText
          ? _value.minErrorText
          : minErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      max: freezed == max
          ? _value.max
          : max // ignore: cast_nullable_to_non_nullable
              as dynamic,
      maxErrorText: freezed == maxErrorText
          ? _value.maxErrorText
          : maxErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$UrlInputFieldImpl implements UrlInputField {
  const _$UrlInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'visible') this.visible = true,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      @JsonKey(name: 'readOnly') this.readOnly = false,
      @JsonKey(name: 'requiredErrorText') this.requiredErrorText,
      @JsonKey(name: 'placeholder') this.hintText,
      @JsonKey(name: 'maxLength') this.maxLength,
      @JsonKey(name: 'min') this.min,
      @JsonKey(name: 'minErrorText') this.minErrorText,
      @JsonKey(name: 'max') this.max,
      @JsonKey(name: 'maxErrorText') this.maxErrorText,
      final String? $type})
      : $type = $type ?? 'url';

  factory _$UrlInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$UrlInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'answer')
  final String? answer;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'visible')
  final bool visible;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;
  @override
  @JsonKey(name: 'readOnly')
  final bool readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  final String? requiredErrorText;
// Fields.
  @override
  @JsonKey(name: 'placeholder')
  final String? hintText;
  @override
  @JsonKey(name: 'maxLength')
  final int? maxLength;
// For number field validation.
  @override
  @JsonKey(name: 'min')
  final dynamic min;
  @override
  @JsonKey(name: 'minErrorText')
  final String? minErrorText;
  @override
  @JsonKey(name: 'max')
  final dynamic max;
  @override
  @JsonKey(name: 'maxErrorText')
  final String? maxErrorText;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.url(id: $id, label: $label, answer: $answer, description: $description, visible: $visible, isRequired: $isRequired, readOnly: $readOnly, requiredErrorText: $requiredErrorText, hintText: $hintText, maxLength: $maxLength, min: $min, minErrorText: $minErrorText, max: $max, maxErrorText: $maxErrorText)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$UrlInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.answer, answer) || other.answer == answer) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.visible, visible) || other.visible == visible) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired) &&
            (identical(other.readOnly, readOnly) ||
                other.readOnly == readOnly) &&
            (identical(other.requiredErrorText, requiredErrorText) ||
                other.requiredErrorText == requiredErrorText) &&
            (identical(other.hintText, hintText) ||
                other.hintText == hintText) &&
            (identical(other.maxLength, maxLength) ||
                other.maxLength == maxLength) &&
            const DeepCollectionEquality().equals(other.min, min) &&
            (identical(other.minErrorText, minErrorText) ||
                other.minErrorText == minErrorText) &&
            const DeepCollectionEquality().equals(other.max, max) &&
            (identical(other.maxErrorText, maxErrorText) ||
                other.maxErrorText == maxErrorText));
  }

  @JsonKey(ignore: true)
  @override
  int get hashCode => Object.hash(
      runtimeType,
      id,
      label,
      answer,
      description,
      visible,
      isRequired,
      readOnly,
      requiredErrorText,
      hintText,
      maxLength,
      const DeepCollectionEquality().hash(min),
      minErrorText,
      const DeepCollectionEquality().hash(max),
      maxErrorText);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$UrlInputFieldImplCopyWith<_$UrlInputFieldImpl> get copyWith =>
      __$$UrlInputFieldImplCopyWithImpl<_$UrlInputFieldImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        geolocation,
  }) {
    return url(
        id,
        label,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        hintText,
        maxLength,
        min,
        minErrorText,
        max,
        maxErrorText);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
  }) {
    return url?.call(
        id,
        label,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        hintText,
        maxLength,
        min,
        minErrorText,
        max,
        maxErrorText);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
    required TResult orElse(),
  }) {
    if (url != null) {
      return url(
          id,
          label,
          answer,
          description,
          visible,
          isRequired,
          readOnly,
          requiredErrorText,
          hintText,
          maxLength,
          min,
          minErrorText,
          max,
          maxErrorText);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
  }) {
    return url(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
  }) {
    return url?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    required TResult orElse(),
  }) {
    if (url != null) {
      return url(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$UrlInputFieldImplToJson(
      this,
    );
  }
}

abstract class UrlInputField implements InputField {
  const factory UrlInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'answer') final String? answer,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'visible') final bool visible,
          @JsonKey(name: 'isRequired') final bool isRequired,
          @JsonKey(name: 'readOnly') final bool readOnly,
          @JsonKey(name: 'requiredErrorText') final String? requiredErrorText,
          @JsonKey(name: 'placeholder') final String? hintText,
          @JsonKey(name: 'maxLength') final int? maxLength,
          @JsonKey(name: 'min') final dynamic min,
          @JsonKey(name: 'minErrorText') final String? minErrorText,
          @JsonKey(name: 'max') final dynamic max,
          @JsonKey(name: 'maxErrorText') final String? maxErrorText}) =
      _$UrlInputFieldImpl;

  factory UrlInputField.fromJson(Map<String, dynamic> json) =
      _$UrlInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @override
  @JsonKey(name: 'answer')
  String? get answer;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @override
  @JsonKey(name: 'visible')
  bool get visible;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;
  @override
  @JsonKey(name: 'readOnly')
  bool get readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  String? get requiredErrorText; // Fields.
  @JsonKey(name: 'placeholder')
  String? get hintText;
  @JsonKey(name: 'maxLength')
  int? get maxLength; // For number field validation.
  @JsonKey(name: 'min')
  dynamic get min;
  @JsonKey(name: 'minErrorText')
  String? get minErrorText;
  @JsonKey(name: 'max')
  dynamic get max;
  @JsonKey(name: 'maxErrorText')
  String? get maxErrorText;
  @override
  @JsonKey(ignore: true)
  _$$UrlInputFieldImplCopyWith<_$UrlInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$NumberInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$NumberInputFieldImplCopyWith(_$NumberInputFieldImpl value,
          $Res Function(_$NumberInputFieldImpl) then) =
      __$$NumberInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'answer') String? answer,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'visible') bool visible,
      @JsonKey(name: 'isRequired') bool isRequired,
      @JsonKey(name: 'readOnly') bool readOnly,
      @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
      @JsonKey(name: 'placeholder') String? hintText,
      @JsonKey(name: 'maxLength') int? maxLength,
      @JsonKey(name: 'min') dynamic min,
      @JsonKey(name: 'minErrorText') String? minErrorText,
      @JsonKey(name: 'max') dynamic max,
      @JsonKey(name: 'maxErrorText') String? maxErrorText});
}

/// @nodoc
class __$$NumberInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$NumberInputFieldImpl>
    implements _$$NumberInputFieldImplCopyWith<$Res> {
  __$$NumberInputFieldImplCopyWithImpl(_$NumberInputFieldImpl _value,
      $Res Function(_$NumberInputFieldImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? answer = freezed,
    Object? description = freezed,
    Object? visible = null,
    Object? isRequired = null,
    Object? readOnly = null,
    Object? requiredErrorText = freezed,
    Object? hintText = freezed,
    Object? maxLength = freezed,
    Object? min = freezed,
    Object? minErrorText = freezed,
    Object? max = freezed,
    Object? maxErrorText = freezed,
  }) {
    return _then(_$NumberInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      visible: null == visible
          ? _value.visible
          : visible // ignore: cast_nullable_to_non_nullable
              as bool,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
      readOnly: null == readOnly
          ? _value.readOnly
          : readOnly // ignore: cast_nullable_to_non_nullable
              as bool,
      requiredErrorText: freezed == requiredErrorText
          ? _value.requiredErrorText
          : requiredErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      hintText: freezed == hintText
          ? _value.hintText
          : hintText // ignore: cast_nullable_to_non_nullable
              as String?,
      maxLength: freezed == maxLength
          ? _value.maxLength
          : maxLength // ignore: cast_nullable_to_non_nullable
              as int?,
      min: freezed == min
          ? _value.min
          : min // ignore: cast_nullable_to_non_nullable
              as dynamic,
      minErrorText: freezed == minErrorText
          ? _value.minErrorText
          : minErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      max: freezed == max
          ? _value.max
          : max // ignore: cast_nullable_to_non_nullable
              as dynamic,
      maxErrorText: freezed == maxErrorText
          ? _value.maxErrorText
          : maxErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$NumberInputFieldImpl implements NumberInputField {
  const _$NumberInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'visible') this.visible = true,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      @JsonKey(name: 'readOnly') this.readOnly = false,
      @JsonKey(name: 'requiredErrorText') this.requiredErrorText,
      @JsonKey(name: 'placeholder') this.hintText,
      @JsonKey(name: 'maxLength') this.maxLength,
      @JsonKey(name: 'min') this.min,
      @JsonKey(name: 'minErrorText') this.minErrorText,
      @JsonKey(name: 'max') this.max,
      @JsonKey(name: 'maxErrorText') this.maxErrorText,
      final String? $type})
      : $type = $type ?? 'number';

  factory _$NumberInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$NumberInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'answer')
  final String? answer;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'visible')
  final bool visible;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;
  @override
  @JsonKey(name: 'readOnly')
  final bool readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  final String? requiredErrorText;
// Fields.
  @override
  @JsonKey(name: 'placeholder')
  final String? hintText;
  @override
  @JsonKey(name: 'maxLength')
  final int? maxLength;
// For number field validation.
  @override
  @JsonKey(name: 'min')
  final dynamic min;
  @override
  @JsonKey(name: 'minErrorText')
  final String? minErrorText;
  @override
  @JsonKey(name: 'max')
  final dynamic max;
  @override
  @JsonKey(name: 'maxErrorText')
  final String? maxErrorText;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.number(id: $id, label: $label, answer: $answer, description: $description, visible: $visible, isRequired: $isRequired, readOnly: $readOnly, requiredErrorText: $requiredErrorText, hintText: $hintText, maxLength: $maxLength, min: $min, minErrorText: $minErrorText, max: $max, maxErrorText: $maxErrorText)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$NumberInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.answer, answer) || other.answer == answer) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.visible, visible) || other.visible == visible) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired) &&
            (identical(other.readOnly, readOnly) ||
                other.readOnly == readOnly) &&
            (identical(other.requiredErrorText, requiredErrorText) ||
                other.requiredErrorText == requiredErrorText) &&
            (identical(other.hintText, hintText) ||
                other.hintText == hintText) &&
            (identical(other.maxLength, maxLength) ||
                other.maxLength == maxLength) &&
            const DeepCollectionEquality().equals(other.min, min) &&
            (identical(other.minErrorText, minErrorText) ||
                other.minErrorText == minErrorText) &&
            const DeepCollectionEquality().equals(other.max, max) &&
            (identical(other.maxErrorText, maxErrorText) ||
                other.maxErrorText == maxErrorText));
  }

  @JsonKey(ignore: true)
  @override
  int get hashCode => Object.hash(
      runtimeType,
      id,
      label,
      answer,
      description,
      visible,
      isRequired,
      readOnly,
      requiredErrorText,
      hintText,
      maxLength,
      const DeepCollectionEquality().hash(min),
      minErrorText,
      const DeepCollectionEquality().hash(max),
      maxErrorText);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$NumberInputFieldImplCopyWith<_$NumberInputFieldImpl> get copyWith =>
      __$$NumberInputFieldImplCopyWithImpl<_$NumberInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        geolocation,
  }) {
    return number(
        id,
        label,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        hintText,
        maxLength,
        min,
        minErrorText,
        max,
        maxErrorText);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
  }) {
    return number?.call(
        id,
        label,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        hintText,
        maxLength,
        min,
        minErrorText,
        max,
        maxErrorText);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
    required TResult orElse(),
  }) {
    if (number != null) {
      return number(
          id,
          label,
          answer,
          description,
          visible,
          isRequired,
          readOnly,
          requiredErrorText,
          hintText,
          maxLength,
          min,
          minErrorText,
          max,
          maxErrorText);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
  }) {
    return number(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
  }) {
    return number?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    required TResult orElse(),
  }) {
    if (number != null) {
      return number(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$NumberInputFieldImplToJson(
      this,
    );
  }
}

abstract class NumberInputField implements InputField {
  const factory NumberInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'answer') final String? answer,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'visible') final bool visible,
          @JsonKey(name: 'isRequired') final bool isRequired,
          @JsonKey(name: 'readOnly') final bool readOnly,
          @JsonKey(name: 'requiredErrorText') final String? requiredErrorText,
          @JsonKey(name: 'placeholder') final String? hintText,
          @JsonKey(name: 'maxLength') final int? maxLength,
          @JsonKey(name: 'min') final dynamic min,
          @JsonKey(name: 'minErrorText') final String? minErrorText,
          @JsonKey(name: 'max') final dynamic max,
          @JsonKey(name: 'maxErrorText') final String? maxErrorText}) =
      _$NumberInputFieldImpl;

  factory NumberInputField.fromJson(Map<String, dynamic> json) =
      _$NumberInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @override
  @JsonKey(name: 'answer')
  String? get answer;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @override
  @JsonKey(name: 'visible')
  bool get visible;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;
  @override
  @JsonKey(name: 'readOnly')
  bool get readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  String? get requiredErrorText; // Fields.
  @JsonKey(name: 'placeholder')
  String? get hintText;
  @JsonKey(name: 'maxLength')
  int? get maxLength; // For number field validation.
  @JsonKey(name: 'min')
  dynamic get min;
  @JsonKey(name: 'minErrorText')
  String? get minErrorText;
  @JsonKey(name: 'max')
  dynamic get max;
  @JsonKey(name: 'maxErrorText')
  String? get maxErrorText;
  @override
  @JsonKey(ignore: true)
  _$$NumberInputFieldImplCopyWith<_$NumberInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$PhoneInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$PhoneInputFieldImplCopyWith(_$PhoneInputFieldImpl value,
          $Res Function(_$PhoneInputFieldImpl) then) =
      __$$PhoneInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'answer') String? answer,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'visible') bool visible,
      @JsonKey(name: 'isRequired') bool isRequired,
      @JsonKey(name: 'readOnly') bool readOnly,
      @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
      @JsonKey(name: 'placeholder') String? hintText,
      @JsonKey(name: 'maxLength') int? maxLength,
      @JsonKey(name: 'min') dynamic min,
      @JsonKey(name: 'minErrorText') String? minErrorText,
      @JsonKey(name: 'max') dynamic max,
      @JsonKey(name: 'maxErrorText') String? maxErrorText});
}

/// @nodoc
class __$$PhoneInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$PhoneInputFieldImpl>
    implements _$$PhoneInputFieldImplCopyWith<$Res> {
  __$$PhoneInputFieldImplCopyWithImpl(
      _$PhoneInputFieldImpl _value, $Res Function(_$PhoneInputFieldImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? answer = freezed,
    Object? description = freezed,
    Object? visible = null,
    Object? isRequired = null,
    Object? readOnly = null,
    Object? requiredErrorText = freezed,
    Object? hintText = freezed,
    Object? maxLength = freezed,
    Object? min = freezed,
    Object? minErrorText = freezed,
    Object? max = freezed,
    Object? maxErrorText = freezed,
  }) {
    return _then(_$PhoneInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      visible: null == visible
          ? _value.visible
          : visible // ignore: cast_nullable_to_non_nullable
              as bool,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
      readOnly: null == readOnly
          ? _value.readOnly
          : readOnly // ignore: cast_nullable_to_non_nullable
              as bool,
      requiredErrorText: freezed == requiredErrorText
          ? _value.requiredErrorText
          : requiredErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      hintText: freezed == hintText
          ? _value.hintText
          : hintText // ignore: cast_nullable_to_non_nullable
              as String?,
      maxLength: freezed == maxLength
          ? _value.maxLength
          : maxLength // ignore: cast_nullable_to_non_nullable
              as int?,
      min: freezed == min
          ? _value.min
          : min // ignore: cast_nullable_to_non_nullable
              as dynamic,
      minErrorText: freezed == minErrorText
          ? _value.minErrorText
          : minErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      max: freezed == max
          ? _value.max
          : max // ignore: cast_nullable_to_non_nullable
              as dynamic,
      maxErrorText: freezed == maxErrorText
          ? _value.maxErrorText
          : maxErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$PhoneInputFieldImpl implements PhoneInputField {
  const _$PhoneInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'visible') this.visible = true,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      @JsonKey(name: 'readOnly') this.readOnly = false,
      @JsonKey(name: 'requiredErrorText') this.requiredErrorText,
      @JsonKey(name: 'placeholder') this.hintText,
      @JsonKey(name: 'maxLength') this.maxLength,
      @JsonKey(name: 'min') this.min,
      @JsonKey(name: 'minErrorText') this.minErrorText,
      @JsonKey(name: 'max') this.max,
      @JsonKey(name: 'maxErrorText') this.maxErrorText,
      final String? $type})
      : $type = $type ?? 'phone';

  factory _$PhoneInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$PhoneInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'answer')
  final String? answer;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'visible')
  final bool visible;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;
  @override
  @JsonKey(name: 'readOnly')
  final bool readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  final String? requiredErrorText;
// Fields.
  @override
  @JsonKey(name: 'placeholder')
  final String? hintText;
  @override
  @JsonKey(name: 'maxLength')
  final int? maxLength;
// For number field validation.
  @override
  @JsonKey(name: 'min')
  final dynamic min;
  @override
  @JsonKey(name: 'minErrorText')
  final String? minErrorText;
  @override
  @JsonKey(name: 'max')
  final dynamic max;
  @override
  @JsonKey(name: 'maxErrorText')
  final String? maxErrorText;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.phone(id: $id, label: $label, answer: $answer, description: $description, visible: $visible, isRequired: $isRequired, readOnly: $readOnly, requiredErrorText: $requiredErrorText, hintText: $hintText, maxLength: $maxLength, min: $min, minErrorText: $minErrorText, max: $max, maxErrorText: $maxErrorText)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$PhoneInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.answer, answer) || other.answer == answer) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.visible, visible) || other.visible == visible) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired) &&
            (identical(other.readOnly, readOnly) ||
                other.readOnly == readOnly) &&
            (identical(other.requiredErrorText, requiredErrorText) ||
                other.requiredErrorText == requiredErrorText) &&
            (identical(other.hintText, hintText) ||
                other.hintText == hintText) &&
            (identical(other.maxLength, maxLength) ||
                other.maxLength == maxLength) &&
            const DeepCollectionEquality().equals(other.min, min) &&
            (identical(other.minErrorText, minErrorText) ||
                other.minErrorText == minErrorText) &&
            const DeepCollectionEquality().equals(other.max, max) &&
            (identical(other.maxErrorText, maxErrorText) ||
                other.maxErrorText == maxErrorText));
  }

  @JsonKey(ignore: true)
  @override
  int get hashCode => Object.hash(
      runtimeType,
      id,
      label,
      answer,
      description,
      visible,
      isRequired,
      readOnly,
      requiredErrorText,
      hintText,
      maxLength,
      const DeepCollectionEquality().hash(min),
      minErrorText,
      const DeepCollectionEquality().hash(max),
      maxErrorText);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$PhoneInputFieldImplCopyWith<_$PhoneInputFieldImpl> get copyWith =>
      __$$PhoneInputFieldImplCopyWithImpl<_$PhoneInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        geolocation,
  }) {
    return phone(
        id,
        label,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        hintText,
        maxLength,
        min,
        minErrorText,
        max,
        maxErrorText);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
  }) {
    return phone?.call(
        id,
        label,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        hintText,
        maxLength,
        min,
        minErrorText,
        max,
        maxErrorText);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
    required TResult orElse(),
  }) {
    if (phone != null) {
      return phone(
          id,
          label,
          answer,
          description,
          visible,
          isRequired,
          readOnly,
          requiredErrorText,
          hintText,
          maxLength,
          min,
          minErrorText,
          max,
          maxErrorText);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
  }) {
    return phone(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
  }) {
    return phone?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    required TResult orElse(),
  }) {
    if (phone != null) {
      return phone(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$PhoneInputFieldImplToJson(
      this,
    );
  }
}

abstract class PhoneInputField implements InputField {
  const factory PhoneInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'answer') final String? answer,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'visible') final bool visible,
          @JsonKey(name: 'isRequired') final bool isRequired,
          @JsonKey(name: 'readOnly') final bool readOnly,
          @JsonKey(name: 'requiredErrorText') final String? requiredErrorText,
          @JsonKey(name: 'placeholder') final String? hintText,
          @JsonKey(name: 'maxLength') final int? maxLength,
          @JsonKey(name: 'min') final dynamic min,
          @JsonKey(name: 'minErrorText') final String? minErrorText,
          @JsonKey(name: 'max') final dynamic max,
          @JsonKey(name: 'maxErrorText') final String? maxErrorText}) =
      _$PhoneInputFieldImpl;

  factory PhoneInputField.fromJson(Map<String, dynamic> json) =
      _$PhoneInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @override
  @JsonKey(name: 'answer')
  String? get answer;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @override
  @JsonKey(name: 'visible')
  bool get visible;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;
  @override
  @JsonKey(name: 'readOnly')
  bool get readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  String? get requiredErrorText; // Fields.
  @JsonKey(name: 'placeholder')
  String? get hintText;
  @JsonKey(name: 'maxLength')
  int? get maxLength; // For number field validation.
  @JsonKey(name: 'min')
  dynamic get min;
  @JsonKey(name: 'minErrorText')
  String? get minErrorText;
  @JsonKey(name: 'max')
  dynamic get max;
  @JsonKey(name: 'maxErrorText')
  String? get maxErrorText;
  @override
  @JsonKey(ignore: true)
  _$$PhoneInputFieldImplCopyWith<_$PhoneInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$EmailInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$EmailInputFieldImplCopyWith(_$EmailInputFieldImpl value,
          $Res Function(_$EmailInputFieldImpl) then) =
      __$$EmailInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'answer') String? answer,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'visible') bool visible,
      @JsonKey(name: 'isRequired') bool isRequired,
      @JsonKey(name: 'readOnly') bool readOnly,
      @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
      @JsonKey(name: 'placeholder') String? hintText,
      @JsonKey(name: 'maxLength') int? maxLength,
      @JsonKey(name: 'min') dynamic min,
      @JsonKey(name: 'minErrorText') String? minErrorText,
      @JsonKey(name: 'max') dynamic max,
      @JsonKey(name: 'maxErrorText') String? maxErrorText});
}

/// @nodoc
class __$$EmailInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$EmailInputFieldImpl>
    implements _$$EmailInputFieldImplCopyWith<$Res> {
  __$$EmailInputFieldImplCopyWithImpl(
      _$EmailInputFieldImpl _value, $Res Function(_$EmailInputFieldImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? answer = freezed,
    Object? description = freezed,
    Object? visible = null,
    Object? isRequired = null,
    Object? readOnly = null,
    Object? requiredErrorText = freezed,
    Object? hintText = freezed,
    Object? maxLength = freezed,
    Object? min = freezed,
    Object? minErrorText = freezed,
    Object? max = freezed,
    Object? maxErrorText = freezed,
  }) {
    return _then(_$EmailInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      visible: null == visible
          ? _value.visible
          : visible // ignore: cast_nullable_to_non_nullable
              as bool,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
      readOnly: null == readOnly
          ? _value.readOnly
          : readOnly // ignore: cast_nullable_to_non_nullable
              as bool,
      requiredErrorText: freezed == requiredErrorText
          ? _value.requiredErrorText
          : requiredErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      hintText: freezed == hintText
          ? _value.hintText
          : hintText // ignore: cast_nullable_to_non_nullable
              as String?,
      maxLength: freezed == maxLength
          ? _value.maxLength
          : maxLength // ignore: cast_nullable_to_non_nullable
              as int?,
      min: freezed == min
          ? _value.min
          : min // ignore: cast_nullable_to_non_nullable
              as dynamic,
      minErrorText: freezed == minErrorText
          ? _value.minErrorText
          : minErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      max: freezed == max
          ? _value.max
          : max // ignore: cast_nullable_to_non_nullable
              as dynamic,
      maxErrorText: freezed == maxErrorText
          ? _value.maxErrorText
          : maxErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$EmailInputFieldImpl implements EmailInputField {
  const _$EmailInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'visible') this.visible = true,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      @JsonKey(name: 'readOnly') this.readOnly = false,
      @JsonKey(name: 'requiredErrorText') this.requiredErrorText,
      @JsonKey(name: 'placeholder') this.hintText,
      @JsonKey(name: 'maxLength') this.maxLength,
      @JsonKey(name: 'min') this.min,
      @JsonKey(name: 'minErrorText') this.minErrorText,
      @JsonKey(name: 'max') this.max,
      @JsonKey(name: 'maxErrorText') this.maxErrorText,
      final String? $type})
      : $type = $type ?? 'email';

  factory _$EmailInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$EmailInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'answer')
  final String? answer;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'visible')
  final bool visible;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;
  @override
  @JsonKey(name: 'readOnly')
  final bool readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  final String? requiredErrorText;
// Fields.
  @override
  @JsonKey(name: 'placeholder')
  final String? hintText;
  @override
  @JsonKey(name: 'maxLength')
  final int? maxLength;
// For number field validation.
  @override
  @JsonKey(name: 'min')
  final dynamic min;
  @override
  @JsonKey(name: 'minErrorText')
  final String? minErrorText;
  @override
  @JsonKey(name: 'max')
  final dynamic max;
  @override
  @JsonKey(name: 'maxErrorText')
  final String? maxErrorText;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.email(id: $id, label: $label, answer: $answer, description: $description, visible: $visible, isRequired: $isRequired, readOnly: $readOnly, requiredErrorText: $requiredErrorText, hintText: $hintText, maxLength: $maxLength, min: $min, minErrorText: $minErrorText, max: $max, maxErrorText: $maxErrorText)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$EmailInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.answer, answer) || other.answer == answer) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.visible, visible) || other.visible == visible) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired) &&
            (identical(other.readOnly, readOnly) ||
                other.readOnly == readOnly) &&
            (identical(other.requiredErrorText, requiredErrorText) ||
                other.requiredErrorText == requiredErrorText) &&
            (identical(other.hintText, hintText) ||
                other.hintText == hintText) &&
            (identical(other.maxLength, maxLength) ||
                other.maxLength == maxLength) &&
            const DeepCollectionEquality().equals(other.min, min) &&
            (identical(other.minErrorText, minErrorText) ||
                other.minErrorText == minErrorText) &&
            const DeepCollectionEquality().equals(other.max, max) &&
            (identical(other.maxErrorText, maxErrorText) ||
                other.maxErrorText == maxErrorText));
  }

  @JsonKey(ignore: true)
  @override
  int get hashCode => Object.hash(
      runtimeType,
      id,
      label,
      answer,
      description,
      visible,
      isRequired,
      readOnly,
      requiredErrorText,
      hintText,
      maxLength,
      const DeepCollectionEquality().hash(min),
      minErrorText,
      const DeepCollectionEquality().hash(max),
      maxErrorText);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$EmailInputFieldImplCopyWith<_$EmailInputFieldImpl> get copyWith =>
      __$$EmailInputFieldImplCopyWithImpl<_$EmailInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        geolocation,
  }) {
    return email(
        id,
        label,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        hintText,
        maxLength,
        min,
        minErrorText,
        max,
        maxErrorText);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
  }) {
    return email?.call(
        id,
        label,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        hintText,
        maxLength,
        min,
        minErrorText,
        max,
        maxErrorText);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
    required TResult orElse(),
  }) {
    if (email != null) {
      return email(
          id,
          label,
          answer,
          description,
          visible,
          isRequired,
          readOnly,
          requiredErrorText,
          hintText,
          maxLength,
          min,
          minErrorText,
          max,
          maxErrorText);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
  }) {
    return email(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
  }) {
    return email?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    required TResult orElse(),
  }) {
    if (email != null) {
      return email(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$EmailInputFieldImplToJson(
      this,
    );
  }
}

abstract class EmailInputField implements InputField {
  const factory EmailInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'answer') final String? answer,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'visible') final bool visible,
          @JsonKey(name: 'isRequired') final bool isRequired,
          @JsonKey(name: 'readOnly') final bool readOnly,
          @JsonKey(name: 'requiredErrorText') final String? requiredErrorText,
          @JsonKey(name: 'placeholder') final String? hintText,
          @JsonKey(name: 'maxLength') final int? maxLength,
          @JsonKey(name: 'min') final dynamic min,
          @JsonKey(name: 'minErrorText') final String? minErrorText,
          @JsonKey(name: 'max') final dynamic max,
          @JsonKey(name: 'maxErrorText') final String? maxErrorText}) =
      _$EmailInputFieldImpl;

  factory EmailInputField.fromJson(Map<String, dynamic> json) =
      _$EmailInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @override
  @JsonKey(name: 'answer')
  String? get answer;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @override
  @JsonKey(name: 'visible')
  bool get visible;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;
  @override
  @JsonKey(name: 'readOnly')
  bool get readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  String? get requiredErrorText; // Fields.
  @JsonKey(name: 'placeholder')
  String? get hintText;
  @JsonKey(name: 'maxLength')
  int? get maxLength; // For number field validation.
  @JsonKey(name: 'min')
  dynamic get min;
  @JsonKey(name: 'minErrorText')
  String? get minErrorText;
  @JsonKey(name: 'max')
  dynamic get max;
  @JsonKey(name: 'maxErrorText')
  String? get maxErrorText;
  @override
  @JsonKey(ignore: true)
  _$$EmailInputFieldImplCopyWith<_$EmailInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$DateTimeInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$DateTimeInputFieldImplCopyWith(_$DateTimeInputFieldImpl value,
          $Res Function(_$DateTimeInputFieldImpl) then) =
      __$$DateTimeInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'answer') String? answer,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'visible') bool visible,
      @JsonKey(name: 'isRequired') bool isRequired,
      @JsonKey(name: 'readOnly') bool readOnly,
      @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
      @JsonKey(name: 'placeholder') String? hintText,
      @JsonKey(name: 'maxLength') int? maxLength,
      @JsonKey(name: 'min') dynamic min,
      @JsonKey(name: 'minErrorText') String? minErrorText,
      @JsonKey(name: 'max') dynamic max,
      @JsonKey(name: 'maxErrorText') String? maxErrorText});
}

/// @nodoc
class __$$DateTimeInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$DateTimeInputFieldImpl>
    implements _$$DateTimeInputFieldImplCopyWith<$Res> {
  __$$DateTimeInputFieldImplCopyWithImpl(_$DateTimeInputFieldImpl _value,
      $Res Function(_$DateTimeInputFieldImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? answer = freezed,
    Object? description = freezed,
    Object? visible = null,
    Object? isRequired = null,
    Object? readOnly = null,
    Object? requiredErrorText = freezed,
    Object? hintText = freezed,
    Object? maxLength = freezed,
    Object? min = freezed,
    Object? minErrorText = freezed,
    Object? max = freezed,
    Object? maxErrorText = freezed,
  }) {
    return _then(_$DateTimeInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      visible: null == visible
          ? _value.visible
          : visible // ignore: cast_nullable_to_non_nullable
              as bool,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
      readOnly: null == readOnly
          ? _value.readOnly
          : readOnly // ignore: cast_nullable_to_non_nullable
              as bool,
      requiredErrorText: freezed == requiredErrorText
          ? _value.requiredErrorText
          : requiredErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      hintText: freezed == hintText
          ? _value.hintText
          : hintText // ignore: cast_nullable_to_non_nullable
              as String?,
      maxLength: freezed == maxLength
          ? _value.maxLength
          : maxLength // ignore: cast_nullable_to_non_nullable
              as int?,
      min: freezed == min
          ? _value.min
          : min // ignore: cast_nullable_to_non_nullable
              as dynamic,
      minErrorText: freezed == minErrorText
          ? _value.minErrorText
          : minErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      max: freezed == max
          ? _value.max
          : max // ignore: cast_nullable_to_non_nullable
              as dynamic,
      maxErrorText: freezed == maxErrorText
          ? _value.maxErrorText
          : maxErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$DateTimeInputFieldImpl implements DateTimeInputField {
  const _$DateTimeInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'visible') this.visible = true,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      @JsonKey(name: 'readOnly') this.readOnly = false,
      @JsonKey(name: 'requiredErrorText') this.requiredErrorText,
      @JsonKey(name: 'placeholder') this.hintText,
      @JsonKey(name: 'maxLength') this.maxLength,
      @JsonKey(name: 'min') this.min,
      @JsonKey(name: 'minErrorText') this.minErrorText,
      @JsonKey(name: 'max') this.max,
      @JsonKey(name: 'maxErrorText') this.maxErrorText,
      final String? $type})
      : $type = $type ?? 'datetimelocal';

  factory _$DateTimeInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$DateTimeInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'answer')
  final String? answer;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'visible')
  final bool visible;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;
  @override
  @JsonKey(name: 'readOnly')
  final bool readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  final String? requiredErrorText;
// Fields.
  @override
  @JsonKey(name: 'placeholder')
  final String? hintText;
  @override
  @JsonKey(name: 'maxLength')
  final int? maxLength;
// For number field validation.
  @override
  @JsonKey(name: 'min')
  final dynamic min;
  @override
  @JsonKey(name: 'minErrorText')
  final String? minErrorText;
  @override
  @JsonKey(name: 'max')
  final dynamic max;
  @override
  @JsonKey(name: 'maxErrorText')
  final String? maxErrorText;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.datetimelocal(id: $id, label: $label, answer: $answer, description: $description, visible: $visible, isRequired: $isRequired, readOnly: $readOnly, requiredErrorText: $requiredErrorText, hintText: $hintText, maxLength: $maxLength, min: $min, minErrorText: $minErrorText, max: $max, maxErrorText: $maxErrorText)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$DateTimeInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.answer, answer) || other.answer == answer) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.visible, visible) || other.visible == visible) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired) &&
            (identical(other.readOnly, readOnly) ||
                other.readOnly == readOnly) &&
            (identical(other.requiredErrorText, requiredErrorText) ||
                other.requiredErrorText == requiredErrorText) &&
            (identical(other.hintText, hintText) ||
                other.hintText == hintText) &&
            (identical(other.maxLength, maxLength) ||
                other.maxLength == maxLength) &&
            const DeepCollectionEquality().equals(other.min, min) &&
            (identical(other.minErrorText, minErrorText) ||
                other.minErrorText == minErrorText) &&
            const DeepCollectionEquality().equals(other.max, max) &&
            (identical(other.maxErrorText, maxErrorText) ||
                other.maxErrorText == maxErrorText));
  }

  @JsonKey(ignore: true)
  @override
  int get hashCode => Object.hash(
      runtimeType,
      id,
      label,
      answer,
      description,
      visible,
      isRequired,
      readOnly,
      requiredErrorText,
      hintText,
      maxLength,
      const DeepCollectionEquality().hash(min),
      minErrorText,
      const DeepCollectionEquality().hash(max),
      maxErrorText);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$DateTimeInputFieldImplCopyWith<_$DateTimeInputFieldImpl> get copyWith =>
      __$$DateTimeInputFieldImplCopyWithImpl<_$DateTimeInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        geolocation,
  }) {
    return datetimelocal(
        id,
        label,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        hintText,
        maxLength,
        min,
        minErrorText,
        max,
        maxErrorText);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
  }) {
    return datetimelocal?.call(
        id,
        label,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        hintText,
        maxLength,
        min,
        minErrorText,
        max,
        maxErrorText);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
    required TResult orElse(),
  }) {
    if (datetimelocal != null) {
      return datetimelocal(
          id,
          label,
          answer,
          description,
          visible,
          isRequired,
          readOnly,
          requiredErrorText,
          hintText,
          maxLength,
          min,
          minErrorText,
          max,
          maxErrorText);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
  }) {
    return datetimelocal(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
  }) {
    return datetimelocal?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    required TResult orElse(),
  }) {
    if (datetimelocal != null) {
      return datetimelocal(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$DateTimeInputFieldImplToJson(
      this,
    );
  }
}

abstract class DateTimeInputField implements InputField {
  const factory DateTimeInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'answer') final String? answer,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'visible') final bool visible,
          @JsonKey(name: 'isRequired') final bool isRequired,
          @JsonKey(name: 'readOnly') final bool readOnly,
          @JsonKey(name: 'requiredErrorText') final String? requiredErrorText,
          @JsonKey(name: 'placeholder') final String? hintText,
          @JsonKey(name: 'maxLength') final int? maxLength,
          @JsonKey(name: 'min') final dynamic min,
          @JsonKey(name: 'minErrorText') final String? minErrorText,
          @JsonKey(name: 'max') final dynamic max,
          @JsonKey(name: 'maxErrorText') final String? maxErrorText}) =
      _$DateTimeInputFieldImpl;

  factory DateTimeInputField.fromJson(Map<String, dynamic> json) =
      _$DateTimeInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @override
  @JsonKey(name: 'answer')
  String? get answer;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @override
  @JsonKey(name: 'visible')
  bool get visible;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;
  @override
  @JsonKey(name: 'readOnly')
  bool get readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  String? get requiredErrorText; // Fields.
  @JsonKey(name: 'placeholder')
  String? get hintText;
  @JsonKey(name: 'maxLength')
  int? get maxLength; // For number field validation.
  @JsonKey(name: 'min')
  dynamic get min;
  @JsonKey(name: 'minErrorText')
  String? get minErrorText;
  @JsonKey(name: 'max')
  dynamic get max;
  @JsonKey(name: 'maxErrorText')
  String? get maxErrorText;
  @override
  @JsonKey(ignore: true)
  _$$DateTimeInputFieldImplCopyWith<_$DateTimeInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$CommentInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$CommentInputFieldImplCopyWith(_$CommentInputFieldImpl value,
          $Res Function(_$CommentInputFieldImpl) then) =
      __$$CommentInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'answer') String? answer,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'visible') bool visible,
      @JsonKey(name: 'isRequired') bool isRequired,
      @JsonKey(name: 'readOnly') bool readOnly,
      @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
      @JsonKey(name: 'placeholder') String? hintText,
      @JsonKey(name: 'maxLength') int? maxLength});
}

/// @nodoc
class __$$CommentInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$CommentInputFieldImpl>
    implements _$$CommentInputFieldImplCopyWith<$Res> {
  __$$CommentInputFieldImplCopyWithImpl(_$CommentInputFieldImpl _value,
      $Res Function(_$CommentInputFieldImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? answer = freezed,
    Object? description = freezed,
    Object? visible = null,
    Object? isRequired = null,
    Object? readOnly = null,
    Object? requiredErrorText = freezed,
    Object? hintText = freezed,
    Object? maxLength = freezed,
  }) {
    return _then(_$CommentInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      visible: null == visible
          ? _value.visible
          : visible // ignore: cast_nullable_to_non_nullable
              as bool,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
      readOnly: null == readOnly
          ? _value.readOnly
          : readOnly // ignore: cast_nullable_to_non_nullable
              as bool,
      requiredErrorText: freezed == requiredErrorText
          ? _value.requiredErrorText
          : requiredErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      hintText: freezed == hintText
          ? _value.hintText
          : hintText // ignore: cast_nullable_to_non_nullable
              as String?,
      maxLength: freezed == maxLength
          ? _value.maxLength
          : maxLength // ignore: cast_nullable_to_non_nullable
              as int?,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$CommentInputFieldImpl implements CommentInputField {
  const _$CommentInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'visible') this.visible = true,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      @JsonKey(name: 'readOnly') this.readOnly = false,
      @JsonKey(name: 'requiredErrorText') this.requiredErrorText,
      @JsonKey(name: 'placeholder') this.hintText,
      @JsonKey(name: 'maxLength') this.maxLength,
      final String? $type})
      : $type = $type ?? 'comment';

  factory _$CommentInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$CommentInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'answer')
  final String? answer;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'visible')
  final bool visible;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;
  @override
  @JsonKey(name: 'readOnly')
  final bool readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  final String? requiredErrorText;
// Fields.
  @override
  @JsonKey(name: 'placeholder')
  final String? hintText;
  @override
  @JsonKey(name: 'maxLength')
  final int? maxLength;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.comment(id: $id, label: $label, answer: $answer, description: $description, visible: $visible, isRequired: $isRequired, readOnly: $readOnly, requiredErrorText: $requiredErrorText, hintText: $hintText, maxLength: $maxLength)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$CommentInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.answer, answer) || other.answer == answer) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.visible, visible) || other.visible == visible) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired) &&
            (identical(other.readOnly, readOnly) ||
                other.readOnly == readOnly) &&
            (identical(other.requiredErrorText, requiredErrorText) ||
                other.requiredErrorText == requiredErrorText) &&
            (identical(other.hintText, hintText) ||
                other.hintText == hintText) &&
            (identical(other.maxLength, maxLength) ||
                other.maxLength == maxLength));
  }

  @JsonKey(ignore: true)
  @override
  int get hashCode => Object.hash(runtimeType, id, label, answer, description,
      visible, isRequired, readOnly, requiredErrorText, hintText, maxLength);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$CommentInputFieldImplCopyWith<_$CommentInputFieldImpl> get copyWith =>
      __$$CommentInputFieldImplCopyWithImpl<_$CommentInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        geolocation,
  }) {
    return comment(id, label, answer, description, visible, isRequired,
        readOnly, requiredErrorText, hintText, maxLength);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
  }) {
    return comment?.call(id, label, answer, description, visible, isRequired,
        readOnly, requiredErrorText, hintText, maxLength);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
    required TResult orElse(),
  }) {
    if (comment != null) {
      return comment(id, label, answer, description, visible, isRequired,
          readOnly, requiredErrorText, hintText, maxLength);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
  }) {
    return comment(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
  }) {
    return comment?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    required TResult orElse(),
  }) {
    if (comment != null) {
      return comment(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$CommentInputFieldImplToJson(
      this,
    );
  }
}

abstract class CommentInputField implements InputField {
  const factory CommentInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'answer') final String? answer,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'visible') final bool visible,
          @JsonKey(name: 'isRequired') final bool isRequired,
          @JsonKey(name: 'readOnly') final bool readOnly,
          @JsonKey(name: 'requiredErrorText') final String? requiredErrorText,
          @JsonKey(name: 'placeholder') final String? hintText,
          @JsonKey(name: 'maxLength') final int? maxLength}) =
      _$CommentInputFieldImpl;

  factory CommentInputField.fromJson(Map<String, dynamic> json) =
      _$CommentInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @override
  @JsonKey(name: 'answer')
  String? get answer;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @override
  @JsonKey(name: 'visible')
  bool get visible;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;
  @override
  @JsonKey(name: 'readOnly')
  bool get readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  String? get requiredErrorText; // Fields.
  @JsonKey(name: 'placeholder')
  String? get hintText;
  @JsonKey(name: 'maxLength')
  int? get maxLength;
  @override
  @JsonKey(ignore: true)
  _$$CommentInputFieldImplCopyWith<_$CommentInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$DropdownInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$DropdownInputFieldImplCopyWith(_$DropdownInputFieldImpl value,
          $Res Function(_$DropdownInputFieldImpl) then) =
      __$$DropdownInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'answer') String? answer,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'visible') bool visible,
      @JsonKey(name: 'isRequired') bool isRequired,
      @JsonKey(name: 'readOnly') bool readOnly,
      @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
      @JsonKey(name: 'fromManualList') bool fromManualList,
      @JsonKey(name: 'selectedLinkListLabel') String? answerList,
      @JsonKey(name: 'islinked_query') String? linkedQuery,
      @JsonKey(name: 'isConditional') bool? isConditional,
      @JsonKey(name: 'actionMessage') String? actionMessage,
      @JsonKey(name: 'allowClear') bool allowClear,
      @JsonKey(name: 'placeholder') String? hintText,
      @JsonKey(name: 'choice') @ValueTextConverter() List<ValueText> choices,
      @JsonKey(name: 'showNoneItem') bool showNoneItem,
      @JsonKey(name: 'noneText') String? noneText,
      @JsonKey(name: 'showOtherItem') bool showOtherItem,
      @JsonKey(name: 'otherText') String? otherText,
      @JsonKey(name: 'otherErrorText') String? otherErrorText,
      @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder});
}

/// @nodoc
class __$$DropdownInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$DropdownInputFieldImpl>
    implements _$$DropdownInputFieldImplCopyWith<$Res> {
  __$$DropdownInputFieldImplCopyWithImpl(_$DropdownInputFieldImpl _value,
      $Res Function(_$DropdownInputFieldImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? answer = freezed,
    Object? description = freezed,
    Object? visible = null,
    Object? isRequired = null,
    Object? readOnly = null,
    Object? requiredErrorText = freezed,
    Object? fromManualList = null,
    Object? answerList = freezed,
    Object? linkedQuery = freezed,
    Object? isConditional = freezed,
    Object? actionMessage = freezed,
    Object? allowClear = null,
    Object? hintText = freezed,
    Object? choices = null,
    Object? showNoneItem = null,
    Object? noneText = freezed,
    Object? showOtherItem = null,
    Object? otherText = freezed,
    Object? otherErrorText = freezed,
    Object? otherPlaceholder = freezed,
  }) {
    return _then(_$DropdownInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      visible: null == visible
          ? _value.visible
          : visible // ignore: cast_nullable_to_non_nullable
              as bool,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
      readOnly: null == readOnly
          ? _value.readOnly
          : readOnly // ignore: cast_nullable_to_non_nullable
              as bool,
      requiredErrorText: freezed == requiredErrorText
          ? _value.requiredErrorText
          : requiredErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      fromManualList: null == fromManualList
          ? _value.fromManualList
          : fromManualList // ignore: cast_nullable_to_non_nullable
              as bool,
      answerList: freezed == answerList
          ? _value.answerList
          : answerList // ignore: cast_nullable_to_non_nullable
              as String?,
      linkedQuery: freezed == linkedQuery
          ? _value.linkedQuery
          : linkedQuery // ignore: cast_nullable_to_non_nullable
              as String?,
      isConditional: freezed == isConditional
          ? _value.isConditional
          : isConditional // ignore: cast_nullable_to_non_nullable
              as bool?,
      actionMessage: freezed == actionMessage
          ? _value.actionMessage
          : actionMessage // ignore: cast_nullable_to_non_nullable
              as String?,
      allowClear: null == allowClear
          ? _value.allowClear
          : allowClear // ignore: cast_nullable_to_non_nullable
              as bool,
      hintText: freezed == hintText
          ? _value.hintText
          : hintText // ignore: cast_nullable_to_non_nullable
              as String?,
      choices: null == choices
          ? _value._choices
          : choices // ignore: cast_nullable_to_non_nullable
              as List<ValueText>,
      showNoneItem: null == showNoneItem
          ? _value.showNoneItem
          : showNoneItem // ignore: cast_nullable_to_non_nullable
              as bool,
      noneText: freezed == noneText
          ? _value.noneText
          : noneText // ignore: cast_nullable_to_non_nullable
              as String?,
      showOtherItem: null == showOtherItem
          ? _value.showOtherItem
          : showOtherItem // ignore: cast_nullable_to_non_nullable
              as bool,
      otherText: freezed == otherText
          ? _value.otherText
          : otherText // ignore: cast_nullable_to_non_nullable
              as String?,
      otherErrorText: freezed == otherErrorText
          ? _value.otherErrorText
          : otherErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      otherPlaceholder: freezed == otherPlaceholder
          ? _value.otherPlaceholder
          : otherPlaceholder // ignore: cast_nullable_to_non_nullable
              as String?,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$DropdownInputFieldImpl implements DropdownInputField {
  const _$DropdownInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'visible') this.visible = true,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      @JsonKey(name: 'readOnly') this.readOnly = false,
      @JsonKey(name: 'requiredErrorText') this.requiredErrorText,
      @JsonKey(name: 'fromManualList') this.fromManualList = true,
      @JsonKey(name: 'selectedLinkListLabel') this.answerList,
      @JsonKey(name: 'islinked_query') this.linkedQuery,
      @JsonKey(name: 'isConditional') this.isConditional,
      @JsonKey(name: 'actionMessage') this.actionMessage,
      @JsonKey(name: 'allowClear') this.allowClear = true,
      @JsonKey(name: 'placeholder') this.hintText,
      @JsonKey(name: 'choice')
      @ValueTextConverter()
      final List<ValueText> choices = const [],
      @JsonKey(name: 'showNoneItem') this.showNoneItem = false,
      @JsonKey(name: 'noneText') this.noneText,
      @JsonKey(name: 'showOtherItem') this.showOtherItem = false,
      @JsonKey(name: 'otherText') this.otherText,
      @JsonKey(name: 'otherErrorText') this.otherErrorText,
      @JsonKey(name: 'otherPlaceholder') this.otherPlaceholder,
      final String? $type})
      : _choices = choices,
        $type = $type ?? 'dropdown';

  factory _$DropdownInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$DropdownInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'answer')
  final String? answer;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'visible')
  final bool visible;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;
  @override
  @JsonKey(name: 'readOnly')
  final bool readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  final String? requiredErrorText;
  @override
  @JsonKey(name: 'fromManualList')
  final bool fromManualList;
  @override
  @JsonKey(name: 'selectedLinkListLabel')
  final String? answerList;
  @override
  @JsonKey(name: 'islinked_query')
  final String? linkedQuery;
  @override
  @JsonKey(name: 'isConditional')
  final bool? isConditional;
  @override
  @JsonKey(name: 'actionMessage')
  final String? actionMessage;
// Fields.
  @override
  @JsonKey(name: 'allowClear')
  final bool allowClear;
  @override
  @JsonKey(name: 'placeholder')
  final String? hintText;
  final List<ValueText> _choices;
  @override
  @JsonKey(name: 'choice')
  @ValueTextConverter()
  List<ValueText> get choices {
    if (_choices is EqualUnmodifiableListView) return _choices;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_choices);
  }

// None
  @override
  @JsonKey(name: 'showNoneItem')
  final bool showNoneItem;
  @override
  @JsonKey(name: 'noneText')
  final String? noneText;
// Other
  @override
  @JsonKey(name: 'showOtherItem')
  final bool showOtherItem;
  @override
  @JsonKey(name: 'otherText')
  final String? otherText;
  @override
  @JsonKey(name: 'otherErrorText')
  final String? otherErrorText;
  @override
  @JsonKey(name: 'otherPlaceholder')
  final String? otherPlaceholder;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.dropdown(id: $id, label: $label, answer: $answer, description: $description, visible: $visible, isRequired: $isRequired, readOnly: $readOnly, requiredErrorText: $requiredErrorText, fromManualList: $fromManualList, answerList: $answerList, linkedQuery: $linkedQuery, isConditional: $isConditional, actionMessage: $actionMessage, allowClear: $allowClear, hintText: $hintText, choices: $choices, showNoneItem: $showNoneItem, noneText: $noneText, showOtherItem: $showOtherItem, otherText: $otherText, otherErrorText: $otherErrorText, otherPlaceholder: $otherPlaceholder)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$DropdownInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.answer, answer) || other.answer == answer) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.visible, visible) || other.visible == visible) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired) &&
            (identical(other.readOnly, readOnly) ||
                other.readOnly == readOnly) &&
            (identical(other.requiredErrorText, requiredErrorText) ||
                other.requiredErrorText == requiredErrorText) &&
            (identical(other.fromManualList, fromManualList) ||
                other.fromManualList == fromManualList) &&
            (identical(other.answerList, answerList) ||
                other.answerList == answerList) &&
            (identical(other.linkedQuery, linkedQuery) ||
                other.linkedQuery == linkedQuery) &&
            (identical(other.isConditional, isConditional) ||
                other.isConditional == isConditional) &&
            (identical(other.actionMessage, actionMessage) ||
                other.actionMessage == actionMessage) &&
            (identical(other.allowClear, allowClear) ||
                other.allowClear == allowClear) &&
            (identical(other.hintText, hintText) ||
                other.hintText == hintText) &&
            const DeepCollectionEquality().equals(other._choices, _choices) &&
            (identical(other.showNoneItem, showNoneItem) ||
                other.showNoneItem == showNoneItem) &&
            (identical(other.noneText, noneText) ||
                other.noneText == noneText) &&
            (identical(other.showOtherItem, showOtherItem) ||
                other.showOtherItem == showOtherItem) &&
            (identical(other.otherText, otherText) ||
                other.otherText == otherText) &&
            (identical(other.otherErrorText, otherErrorText) ||
                other.otherErrorText == otherErrorText) &&
            (identical(other.otherPlaceholder, otherPlaceholder) ||
                other.otherPlaceholder == otherPlaceholder));
  }

  @JsonKey(ignore: true)
  @override
  int get hashCode => Object.hashAll([
        runtimeType,
        id,
        label,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        fromManualList,
        answerList,
        linkedQuery,
        isConditional,
        actionMessage,
        allowClear,
        hintText,
        const DeepCollectionEquality().hash(_choices),
        showNoneItem,
        noneText,
        showOtherItem,
        otherText,
        otherErrorText,
        otherPlaceholder
      ]);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$DropdownInputFieldImplCopyWith<_$DropdownInputFieldImpl> get copyWith =>
      __$$DropdownInputFieldImplCopyWithImpl<_$DropdownInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        geolocation,
  }) {
    return dropdown(
        id,
        label,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        fromManualList,
        answerList,
        linkedQuery,
        isConditional,
        actionMessage,
        allowClear,
        hintText,
        choices,
        showNoneItem,
        noneText,
        showOtherItem,
        otherText,
        otherErrorText,
        otherPlaceholder);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
  }) {
    return dropdown?.call(
        id,
        label,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        fromManualList,
        answerList,
        linkedQuery,
        isConditional,
        actionMessage,
        allowClear,
        hintText,
        choices,
        showNoneItem,
        noneText,
        showOtherItem,
        otherText,
        otherErrorText,
        otherPlaceholder);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
    required TResult orElse(),
  }) {
    if (dropdown != null) {
      return dropdown(
          id,
          label,
          answer,
          description,
          visible,
          isRequired,
          readOnly,
          requiredErrorText,
          fromManualList,
          answerList,
          linkedQuery,
          isConditional,
          actionMessage,
          allowClear,
          hintText,
          choices,
          showNoneItem,
          noneText,
          showOtherItem,
          otherText,
          otherErrorText,
          otherPlaceholder);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
  }) {
    return dropdown(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
  }) {
    return dropdown?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    required TResult orElse(),
  }) {
    if (dropdown != null) {
      return dropdown(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$DropdownInputFieldImplToJson(
      this,
    );
  }
}

abstract class DropdownInputField implements InputField {
  const factory DropdownInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'answer') final String? answer,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'visible') final bool visible,
          @JsonKey(name: 'isRequired') final bool isRequired,
          @JsonKey(name: 'readOnly') final bool readOnly,
          @JsonKey(name: 'requiredErrorText') final String? requiredErrorText,
          @JsonKey(name: 'fromManualList') final bool fromManualList,
          @JsonKey(name: 'selectedLinkListLabel') final String? answerList,
          @JsonKey(name: 'islinked_query') final String? linkedQuery,
          @JsonKey(name: 'isConditional') final bool? isConditional,
          @JsonKey(name: 'actionMessage') final String? actionMessage,
          @JsonKey(name: 'allowClear') final bool allowClear,
          @JsonKey(name: 'placeholder') final String? hintText,
          @JsonKey(name: 'choice')
          @ValueTextConverter()
          final List<ValueText> choices,
          @JsonKey(name: 'showNoneItem') final bool showNoneItem,
          @JsonKey(name: 'noneText') final String? noneText,
          @JsonKey(name: 'showOtherItem') final bool showOtherItem,
          @JsonKey(name: 'otherText') final String? otherText,
          @JsonKey(name: 'otherErrorText') final String? otherErrorText,
          @JsonKey(name: 'otherPlaceholder') final String? otherPlaceholder}) =
      _$DropdownInputFieldImpl;

  factory DropdownInputField.fromJson(Map<String, dynamic> json) =
      _$DropdownInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @override
  @JsonKey(name: 'answer')
  String? get answer;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @override
  @JsonKey(name: 'visible')
  bool get visible;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;
  @override
  @JsonKey(name: 'readOnly')
  bool get readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  String? get requiredErrorText;
  @JsonKey(name: 'fromManualList')
  bool get fromManualList;
  @JsonKey(name: 'selectedLinkListLabel')
  String? get answerList;
  @JsonKey(name: 'islinked_query')
  String? get linkedQuery;
  @JsonKey(name: 'isConditional')
  bool? get isConditional;
  @JsonKey(name: 'actionMessage')
  String? get actionMessage; // Fields.
  @JsonKey(name: 'allowClear')
  bool get allowClear;
  @JsonKey(name: 'placeholder')
  String? get hintText;
  @JsonKey(name: 'choice')
  @ValueTextConverter()
  List<ValueText> get choices; // None
  @JsonKey(name: 'showNoneItem')
  bool get showNoneItem;
  @JsonKey(name: 'noneText')
  String? get noneText; // Other
  @JsonKey(name: 'showOtherItem')
  bool get showOtherItem;
  @JsonKey(name: 'otherText')
  String? get otherText;
  @JsonKey(name: 'otherErrorText')
  String? get otherErrorText;
  @JsonKey(name: 'otherPlaceholder')
  String? get otherPlaceholder;
  @override
  @JsonKey(ignore: true)
  _$$DropdownInputFieldImplCopyWith<_$DropdownInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$MultipleInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$MultipleInputFieldImplCopyWith(_$MultipleInputFieldImpl value,
          $Res Function(_$MultipleInputFieldImpl) then) =
      __$$MultipleInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'answer') String? answer,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'visible') bool visible,
      @JsonKey(name: 'isRequired') bool isRequired,
      @JsonKey(name: 'readOnly') bool readOnly,
      @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
      @JsonKey(name: 'actionMessage') String? actionMessage,
      @JsonKey(name: 'isConditional') bool isConditional,
      @JsonKey(name: 'fromManualList') bool fromManualList,
      @JsonKey(name: 'choice') @ValueTextConverter() List<ValueText> choices,
      @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
      @JsonKey(name: 'selectedLinkListLabel') String? answerList,
      @JsonKey(name: 'islinked_query') String? linkedQuery,
      @JsonKey(name: 'showNoneItem') bool showNoneItem,
      @JsonKey(name: 'noneText') String? noneText,
      @JsonKey(name: 'showOtherItem') bool showOtherItem,
      @JsonKey(name: 'otherText') String? otherText,
      @JsonKey(name: 'otherErrorText') String? otherErrorText,
      @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
      @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem});
}

/// @nodoc
class __$$MultipleInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$MultipleInputFieldImpl>
    implements _$$MultipleInputFieldImplCopyWith<$Res> {
  __$$MultipleInputFieldImplCopyWithImpl(_$MultipleInputFieldImpl _value,
      $Res Function(_$MultipleInputFieldImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? answer = freezed,
    Object? description = freezed,
    Object? visible = null,
    Object? isRequired = null,
    Object? readOnly = null,
    Object? requiredErrorText = freezed,
    Object? actionMessage = freezed,
    Object? isConditional = null,
    Object? fromManualList = null,
    Object? choices = null,
    Object? maxSelectedChoices = freezed,
    Object? answerList = freezed,
    Object? linkedQuery = freezed,
    Object? showNoneItem = null,
    Object? noneText = freezed,
    Object? showOtherItem = null,
    Object? otherText = freezed,
    Object? otherErrorText = freezed,
    Object? otherPlaceholder = freezed,
    Object? showSelectAllItem = null,
  }) {
    return _then(_$MultipleInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      visible: null == visible
          ? _value.visible
          : visible // ignore: cast_nullable_to_non_nullable
              as bool,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
      readOnly: null == readOnly
          ? _value.readOnly
          : readOnly // ignore: cast_nullable_to_non_nullable
              as bool,
      requiredErrorText: freezed == requiredErrorText
          ? _value.requiredErrorText
          : requiredErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      actionMessage: freezed == actionMessage
          ? _value.actionMessage
          : actionMessage // ignore: cast_nullable_to_non_nullable
              as String?,
      isConditional: null == isConditional
          ? _value.isConditional
          : isConditional // ignore: cast_nullable_to_non_nullable
              as bool,
      fromManualList: null == fromManualList
          ? _value.fromManualList
          : fromManualList // ignore: cast_nullable_to_non_nullable
              as bool,
      choices: null == choices
          ? _value._choices
          : choices // ignore: cast_nullable_to_non_nullable
              as List<ValueText>,
      maxSelectedChoices: freezed == maxSelectedChoices
          ? _value.maxSelectedChoices
          : maxSelectedChoices // ignore: cast_nullable_to_non_nullable
              as int?,
      answerList: freezed == answerList
          ? _value.answerList
          : answerList // ignore: cast_nullable_to_non_nullable
              as String?,
      linkedQuery: freezed == linkedQuery
          ? _value.linkedQuery
          : linkedQuery // ignore: cast_nullable_to_non_nullable
              as String?,
      showNoneItem: null == showNoneItem
          ? _value.showNoneItem
          : showNoneItem // ignore: cast_nullable_to_non_nullable
              as bool,
      noneText: freezed == noneText
          ? _value.noneText
          : noneText // ignore: cast_nullable_to_non_nullable
              as String?,
      showOtherItem: null == showOtherItem
          ? _value.showOtherItem
          : showOtherItem // ignore: cast_nullable_to_non_nullable
              as bool,
      otherText: freezed == otherText
          ? _value.otherText
          : otherText // ignore: cast_nullable_to_non_nullable
              as String?,
      otherErrorText: freezed == otherErrorText
          ? _value.otherErrorText
          : otherErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      otherPlaceholder: freezed == otherPlaceholder
          ? _value.otherPlaceholder
          : otherPlaceholder // ignore: cast_nullable_to_non_nullable
              as String?,
      showSelectAllItem: null == showSelectAllItem
          ? _value.showSelectAllItem
          : showSelectAllItem // ignore: cast_nullable_to_non_nullable
              as bool,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$MultipleInputFieldImpl implements MultipleInputField {
  const _$MultipleInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'visible') this.visible = true,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      @JsonKey(name: 'readOnly') this.readOnly = false,
      @JsonKey(name: 'requiredErrorText') this.requiredErrorText,
      @JsonKey(name: 'actionMessage') this.actionMessage,
      @JsonKey(name: 'isConditional') this.isConditional = false,
      @JsonKey(name: 'fromManualList') this.fromManualList = true,
      @JsonKey(name: 'choice')
      @ValueTextConverter()
      final List<ValueText> choices = const [],
      @JsonKey(name: 'maxSelectedChoices') this.maxSelectedChoices,
      @JsonKey(name: 'selectedLinkListLabel') this.answerList,
      @JsonKey(name: 'islinked_query') this.linkedQuery,
      @JsonKey(name: 'showNoneItem') this.showNoneItem = false,
      @JsonKey(name: 'noneText') this.noneText,
      @JsonKey(name: 'showOtherItem') this.showOtherItem = false,
      @JsonKey(name: 'otherText') this.otherText,
      @JsonKey(name: 'otherErrorText') this.otherErrorText,
      @JsonKey(name: 'otherPlaceholder') this.otherPlaceholder,
      @JsonKey(name: 'showSelectAllItem') this.showSelectAllItem = false,
      final String? $type})
      : _choices = choices,
        $type = $type ?? 'multipleselect';

  factory _$MultipleInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$MultipleInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'answer')
  final String? answer;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'visible')
  final bool visible;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;
  @override
  @JsonKey(name: 'readOnly')
  final bool readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  final String? requiredErrorText;
  @override
  @JsonKey(name: 'actionMessage')
  final String? actionMessage;
  @override
  @JsonKey(name: 'isConditional')
  final bool isConditional;
  @override
  @JsonKey(name: 'fromManualList')
  final bool fromManualList;
// Fields.
  final List<ValueText> _choices;
// Fields.
  @override
  @JsonKey(name: 'choice')
  @ValueTextConverter()
  List<ValueText> get choices {
    if (_choices is EqualUnmodifiableListView) return _choices;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_choices);
  }

  @override
  @JsonKey(name: 'maxSelectedChoices')
  final int? maxSelectedChoices;
  @override
  @JsonKey(name: 'selectedLinkListLabel')
  final String? answerList;
  @override
  @JsonKey(name: 'islinked_query')
  final String? linkedQuery;
// None
  @override
  @JsonKey(name: 'showNoneItem')
  final bool showNoneItem;
  @override
  @JsonKey(name: 'noneText')
  final String? noneText;
// Other
  @override
  @JsonKey(name: 'showOtherItem')
  final bool showOtherItem;
  @override
  @JsonKey(name: 'otherText')
  final String? otherText;
  @override
  @JsonKey(name: 'otherErrorText')
  final String? otherErrorText;
  @override
  @JsonKey(name: 'otherPlaceholder')
  final String? otherPlaceholder;
// Select All
  @override
  @JsonKey(name: 'showSelectAllItem')
  final bool showSelectAllItem;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.multipleselect(id: $id, label: $label, answer: $answer, description: $description, visible: $visible, isRequired: $isRequired, readOnly: $readOnly, requiredErrorText: $requiredErrorText, actionMessage: $actionMessage, isConditional: $isConditional, fromManualList: $fromManualList, choices: $choices, maxSelectedChoices: $maxSelectedChoices, answerList: $answerList, linkedQuery: $linkedQuery, showNoneItem: $showNoneItem, noneText: $noneText, showOtherItem: $showOtherItem, otherText: $otherText, otherErrorText: $otherErrorText, otherPlaceholder: $otherPlaceholder, showSelectAllItem: $showSelectAllItem)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$MultipleInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.answer, answer) || other.answer == answer) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.visible, visible) || other.visible == visible) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired) &&
            (identical(other.readOnly, readOnly) ||
                other.readOnly == readOnly) &&
            (identical(other.requiredErrorText, requiredErrorText) ||
                other.requiredErrorText == requiredErrorText) &&
            (identical(other.actionMessage, actionMessage) ||
                other.actionMessage == actionMessage) &&
            (identical(other.isConditional, isConditional) ||
                other.isConditional == isConditional) &&
            (identical(other.fromManualList, fromManualList) ||
                other.fromManualList == fromManualList) &&
            const DeepCollectionEquality().equals(other._choices, _choices) &&
            (identical(other.maxSelectedChoices, maxSelectedChoices) ||
                other.maxSelectedChoices == maxSelectedChoices) &&
            (identical(other.answerList, answerList) ||
                other.answerList == answerList) &&
            (identical(other.linkedQuery, linkedQuery) ||
                other.linkedQuery == linkedQuery) &&
            (identical(other.showNoneItem, showNoneItem) ||
                other.showNoneItem == showNoneItem) &&
            (identical(other.noneText, noneText) ||
                other.noneText == noneText) &&
            (identical(other.showOtherItem, showOtherItem) ||
                other.showOtherItem == showOtherItem) &&
            (identical(other.otherText, otherText) ||
                other.otherText == otherText) &&
            (identical(other.otherErrorText, otherErrorText) ||
                other.otherErrorText == otherErrorText) &&
            (identical(other.otherPlaceholder, otherPlaceholder) ||
                other.otherPlaceholder == otherPlaceholder) &&
            (identical(other.showSelectAllItem, showSelectAllItem) ||
                other.showSelectAllItem == showSelectAllItem));
  }

  @JsonKey(ignore: true)
  @override
  int get hashCode => Object.hashAll([
        runtimeType,
        id,
        label,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        actionMessage,
        isConditional,
        fromManualList,
        const DeepCollectionEquality().hash(_choices),
        maxSelectedChoices,
        answerList,
        linkedQuery,
        showNoneItem,
        noneText,
        showOtherItem,
        otherText,
        otherErrorText,
        otherPlaceholder,
        showSelectAllItem
      ]);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$MultipleInputFieldImplCopyWith<_$MultipleInputFieldImpl> get copyWith =>
      __$$MultipleInputFieldImplCopyWithImpl<_$MultipleInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        geolocation,
  }) {
    return multipleselect(
        id,
        label,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        actionMessage,
        isConditional,
        fromManualList,
        choices,
        maxSelectedChoices,
        answerList,
        linkedQuery,
        showNoneItem,
        noneText,
        showOtherItem,
        otherText,
        otherErrorText,
        otherPlaceholder,
        showSelectAllItem);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
  }) {
    return multipleselect?.call(
        id,
        label,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        actionMessage,
        isConditional,
        fromManualList,
        choices,
        maxSelectedChoices,
        answerList,
        linkedQuery,
        showNoneItem,
        noneText,
        showOtherItem,
        otherText,
        otherErrorText,
        otherPlaceholder,
        showSelectAllItem);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
    required TResult orElse(),
  }) {
    if (multipleselect != null) {
      return multipleselect(
          id,
          label,
          answer,
          description,
          visible,
          isRequired,
          readOnly,
          requiredErrorText,
          actionMessage,
          isConditional,
          fromManualList,
          choices,
          maxSelectedChoices,
          answerList,
          linkedQuery,
          showNoneItem,
          noneText,
          showOtherItem,
          otherText,
          otherErrorText,
          otherPlaceholder,
          showSelectAllItem);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
  }) {
    return multipleselect(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
  }) {
    return multipleselect?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    required TResult orElse(),
  }) {
    if (multipleselect != null) {
      return multipleselect(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$MultipleInputFieldImplToJson(
      this,
    );
  }
}

abstract class MultipleInputField implements InputField {
  const factory MultipleInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'answer') final String? answer,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'visible') final bool visible,
          @JsonKey(name: 'isRequired') final bool isRequired,
          @JsonKey(name: 'readOnly') final bool readOnly,
          @JsonKey(name: 'requiredErrorText') final String? requiredErrorText,
          @JsonKey(name: 'actionMessage') final String? actionMessage,
          @JsonKey(name: 'isConditional') final bool isConditional,
          @JsonKey(name: 'fromManualList') final bool fromManualList,
          @JsonKey(name: 'choice')
          @ValueTextConverter()
          final List<ValueText> choices,
          @JsonKey(name: 'maxSelectedChoices') final int? maxSelectedChoices,
          @JsonKey(name: 'selectedLinkListLabel') final String? answerList,
          @JsonKey(name: 'islinked_query') final String? linkedQuery,
          @JsonKey(name: 'showNoneItem') final bool showNoneItem,
          @JsonKey(name: 'noneText') final String? noneText,
          @JsonKey(name: 'showOtherItem') final bool showOtherItem,
          @JsonKey(name: 'otherText') final String? otherText,
          @JsonKey(name: 'otherErrorText') final String? otherErrorText,
          @JsonKey(name: 'otherPlaceholder') final String? otherPlaceholder,
          @JsonKey(name: 'showSelectAllItem') final bool showSelectAllItem}) =
      _$MultipleInputFieldImpl;

  factory MultipleInputField.fromJson(Map<String, dynamic> json) =
      _$MultipleInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @override
  @JsonKey(name: 'answer')
  String? get answer;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @override
  @JsonKey(name: 'visible')
  bool get visible;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;
  @override
  @JsonKey(name: 'readOnly')
  bool get readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  String? get requiredErrorText;
  @JsonKey(name: 'actionMessage')
  String? get actionMessage;
  @JsonKey(name: 'isConditional')
  bool get isConditional;
  @JsonKey(name: 'fromManualList')
  bool get fromManualList; // Fields.
  @JsonKey(name: 'choice')
  @ValueTextConverter()
  List<ValueText> get choices;
  @JsonKey(name: 'maxSelectedChoices')
  int? get maxSelectedChoices;
  @JsonKey(name: 'selectedLinkListLabel')
  String? get answerList;
  @JsonKey(name: 'islinked_query')
  String? get linkedQuery; // None
  @JsonKey(name: 'showNoneItem')
  bool get showNoneItem;
  @JsonKey(name: 'noneText')
  String? get noneText; // Other
  @JsonKey(name: 'showOtherItem')
  bool get showOtherItem;
  @JsonKey(name: 'otherText')
  String? get otherText;
  @JsonKey(name: 'otherErrorText')
  String? get otherErrorText;
  @JsonKey(name: 'otherPlaceholder')
  String? get otherPlaceholder; // Select All
  @JsonKey(name: 'showSelectAllItem')
  bool get showSelectAllItem;
  @override
  @JsonKey(ignore: true)
  _$$MultipleInputFieldImplCopyWith<_$MultipleInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$CheckboxInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$CheckboxInputFieldImplCopyWith(_$CheckboxInputFieldImpl value,
          $Res Function(_$CheckboxInputFieldImpl) then) =
      __$$CheckboxInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'answer') String? answer,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'visible') bool visible,
      @JsonKey(name: 'isRequired') bool isRequired,
      @JsonKey(name: 'readOnly') bool readOnly,
      @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
      @JsonKey(name: 'actionMessage') String? actionMessage,
      @JsonKey(name: 'isConditional') bool isConditional,
      @JsonKey(name: 'fromManualList') bool fromManualList,
      @JsonKey(name: 'selectedLinkListLabel') String? answerList,
      @JsonKey(name: 'islinked_query') String? linkedQuery,
      @JsonKey(name: 'choice') @ValueTextConverter() List<ValueText> choices,
      @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
      @JsonKey(name: 'showNoneItem') bool showNoneItem,
      @JsonKey(name: 'noneText') String? noneText,
      @JsonKey(name: 'showOtherItem') bool showOtherItem,
      @JsonKey(name: 'otherText') String? otherText,
      @JsonKey(name: 'otherErrorText') String? otherErrorText,
      @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
      @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem});
}

/// @nodoc
class __$$CheckboxInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$CheckboxInputFieldImpl>
    implements _$$CheckboxInputFieldImplCopyWith<$Res> {
  __$$CheckboxInputFieldImplCopyWithImpl(_$CheckboxInputFieldImpl _value,
      $Res Function(_$CheckboxInputFieldImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? answer = freezed,
    Object? description = freezed,
    Object? visible = null,
    Object? isRequired = null,
    Object? readOnly = null,
    Object? requiredErrorText = freezed,
    Object? actionMessage = freezed,
    Object? isConditional = null,
    Object? fromManualList = null,
    Object? answerList = freezed,
    Object? linkedQuery = freezed,
    Object? choices = null,
    Object? maxSelectedChoices = freezed,
    Object? showNoneItem = null,
    Object? noneText = freezed,
    Object? showOtherItem = null,
    Object? otherText = freezed,
    Object? otherErrorText = freezed,
    Object? otherPlaceholder = freezed,
    Object? showSelectAllItem = null,
  }) {
    return _then(_$CheckboxInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      visible: null == visible
          ? _value.visible
          : visible // ignore: cast_nullable_to_non_nullable
              as bool,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
      readOnly: null == readOnly
          ? _value.readOnly
          : readOnly // ignore: cast_nullable_to_non_nullable
              as bool,
      requiredErrorText: freezed == requiredErrorText
          ? _value.requiredErrorText
          : requiredErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      actionMessage: freezed == actionMessage
          ? _value.actionMessage
          : actionMessage // ignore: cast_nullable_to_non_nullable
              as String?,
      isConditional: null == isConditional
          ? _value.isConditional
          : isConditional // ignore: cast_nullable_to_non_nullable
              as bool,
      fromManualList: null == fromManualList
          ? _value.fromManualList
          : fromManualList // ignore: cast_nullable_to_non_nullable
              as bool,
      answerList: freezed == answerList
          ? _value.answerList
          : answerList // ignore: cast_nullable_to_non_nullable
              as String?,
      linkedQuery: freezed == linkedQuery
          ? _value.linkedQuery
          : linkedQuery // ignore: cast_nullable_to_non_nullable
              as String?,
      choices: null == choices
          ? _value._choices
          : choices // ignore: cast_nullable_to_non_nullable
              as List<ValueText>,
      maxSelectedChoices: freezed == maxSelectedChoices
          ? _value.maxSelectedChoices
          : maxSelectedChoices // ignore: cast_nullable_to_non_nullable
              as int?,
      showNoneItem: null == showNoneItem
          ? _value.showNoneItem
          : showNoneItem // ignore: cast_nullable_to_non_nullable
              as bool,
      noneText: freezed == noneText
          ? _value.noneText
          : noneText // ignore: cast_nullable_to_non_nullable
              as String?,
      showOtherItem: null == showOtherItem
          ? _value.showOtherItem
          : showOtherItem // ignore: cast_nullable_to_non_nullable
              as bool,
      otherText: freezed == otherText
          ? _value.otherText
          : otherText // ignore: cast_nullable_to_non_nullable
              as String?,
      otherErrorText: freezed == otherErrorText
          ? _value.otherErrorText
          : otherErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      otherPlaceholder: freezed == otherPlaceholder
          ? _value.otherPlaceholder
          : otherPlaceholder // ignore: cast_nullable_to_non_nullable
              as String?,
      showSelectAllItem: null == showSelectAllItem
          ? _value.showSelectAllItem
          : showSelectAllItem // ignore: cast_nullable_to_non_nullable
              as bool,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$CheckboxInputFieldImpl implements CheckboxInputField {
  const _$CheckboxInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'visible') this.visible = true,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      @JsonKey(name: 'readOnly') this.readOnly = false,
      @JsonKey(name: 'requiredErrorText') this.requiredErrorText,
      @JsonKey(name: 'actionMessage') this.actionMessage,
      @JsonKey(name: 'isConditional') this.isConditional = false,
      @JsonKey(name: 'fromManualList') this.fromManualList = true,
      @JsonKey(name: 'selectedLinkListLabel') this.answerList,
      @JsonKey(name: 'islinked_query') this.linkedQuery,
      @JsonKey(name: 'choice')
      @ValueTextConverter()
      final List<ValueText> choices = const [],
      @JsonKey(name: 'maxSelectedChoices') this.maxSelectedChoices,
      @JsonKey(name: 'showNoneItem') this.showNoneItem = false,
      @JsonKey(name: 'noneText') this.noneText,
      @JsonKey(name: 'showOtherItem') this.showOtherItem = false,
      @JsonKey(name: 'otherText') this.otherText,
      @JsonKey(name: 'otherErrorText') this.otherErrorText,
      @JsonKey(name: 'otherPlaceholder') this.otherPlaceholder,
      @JsonKey(name: 'showSelectAllItem') this.showSelectAllItem = false,
      final String? $type})
      : _choices = choices,
        $type = $type ?? 'checkbox';

  factory _$CheckboxInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$CheckboxInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'answer')
  final String? answer;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'visible')
  final bool visible;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;
  @override
  @JsonKey(name: 'readOnly')
  final bool readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  final String? requiredErrorText;
  @override
  @JsonKey(name: 'actionMessage')
  final String? actionMessage;
  @override
  @JsonKey(name: 'isConditional')
  final bool isConditional;
  @override
  @JsonKey(name: 'fromManualList')
  final bool fromManualList;
  @override
  @JsonKey(name: 'selectedLinkListLabel')
  final String? answerList;
  @override
  @JsonKey(name: 'islinked_query')
  final String? linkedQuery;
// Fields.
  final List<ValueText> _choices;
// Fields.
  @override
  @JsonKey(name: 'choice')
  @ValueTextConverter()
  List<ValueText> get choices {
    if (_choices is EqualUnmodifiableListView) return _choices;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_choices);
  }

  @override
  @JsonKey(name: 'maxSelectedChoices')
  final int? maxSelectedChoices;
// None
  @override
  @JsonKey(name: 'showNoneItem')
  final bool showNoneItem;
  @override
  @JsonKey(name: 'noneText')
  final String? noneText;
// Other
  @override
  @JsonKey(name: 'showOtherItem')
  final bool showOtherItem;
  @override
  @JsonKey(name: 'otherText')
  final String? otherText;
  @override
  @JsonKey(name: 'otherErrorText')
  final String? otherErrorText;
  @override
  @JsonKey(name: 'otherPlaceholder')
  final String? otherPlaceholder;
// Select All
  @override
  @JsonKey(name: 'showSelectAllItem')
  final bool showSelectAllItem;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.checkbox(id: $id, label: $label, answer: $answer, description: $description, visible: $visible, isRequired: $isRequired, readOnly: $readOnly, requiredErrorText: $requiredErrorText, actionMessage: $actionMessage, isConditional: $isConditional, fromManualList: $fromManualList, answerList: $answerList, linkedQuery: $linkedQuery, choices: $choices, maxSelectedChoices: $maxSelectedChoices, showNoneItem: $showNoneItem, noneText: $noneText, showOtherItem: $showOtherItem, otherText: $otherText, otherErrorText: $otherErrorText, otherPlaceholder: $otherPlaceholder, showSelectAllItem: $showSelectAllItem)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$CheckboxInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.answer, answer) || other.answer == answer) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.visible, visible) || other.visible == visible) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired) &&
            (identical(other.readOnly, readOnly) ||
                other.readOnly == readOnly) &&
            (identical(other.requiredErrorText, requiredErrorText) ||
                other.requiredErrorText == requiredErrorText) &&
            (identical(other.actionMessage, actionMessage) ||
                other.actionMessage == actionMessage) &&
            (identical(other.isConditional, isConditional) ||
                other.isConditional == isConditional) &&
            (identical(other.fromManualList, fromManualList) ||
                other.fromManualList == fromManualList) &&
            (identical(other.answerList, answerList) ||
                other.answerList == answerList) &&
            (identical(other.linkedQuery, linkedQuery) ||
                other.linkedQuery == linkedQuery) &&
            const DeepCollectionEquality().equals(other._choices, _choices) &&
            (identical(other.maxSelectedChoices, maxSelectedChoices) ||
                other.maxSelectedChoices == maxSelectedChoices) &&
            (identical(other.showNoneItem, showNoneItem) ||
                other.showNoneItem == showNoneItem) &&
            (identical(other.noneText, noneText) ||
                other.noneText == noneText) &&
            (identical(other.showOtherItem, showOtherItem) ||
                other.showOtherItem == showOtherItem) &&
            (identical(other.otherText, otherText) ||
                other.otherText == otherText) &&
            (identical(other.otherErrorText, otherErrorText) ||
                other.otherErrorText == otherErrorText) &&
            (identical(other.otherPlaceholder, otherPlaceholder) ||
                other.otherPlaceholder == otherPlaceholder) &&
            (identical(other.showSelectAllItem, showSelectAllItem) ||
                other.showSelectAllItem == showSelectAllItem));
  }

  @JsonKey(ignore: true)
  @override
  int get hashCode => Object.hashAll([
        runtimeType,
        id,
        label,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        actionMessage,
        isConditional,
        fromManualList,
        answerList,
        linkedQuery,
        const DeepCollectionEquality().hash(_choices),
        maxSelectedChoices,
        showNoneItem,
        noneText,
        showOtherItem,
        otherText,
        otherErrorText,
        otherPlaceholder,
        showSelectAllItem
      ]);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$CheckboxInputFieldImplCopyWith<_$CheckboxInputFieldImpl> get copyWith =>
      __$$CheckboxInputFieldImplCopyWithImpl<_$CheckboxInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        geolocation,
  }) {
    return checkbox(
        id,
        label,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        actionMessage,
        isConditional,
        fromManualList,
        answerList,
        linkedQuery,
        choices,
        maxSelectedChoices,
        showNoneItem,
        noneText,
        showOtherItem,
        otherText,
        otherErrorText,
        otherPlaceholder,
        showSelectAllItem);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
  }) {
    return checkbox?.call(
        id,
        label,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        actionMessage,
        isConditional,
        fromManualList,
        answerList,
        linkedQuery,
        choices,
        maxSelectedChoices,
        showNoneItem,
        noneText,
        showOtherItem,
        otherText,
        otherErrorText,
        otherPlaceholder,
        showSelectAllItem);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
    required TResult orElse(),
  }) {
    if (checkbox != null) {
      return checkbox(
          id,
          label,
          answer,
          description,
          visible,
          isRequired,
          readOnly,
          requiredErrorText,
          actionMessage,
          isConditional,
          fromManualList,
          answerList,
          linkedQuery,
          choices,
          maxSelectedChoices,
          showNoneItem,
          noneText,
          showOtherItem,
          otherText,
          otherErrorText,
          otherPlaceholder,
          showSelectAllItem);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
  }) {
    return checkbox(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
  }) {
    return checkbox?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    required TResult orElse(),
  }) {
    if (checkbox != null) {
      return checkbox(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$CheckboxInputFieldImplToJson(
      this,
    );
  }
}

abstract class CheckboxInputField implements InputField {
  const factory CheckboxInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'answer') final String? answer,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'visible') final bool visible,
          @JsonKey(name: 'isRequired') final bool isRequired,
          @JsonKey(name: 'readOnly') final bool readOnly,
          @JsonKey(name: 'requiredErrorText') final String? requiredErrorText,
          @JsonKey(name: 'actionMessage') final String? actionMessage,
          @JsonKey(name: 'isConditional') final bool isConditional,
          @JsonKey(name: 'fromManualList') final bool fromManualList,
          @JsonKey(name: 'selectedLinkListLabel') final String? answerList,
          @JsonKey(name: 'islinked_query') final String? linkedQuery,
          @JsonKey(name: 'choice')
          @ValueTextConverter()
          final List<ValueText> choices,
          @JsonKey(name: 'maxSelectedChoices') final int? maxSelectedChoices,
          @JsonKey(name: 'showNoneItem') final bool showNoneItem,
          @JsonKey(name: 'noneText') final String? noneText,
          @JsonKey(name: 'showOtherItem') final bool showOtherItem,
          @JsonKey(name: 'otherText') final String? otherText,
          @JsonKey(name: 'otherErrorText') final String? otherErrorText,
          @JsonKey(name: 'otherPlaceholder') final String? otherPlaceholder,
          @JsonKey(name: 'showSelectAllItem') final bool showSelectAllItem}) =
      _$CheckboxInputFieldImpl;

  factory CheckboxInputField.fromJson(Map<String, dynamic> json) =
      _$CheckboxInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @override
  @JsonKey(name: 'answer')
  String? get answer;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @override
  @JsonKey(name: 'visible')
  bool get visible;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;
  @override
  @JsonKey(name: 'readOnly')
  bool get readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  String? get requiredErrorText;
  @JsonKey(name: 'actionMessage')
  String? get actionMessage;
  @JsonKey(name: 'isConditional')
  bool get isConditional;
  @JsonKey(name: 'fromManualList')
  bool get fromManualList;
  @JsonKey(name: 'selectedLinkListLabel')
  String? get answerList;
  @JsonKey(name: 'islinked_query')
  String? get linkedQuery; // Fields.
  @JsonKey(name: 'choice')
  @ValueTextConverter()
  List<ValueText> get choices;
  @JsonKey(name: 'maxSelectedChoices')
  int? get maxSelectedChoices; // None
  @JsonKey(name: 'showNoneItem')
  bool get showNoneItem;
  @JsonKey(name: 'noneText')
  String? get noneText; // Other
  @JsonKey(name: 'showOtherItem')
  bool get showOtherItem;
  @JsonKey(name: 'otherText')
  String? get otherText;
  @JsonKey(name: 'otherErrorText')
  String? get otherErrorText;
  @JsonKey(name: 'otherPlaceholder')
  String? get otherPlaceholder; // Select All
  @JsonKey(name: 'showSelectAllItem')
  bool get showSelectAllItem;
  @override
  @JsonKey(ignore: true)
  _$$CheckboxInputFieldImplCopyWith<_$CheckboxInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$RadioInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$RadioInputFieldImplCopyWith(_$RadioInputFieldImpl value,
          $Res Function(_$RadioInputFieldImpl) then) =
      __$$RadioInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'answer') String? answer,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'visible') bool visible,
      @JsonKey(name: 'isRequired') bool isRequired,
      @JsonKey(name: 'readOnly') bool readOnly,
      @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
      @JsonKey(name: 'actionMessage') String? actionMessage,
      @JsonKey(name: 'isConditional') bool isConditional,
      @JsonKey(name: 'choice') @ValueTextConverter() List<ValueText> choices,
      @JsonKey(name: 'showNoneItem') bool showNoneItem,
      @JsonKey(name: 'noneText') String? noneText,
      @JsonKey(name: 'showOtherItem') bool showOtherItem,
      @JsonKey(name: 'otherText') String? otherText,
      @JsonKey(name: 'otherErrorText') String? otherErrorText,
      @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
      @JsonKey(name: 'showClearButton') bool showClearButton});
}

/// @nodoc
class __$$RadioInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$RadioInputFieldImpl>
    implements _$$RadioInputFieldImplCopyWith<$Res> {
  __$$RadioInputFieldImplCopyWithImpl(
      _$RadioInputFieldImpl _value, $Res Function(_$RadioInputFieldImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? answer = freezed,
    Object? description = freezed,
    Object? visible = null,
    Object? isRequired = null,
    Object? readOnly = null,
    Object? requiredErrorText = freezed,
    Object? actionMessage = freezed,
    Object? isConditional = null,
    Object? choices = null,
    Object? showNoneItem = null,
    Object? noneText = freezed,
    Object? showOtherItem = null,
    Object? otherText = freezed,
    Object? otherErrorText = freezed,
    Object? otherPlaceholder = freezed,
    Object? showClearButton = null,
  }) {
    return _then(_$RadioInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      visible: null == visible
          ? _value.visible
          : visible // ignore: cast_nullable_to_non_nullable
              as bool,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
      readOnly: null == readOnly
          ? _value.readOnly
          : readOnly // ignore: cast_nullable_to_non_nullable
              as bool,
      requiredErrorText: freezed == requiredErrorText
          ? _value.requiredErrorText
          : requiredErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      actionMessage: freezed == actionMessage
          ? _value.actionMessage
          : actionMessage // ignore: cast_nullable_to_non_nullable
              as String?,
      isConditional: null == isConditional
          ? _value.isConditional
          : isConditional // ignore: cast_nullable_to_non_nullable
              as bool,
      choices: null == choices
          ? _value._choices
          : choices // ignore: cast_nullable_to_non_nullable
              as List<ValueText>,
      showNoneItem: null == showNoneItem
          ? _value.showNoneItem
          : showNoneItem // ignore: cast_nullable_to_non_nullable
              as bool,
      noneText: freezed == noneText
          ? _value.noneText
          : noneText // ignore: cast_nullable_to_non_nullable
              as String?,
      showOtherItem: null == showOtherItem
          ? _value.showOtherItem
          : showOtherItem // ignore: cast_nullable_to_non_nullable
              as bool,
      otherText: freezed == otherText
          ? _value.otherText
          : otherText // ignore: cast_nullable_to_non_nullable
              as String?,
      otherErrorText: freezed == otherErrorText
          ? _value.otherErrorText
          : otherErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      otherPlaceholder: freezed == otherPlaceholder
          ? _value.otherPlaceholder
          : otherPlaceholder // ignore: cast_nullable_to_non_nullable
              as String?,
      showClearButton: null == showClearButton
          ? _value.showClearButton
          : showClearButton // ignore: cast_nullable_to_non_nullable
              as bool,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$RadioInputFieldImpl implements RadioInputField {
  const _$RadioInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'visible') this.visible = true,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      @JsonKey(name: 'readOnly') this.readOnly = false,
      @JsonKey(name: 'requiredErrorText') this.requiredErrorText,
      @JsonKey(name: 'actionMessage') this.actionMessage,
      @JsonKey(name: 'isConditional') this.isConditional = false,
      @JsonKey(name: 'choice')
      @ValueTextConverter()
      final List<ValueText> choices = const [],
      @JsonKey(name: 'showNoneItem') this.showNoneItem = false,
      @JsonKey(name: 'noneText') this.noneText,
      @JsonKey(name: 'showOtherItem') this.showOtherItem = false,
      @JsonKey(name: 'otherText') this.otherText,
      @JsonKey(name: 'otherErrorText') this.otherErrorText,
      @JsonKey(name: 'otherPlaceholder') this.otherPlaceholder,
      @JsonKey(name: 'showClearButton') this.showClearButton = false,
      final String? $type})
      : _choices = choices,
        $type = $type ?? 'radiogroup';

  factory _$RadioInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$RadioInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'answer')
  final String? answer;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'visible')
  final bool visible;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;
  @override
  @JsonKey(name: 'readOnly')
  final bool readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  final String? requiredErrorText;
  @override
  @JsonKey(name: 'actionMessage')
  final String? actionMessage;
  @override
  @JsonKey(name: 'isConditional')
  final bool isConditional;
// Fields.
  final List<ValueText> _choices;
// Fields.
  @override
  @JsonKey(name: 'choice')
  @ValueTextConverter()
  List<ValueText> get choices {
    if (_choices is EqualUnmodifiableListView) return _choices;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_choices);
  }

// None
  @override
  @JsonKey(name: 'showNoneItem')
  final bool showNoneItem;
  @override
  @JsonKey(name: 'noneText')
  final String? noneText;
// Other
  @override
  @JsonKey(name: 'showOtherItem')
  final bool showOtherItem;
  @override
  @JsonKey(name: 'otherText')
  final String? otherText;
  @override
  @JsonKey(name: 'otherErrorText')
  final String? otherErrorText;
  @override
  @JsonKey(name: 'otherPlaceholder')
  final String? otherPlaceholder;
// Show clear
  @override
  @JsonKey(name: 'showClearButton')
  final bool showClearButton;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.radiogroup(id: $id, label: $label, answer: $answer, description: $description, visible: $visible, isRequired: $isRequired, readOnly: $readOnly, requiredErrorText: $requiredErrorText, actionMessage: $actionMessage, isConditional: $isConditional, choices: $choices, showNoneItem: $showNoneItem, noneText: $noneText, showOtherItem: $showOtherItem, otherText: $otherText, otherErrorText: $otherErrorText, otherPlaceholder: $otherPlaceholder, showClearButton: $showClearButton)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$RadioInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.answer, answer) || other.answer == answer) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.visible, visible) || other.visible == visible) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired) &&
            (identical(other.readOnly, readOnly) ||
                other.readOnly == readOnly) &&
            (identical(other.requiredErrorText, requiredErrorText) ||
                other.requiredErrorText == requiredErrorText) &&
            (identical(other.actionMessage, actionMessage) ||
                other.actionMessage == actionMessage) &&
            (identical(other.isConditional, isConditional) ||
                other.isConditional == isConditional) &&
            const DeepCollectionEquality().equals(other._choices, _choices) &&
            (identical(other.showNoneItem, showNoneItem) ||
                other.showNoneItem == showNoneItem) &&
            (identical(other.noneText, noneText) ||
                other.noneText == noneText) &&
            (identical(other.showOtherItem, showOtherItem) ||
                other.showOtherItem == showOtherItem) &&
            (identical(other.otherText, otherText) ||
                other.otherText == otherText) &&
            (identical(other.otherErrorText, otherErrorText) ||
                other.otherErrorText == otherErrorText) &&
            (identical(other.otherPlaceholder, otherPlaceholder) ||
                other.otherPlaceholder == otherPlaceholder) &&
            (identical(other.showClearButton, showClearButton) ||
                other.showClearButton == showClearButton));
  }

  @JsonKey(ignore: true)
  @override
  int get hashCode => Object.hash(
      runtimeType,
      id,
      label,
      answer,
      description,
      visible,
      isRequired,
      readOnly,
      requiredErrorText,
      actionMessage,
      isConditional,
      const DeepCollectionEquality().hash(_choices),
      showNoneItem,
      noneText,
      showOtherItem,
      otherText,
      otherErrorText,
      otherPlaceholder,
      showClearButton);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$RadioInputFieldImplCopyWith<_$RadioInputFieldImpl> get copyWith =>
      __$$RadioInputFieldImplCopyWithImpl<_$RadioInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        geolocation,
  }) {
    return radiogroup(
        id,
        label,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        actionMessage,
        isConditional,
        choices,
        showNoneItem,
        noneText,
        showOtherItem,
        otherText,
        otherErrorText,
        otherPlaceholder,
        showClearButton);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
  }) {
    return radiogroup?.call(
        id,
        label,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        actionMessage,
        isConditional,
        choices,
        showNoneItem,
        noneText,
        showOtherItem,
        otherText,
        otherErrorText,
        otherPlaceholder,
        showClearButton);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
    required TResult orElse(),
  }) {
    if (radiogroup != null) {
      return radiogroup(
          id,
          label,
          answer,
          description,
          visible,
          isRequired,
          readOnly,
          requiredErrorText,
          actionMessage,
          isConditional,
          choices,
          showNoneItem,
          noneText,
          showOtherItem,
          otherText,
          otherErrorText,
          otherPlaceholder,
          showClearButton);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
  }) {
    return radiogroup(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
  }) {
    return radiogroup?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    required TResult orElse(),
  }) {
    if (radiogroup != null) {
      return radiogroup(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$RadioInputFieldImplToJson(
      this,
    );
  }
}

abstract class RadioInputField implements InputField {
  const factory RadioInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'answer') final String? answer,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'visible') final bool visible,
          @JsonKey(name: 'isRequired') final bool isRequired,
          @JsonKey(name: 'readOnly') final bool readOnly,
          @JsonKey(name: 'requiredErrorText') final String? requiredErrorText,
          @JsonKey(name: 'actionMessage') final String? actionMessage,
          @JsonKey(name: 'isConditional') final bool isConditional,
          @JsonKey(name: 'choice')
          @ValueTextConverter()
          final List<ValueText> choices,
          @JsonKey(name: 'showNoneItem') final bool showNoneItem,
          @JsonKey(name: 'noneText') final String? noneText,
          @JsonKey(name: 'showOtherItem') final bool showOtherItem,
          @JsonKey(name: 'otherText') final String? otherText,
          @JsonKey(name: 'otherErrorText') final String? otherErrorText,
          @JsonKey(name: 'otherPlaceholder') final String? otherPlaceholder,
          @JsonKey(name: 'showClearButton') final bool showClearButton}) =
      _$RadioInputFieldImpl;

  factory RadioInputField.fromJson(Map<String, dynamic> json) =
      _$RadioInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @override
  @JsonKey(name: 'answer')
  String? get answer;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @override
  @JsonKey(name: 'visible')
  bool get visible;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;
  @override
  @JsonKey(name: 'readOnly')
  bool get readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  String? get requiredErrorText;
  @JsonKey(name: 'actionMessage')
  String? get actionMessage;
  @JsonKey(name: 'isConditional')
  bool get isConditional; // Fields.
  @JsonKey(name: 'choice')
  @ValueTextConverter()
  List<ValueText> get choices; // None
  @JsonKey(name: 'showNoneItem')
  bool get showNoneItem;
  @JsonKey(name: 'noneText')
  String? get noneText; // Other
  @JsonKey(name: 'showOtherItem')
  bool get showOtherItem;
  @JsonKey(name: 'otherText')
  String? get otherText;
  @JsonKey(name: 'otherErrorText')
  String? get otherErrorText;
  @JsonKey(name: 'otherPlaceholder')
  String? get otherPlaceholder; // Show clear
  @JsonKey(name: 'showClearButton')
  bool get showClearButton;
  @override
  @JsonKey(ignore: true)
  _$$RadioInputFieldImplCopyWith<_$RadioInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$YesNoInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$YesNoInputFieldImplCopyWith(_$YesNoInputFieldImpl value,
          $Res Function(_$YesNoInputFieldImpl) then) =
      __$$YesNoInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'answer') String? answer,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'visible') bool visible,
      @JsonKey(name: 'isRequired') bool isRequired,
      @JsonKey(name: 'readOnly') bool readOnly,
      @JsonKey(name: 'isConditional') bool isConditional,
      @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
      @JsonKey(name: 'actionMessage') String? actionMessage,
      @JsonKey(name: 'choice') @ValueTextConverter() List<ValueText> choices,
      @JsonKey(name: 'showNoneItem') bool showNoneItem,
      @JsonKey(name: 'noneText') String? noneText,
      @JsonKey(name: 'showOtherItem') bool showOtherItem,
      @JsonKey(name: 'otherText') String? otherText,
      @JsonKey(name: 'otherErrorText') String? otherErrorText,
      @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
      @JsonKey(name: 'showClearButton') bool showClearButton});
}

/// @nodoc
class __$$YesNoInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$YesNoInputFieldImpl>
    implements _$$YesNoInputFieldImplCopyWith<$Res> {
  __$$YesNoInputFieldImplCopyWithImpl(
      _$YesNoInputFieldImpl _value, $Res Function(_$YesNoInputFieldImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? answer = freezed,
    Object? description = freezed,
    Object? visible = null,
    Object? isRequired = null,
    Object? readOnly = null,
    Object? isConditional = null,
    Object? requiredErrorText = freezed,
    Object? actionMessage = freezed,
    Object? choices = null,
    Object? showNoneItem = null,
    Object? noneText = freezed,
    Object? showOtherItem = null,
    Object? otherText = freezed,
    Object? otherErrorText = freezed,
    Object? otherPlaceholder = freezed,
    Object? showClearButton = null,
  }) {
    return _then(_$YesNoInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      visible: null == visible
          ? _value.visible
          : visible // ignore: cast_nullable_to_non_nullable
              as bool,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
      readOnly: null == readOnly
          ? _value.readOnly
          : readOnly // ignore: cast_nullable_to_non_nullable
              as bool,
      isConditional: null == isConditional
          ? _value.isConditional
          : isConditional // ignore: cast_nullable_to_non_nullable
              as bool,
      requiredErrorText: freezed == requiredErrorText
          ? _value.requiredErrorText
          : requiredErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      actionMessage: freezed == actionMessage
          ? _value.actionMessage
          : actionMessage // ignore: cast_nullable_to_non_nullable
              as String?,
      choices: null == choices
          ? _value._choices
          : choices // ignore: cast_nullable_to_non_nullable
              as List<ValueText>,
      showNoneItem: null == showNoneItem
          ? _value.showNoneItem
          : showNoneItem // ignore: cast_nullable_to_non_nullable
              as bool,
      noneText: freezed == noneText
          ? _value.noneText
          : noneText // ignore: cast_nullable_to_non_nullable
              as String?,
      showOtherItem: null == showOtherItem
          ? _value.showOtherItem
          : showOtherItem // ignore: cast_nullable_to_non_nullable
              as bool,
      otherText: freezed == otherText
          ? _value.otherText
          : otherText // ignore: cast_nullable_to_non_nullable
              as String?,
      otherErrorText: freezed == otherErrorText
          ? _value.otherErrorText
          : otherErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      otherPlaceholder: freezed == otherPlaceholder
          ? _value.otherPlaceholder
          : otherPlaceholder // ignore: cast_nullable_to_non_nullable
              as String?,
      showClearButton: null == showClearButton
          ? _value.showClearButton
          : showClearButton // ignore: cast_nullable_to_non_nullable
              as bool,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$YesNoInputFieldImpl implements YesNoInputField {
  const _$YesNoInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'visible') this.visible = true,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      @JsonKey(name: 'readOnly') this.readOnly = false,
      @JsonKey(name: 'isConditional') this.isConditional = false,
      @JsonKey(name: 'requiredErrorText') this.requiredErrorText,
      @JsonKey(name: 'actionMessage') this.actionMessage,
      @JsonKey(name: 'choice')
      @ValueTextConverter()
      final List<ValueText> choices = const [],
      @JsonKey(name: 'showNoneItem') this.showNoneItem = false,
      @JsonKey(name: 'noneText') this.noneText,
      @JsonKey(name: 'showOtherItem') this.showOtherItem = false,
      @JsonKey(name: 'otherText') this.otherText,
      @JsonKey(name: 'otherErrorText') this.otherErrorText,
      @JsonKey(name: 'otherPlaceholder') this.otherPlaceholder,
      @JsonKey(name: 'showClearButton') this.showClearButton = false,
      final String? $type})
      : _choices = choices,
        $type = $type ?? 'yesno';

  factory _$YesNoInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$YesNoInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'answer')
  final String? answer;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'visible')
  final bool visible;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;
  @override
  @JsonKey(name: 'readOnly')
  final bool readOnly;
  @override
  @JsonKey(name: 'isConditional')
  final bool isConditional;
  @override
  @JsonKey(name: 'requiredErrorText')
  final String? requiredErrorText;
  @override
  @JsonKey(name: 'actionMessage')
  final String? actionMessage;
// Fields.
  final List<ValueText> _choices;
// Fields.
  @override
  @JsonKey(name: 'choice')
  @ValueTextConverter()
  List<ValueText> get choices {
    if (_choices is EqualUnmodifiableListView) return _choices;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_choices);
  }

// None
  @override
  @JsonKey(name: 'showNoneItem')
  final bool showNoneItem;
  @override
  @JsonKey(name: 'noneText')
  final String? noneText;
// Other
  @override
  @JsonKey(name: 'showOtherItem')
  final bool showOtherItem;
  @override
  @JsonKey(name: 'otherText')
  final String? otherText;
  @override
  @JsonKey(name: 'otherErrorText')
  final String? otherErrorText;
  @override
  @JsonKey(name: 'otherPlaceholder')
  final String? otherPlaceholder;
// Show clear
  @override
  @JsonKey(name: 'showClearButton')
  final bool showClearButton;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.yesno(id: $id, label: $label, answer: $answer, description: $description, visible: $visible, isRequired: $isRequired, readOnly: $readOnly, isConditional: $isConditional, requiredErrorText: $requiredErrorText, actionMessage: $actionMessage, choices: $choices, showNoneItem: $showNoneItem, noneText: $noneText, showOtherItem: $showOtherItem, otherText: $otherText, otherErrorText: $otherErrorText, otherPlaceholder: $otherPlaceholder, showClearButton: $showClearButton)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$YesNoInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.answer, answer) || other.answer == answer) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.visible, visible) || other.visible == visible) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired) &&
            (identical(other.readOnly, readOnly) ||
                other.readOnly == readOnly) &&
            (identical(other.isConditional, isConditional) ||
                other.isConditional == isConditional) &&
            (identical(other.requiredErrorText, requiredErrorText) ||
                other.requiredErrorText == requiredErrorText) &&
            (identical(other.actionMessage, actionMessage) ||
                other.actionMessage == actionMessage) &&
            const DeepCollectionEquality().equals(other._choices, _choices) &&
            (identical(other.showNoneItem, showNoneItem) ||
                other.showNoneItem == showNoneItem) &&
            (identical(other.noneText, noneText) ||
                other.noneText == noneText) &&
            (identical(other.showOtherItem, showOtherItem) ||
                other.showOtherItem == showOtherItem) &&
            (identical(other.otherText, otherText) ||
                other.otherText == otherText) &&
            (identical(other.otherErrorText, otherErrorText) ||
                other.otherErrorText == otherErrorText) &&
            (identical(other.otherPlaceholder, otherPlaceholder) ||
                other.otherPlaceholder == otherPlaceholder) &&
            (identical(other.showClearButton, showClearButton) ||
                other.showClearButton == showClearButton));
  }

  @JsonKey(ignore: true)
  @override
  int get hashCode => Object.hash(
      runtimeType,
      id,
      label,
      answer,
      description,
      visible,
      isRequired,
      readOnly,
      isConditional,
      requiredErrorText,
      actionMessage,
      const DeepCollectionEquality().hash(_choices),
      showNoneItem,
      noneText,
      showOtherItem,
      otherText,
      otherErrorText,
      otherPlaceholder,
      showClearButton);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$YesNoInputFieldImplCopyWith<_$YesNoInputFieldImpl> get copyWith =>
      __$$YesNoInputFieldImplCopyWithImpl<_$YesNoInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        geolocation,
  }) {
    return yesno(
        id,
        label,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        isConditional,
        requiredErrorText,
        actionMessage,
        choices,
        showNoneItem,
        noneText,
        showOtherItem,
        otherText,
        otherErrorText,
        otherPlaceholder,
        showClearButton);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
  }) {
    return yesno?.call(
        id,
        label,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        isConditional,
        requiredErrorText,
        actionMessage,
        choices,
        showNoneItem,
        noneText,
        showOtherItem,
        otherText,
        otherErrorText,
        otherPlaceholder,
        showClearButton);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
    required TResult orElse(),
  }) {
    if (yesno != null) {
      return yesno(
          id,
          label,
          answer,
          description,
          visible,
          isRequired,
          readOnly,
          isConditional,
          requiredErrorText,
          actionMessage,
          choices,
          showNoneItem,
          noneText,
          showOtherItem,
          otherText,
          otherErrorText,
          otherPlaceholder,
          showClearButton);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
  }) {
    return yesno(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
  }) {
    return yesno?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    required TResult orElse(),
  }) {
    if (yesno != null) {
      return yesno(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$YesNoInputFieldImplToJson(
      this,
    );
  }
}

abstract class YesNoInputField implements InputField {
  const factory YesNoInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'answer') final String? answer,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'visible') final bool visible,
          @JsonKey(name: 'isRequired') final bool isRequired,
          @JsonKey(name: 'readOnly') final bool readOnly,
          @JsonKey(name: 'isConditional') final bool isConditional,
          @JsonKey(name: 'requiredErrorText') final String? requiredErrorText,
          @JsonKey(name: 'actionMessage') final String? actionMessage,
          @JsonKey(name: 'choice')
          @ValueTextConverter()
          final List<ValueText> choices,
          @JsonKey(name: 'showNoneItem') final bool showNoneItem,
          @JsonKey(name: 'noneText') final String? noneText,
          @JsonKey(name: 'showOtherItem') final bool showOtherItem,
          @JsonKey(name: 'otherText') final String? otherText,
          @JsonKey(name: 'otherErrorText') final String? otherErrorText,
          @JsonKey(name: 'otherPlaceholder') final String? otherPlaceholder,
          @JsonKey(name: 'showClearButton') final bool showClearButton}) =
      _$YesNoInputFieldImpl;

  factory YesNoInputField.fromJson(Map<String, dynamic> json) =
      _$YesNoInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @override
  @JsonKey(name: 'answer')
  String? get answer;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @override
  @JsonKey(name: 'visible')
  bool get visible;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;
  @override
  @JsonKey(name: 'readOnly')
  bool get readOnly;
  @JsonKey(name: 'isConditional')
  bool get isConditional;
  @override
  @JsonKey(name: 'requiredErrorText')
  String? get requiredErrorText;
  @JsonKey(name: 'actionMessage')
  String? get actionMessage; // Fields.
  @JsonKey(name: 'choice')
  @ValueTextConverter()
  List<ValueText> get choices; // None
  @JsonKey(name: 'showNoneItem')
  bool get showNoneItem;
  @JsonKey(name: 'noneText')
  String? get noneText; // Other
  @JsonKey(name: 'showOtherItem')
  bool get showOtherItem;
  @JsonKey(name: 'otherText')
  String? get otherText;
  @JsonKey(name: 'otherErrorText')
  String? get otherErrorText;
  @JsonKey(name: 'otherPlaceholder')
  String? get otherPlaceholder; // Show clear
  @JsonKey(name: 'showClearButton')
  bool get showClearButton;
  @override
  @JsonKey(ignore: true)
  _$$YesNoInputFieldImplCopyWith<_$YesNoInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$YesNoNaInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$YesNoNaInputFieldImplCopyWith(_$YesNoNaInputFieldImpl value,
          $Res Function(_$YesNoNaInputFieldImpl) then) =
      __$$YesNoNaInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'answer') String? answer,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'visible') bool visible,
      @JsonKey(name: 'isRequired') bool isRequired,
      @JsonKey(name: 'readOnly') bool readOnly,
      @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
      @JsonKey(name: 'actionMessage') String? actionMessage,
      @JsonKey(name: 'isConditional') bool isConditional,
      @JsonKey(name: 'choice') @ValueTextConverter() List<ValueText> choices,
      @JsonKey(name: 'showNoneItem') bool showNoneItem,
      @JsonKey(name: 'noneText') String? noneText,
      @JsonKey(name: 'showOtherItem') bool showOtherItem,
      @JsonKey(name: 'otherText') String? otherText,
      @JsonKey(name: 'otherErrorText') String? otherErrorText,
      @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
      @JsonKey(name: 'showClearButton') bool showClearButton});
}

/// @nodoc
class __$$YesNoNaInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$YesNoNaInputFieldImpl>
    implements _$$YesNoNaInputFieldImplCopyWith<$Res> {
  __$$YesNoNaInputFieldImplCopyWithImpl(_$YesNoNaInputFieldImpl _value,
      $Res Function(_$YesNoNaInputFieldImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? answer = freezed,
    Object? description = freezed,
    Object? visible = null,
    Object? isRequired = null,
    Object? readOnly = null,
    Object? requiredErrorText = freezed,
    Object? actionMessage = freezed,
    Object? isConditional = null,
    Object? choices = null,
    Object? showNoneItem = null,
    Object? noneText = freezed,
    Object? showOtherItem = null,
    Object? otherText = freezed,
    Object? otherErrorText = freezed,
    Object? otherPlaceholder = freezed,
    Object? showClearButton = null,
  }) {
    return _then(_$YesNoNaInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as String?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      visible: null == visible
          ? _value.visible
          : visible // ignore: cast_nullable_to_non_nullable
              as bool,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
      readOnly: null == readOnly
          ? _value.readOnly
          : readOnly // ignore: cast_nullable_to_non_nullable
              as bool,
      requiredErrorText: freezed == requiredErrorText
          ? _value.requiredErrorText
          : requiredErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      actionMessage: freezed == actionMessage
          ? _value.actionMessage
          : actionMessage // ignore: cast_nullable_to_non_nullable
              as String?,
      isConditional: null == isConditional
          ? _value.isConditional
          : isConditional // ignore: cast_nullable_to_non_nullable
              as bool,
      choices: null == choices
          ? _value._choices
          : choices // ignore: cast_nullable_to_non_nullable
              as List<ValueText>,
      showNoneItem: null == showNoneItem
          ? _value.showNoneItem
          : showNoneItem // ignore: cast_nullable_to_non_nullable
              as bool,
      noneText: freezed == noneText
          ? _value.noneText
          : noneText // ignore: cast_nullable_to_non_nullable
              as String?,
      showOtherItem: null == showOtherItem
          ? _value.showOtherItem
          : showOtherItem // ignore: cast_nullable_to_non_nullable
              as bool,
      otherText: freezed == otherText
          ? _value.otherText
          : otherText // ignore: cast_nullable_to_non_nullable
              as String?,
      otherErrorText: freezed == otherErrorText
          ? _value.otherErrorText
          : otherErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
      otherPlaceholder: freezed == otherPlaceholder
          ? _value.otherPlaceholder
          : otherPlaceholder // ignore: cast_nullable_to_non_nullable
              as String?,
      showClearButton: null == showClearButton
          ? _value.showClearButton
          : showClearButton // ignore: cast_nullable_to_non_nullable
              as bool,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$YesNoNaInputFieldImpl implements YesNoNaInputField {
  const _$YesNoNaInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'answer') this.answer,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'visible') this.visible = true,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      @JsonKey(name: 'readOnly') this.readOnly = false,
      @JsonKey(name: 'requiredErrorText') this.requiredErrorText,
      @JsonKey(name: 'actionMessage') this.actionMessage,
      @JsonKey(name: 'isConditional') this.isConditional = false,
      @JsonKey(name: 'choice')
      @ValueTextConverter()
      final List<ValueText> choices = const [],
      @JsonKey(name: 'showNoneItem') this.showNoneItem = false,
      @JsonKey(name: 'noneText') this.noneText,
      @JsonKey(name: 'showOtherItem') this.showOtherItem = false,
      @JsonKey(name: 'otherText') this.otherText,
      @JsonKey(name: 'otherErrorText') this.otherErrorText,
      @JsonKey(name: 'otherPlaceholder') this.otherPlaceholder,
      @JsonKey(name: 'showClearButton') this.showClearButton = false,
      final String? $type})
      : _choices = choices,
        $type = $type ?? 'yesnona';

  factory _$YesNoNaInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$YesNoNaInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  @override
  @JsonKey(name: 'answer')
  final String? answer;
  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'visible')
  final bool visible;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;
  @override
  @JsonKey(name: 'readOnly')
  final bool readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  final String? requiredErrorText;
  @override
  @JsonKey(name: 'actionMessage')
  final String? actionMessage;
  @override
  @JsonKey(name: 'isConditional')
  final bool isConditional;
// Fields.
  final List<ValueText> _choices;
// Fields.
  @override
  @JsonKey(name: 'choice')
  @ValueTextConverter()
  List<ValueText> get choices {
    if (_choices is EqualUnmodifiableListView) return _choices;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_choices);
  }

// None
  @override
  @JsonKey(name: 'showNoneItem')
  final bool showNoneItem;
  @override
  @JsonKey(name: 'noneText')
  final String? noneText;
// Other
  @override
  @JsonKey(name: 'showOtherItem')
  final bool showOtherItem;
  @override
  @JsonKey(name: 'otherText')
  final String? otherText;
  @override
  @JsonKey(name: 'otherErrorText')
  final String? otherErrorText;
  @override
  @JsonKey(name: 'otherPlaceholder')
  final String? otherPlaceholder;
// Show clear
  @override
  @JsonKey(name: 'showClearButton')
  final bool showClearButton;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.yesnona(id: $id, label: $label, answer: $answer, description: $description, visible: $visible, isRequired: $isRequired, readOnly: $readOnly, requiredErrorText: $requiredErrorText, actionMessage: $actionMessage, isConditional: $isConditional, choices: $choices, showNoneItem: $showNoneItem, noneText: $noneText, showOtherItem: $showOtherItem, otherText: $otherText, otherErrorText: $otherErrorText, otherPlaceholder: $otherPlaceholder, showClearButton: $showClearButton)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$YesNoNaInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.answer, answer) || other.answer == answer) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.visible, visible) || other.visible == visible) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired) &&
            (identical(other.readOnly, readOnly) ||
                other.readOnly == readOnly) &&
            (identical(other.requiredErrorText, requiredErrorText) ||
                other.requiredErrorText == requiredErrorText) &&
            (identical(other.actionMessage, actionMessage) ||
                other.actionMessage == actionMessage) &&
            (identical(other.isConditional, isConditional) ||
                other.isConditional == isConditional) &&
            const DeepCollectionEquality().equals(other._choices, _choices) &&
            (identical(other.showNoneItem, showNoneItem) ||
                other.showNoneItem == showNoneItem) &&
            (identical(other.noneText, noneText) ||
                other.noneText == noneText) &&
            (identical(other.showOtherItem, showOtherItem) ||
                other.showOtherItem == showOtherItem) &&
            (identical(other.otherText, otherText) ||
                other.otherText == otherText) &&
            (identical(other.otherErrorText, otherErrorText) ||
                other.otherErrorText == otherErrorText) &&
            (identical(other.otherPlaceholder, otherPlaceholder) ||
                other.otherPlaceholder == otherPlaceholder) &&
            (identical(other.showClearButton, showClearButton) ||
                other.showClearButton == showClearButton));
  }

  @JsonKey(ignore: true)
  @override
  int get hashCode => Object.hash(
      runtimeType,
      id,
      label,
      answer,
      description,
      visible,
      isRequired,
      readOnly,
      requiredErrorText,
      actionMessage,
      isConditional,
      const DeepCollectionEquality().hash(_choices),
      showNoneItem,
      noneText,
      showOtherItem,
      otherText,
      otherErrorText,
      otherPlaceholder,
      showClearButton);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$YesNoNaInputFieldImplCopyWith<_$YesNoNaInputFieldImpl> get copyWith =>
      __$$YesNoNaInputFieldImplCopyWithImpl<_$YesNoNaInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        geolocation,
  }) {
    return yesnona(
        id,
        label,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        actionMessage,
        isConditional,
        choices,
        showNoneItem,
        noneText,
        showOtherItem,
        otherText,
        otherErrorText,
        otherPlaceholder,
        showClearButton);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
  }) {
    return yesnona?.call(
        id,
        label,
        answer,
        description,
        visible,
        isRequired,
        readOnly,
        requiredErrorText,
        actionMessage,
        isConditional,
        choices,
        showNoneItem,
        noneText,
        showOtherItem,
        otherText,
        otherErrorText,
        otherPlaceholder,
        showClearButton);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
    required TResult orElse(),
  }) {
    if (yesnona != null) {
      return yesnona(
          id,
          label,
          answer,
          description,
          visible,
          isRequired,
          readOnly,
          requiredErrorText,
          actionMessage,
          isConditional,
          choices,
          showNoneItem,
          noneText,
          showOtherItem,
          otherText,
          otherErrorText,
          otherPlaceholder,
          showClearButton);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
  }) {
    return yesnona(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
  }) {
    return yesnona?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    required TResult orElse(),
  }) {
    if (yesnona != null) {
      return yesnona(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$YesNoNaInputFieldImplToJson(
      this,
    );
  }
}

abstract class YesNoNaInputField implements InputField {
  const factory YesNoNaInputField(
          {@JsonKey(name: 'id') required final String id,
          @JsonKey(name: 'label') final String? label,
          @JsonKey(name: 'answer') final String? answer,
          @JsonKey(name: 'description') final String? description,
          @JsonKey(name: 'visible') final bool visible,
          @JsonKey(name: 'isRequired') final bool isRequired,
          @JsonKey(name: 'readOnly') final bool readOnly,
          @JsonKey(name: 'requiredErrorText') final String? requiredErrorText,
          @JsonKey(name: 'actionMessage') final String? actionMessage,
          @JsonKey(name: 'isConditional') final bool isConditional,
          @JsonKey(name: 'choice')
          @ValueTextConverter()
          final List<ValueText> choices,
          @JsonKey(name: 'showNoneItem') final bool showNoneItem,
          @JsonKey(name: 'noneText') final String? noneText,
          @JsonKey(name: 'showOtherItem') final bool showOtherItem,
          @JsonKey(name: 'otherText') final String? otherText,
          @JsonKey(name: 'otherErrorText') final String? otherErrorText,
          @JsonKey(name: 'otherPlaceholder') final String? otherPlaceholder,
          @JsonKey(name: 'showClearButton') final bool showClearButton}) =
      _$YesNoNaInputFieldImpl;

  factory YesNoNaInputField.fromJson(Map<String, dynamic> json) =
      _$YesNoNaInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @override
  @JsonKey(name: 'answer')
  String? get answer;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @override
  @JsonKey(name: 'visible')
  bool get visible;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;
  @override
  @JsonKey(name: 'readOnly')
  bool get readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  String? get requiredErrorText;
  @JsonKey(name: 'actionMessage')
  String? get actionMessage;
  @JsonKey(name: 'isConditional')
  bool get isConditional; // Fields.
  @JsonKey(name: 'choice')
  @ValueTextConverter()
  List<ValueText> get choices; // None
  @JsonKey(name: 'showNoneItem')
  bool get showNoneItem;
  @JsonKey(name: 'noneText')
  String? get noneText; // Other
  @JsonKey(name: 'showOtherItem')
  bool get showOtherItem;
  @JsonKey(name: 'otherText')
  String? get otherText;
  @JsonKey(name: 'otherErrorText')
  String? get otherErrorText;
  @JsonKey(name: 'otherPlaceholder')
  String? get otherPlaceholder; // Show clear
  @JsonKey(name: 'showClearButton')
  bool get showClearButton;
  @override
  @JsonKey(ignore: true)
  _$$YesNoNaInputFieldImplCopyWith<_$YesNoNaInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$FileInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$FileInputFieldImplCopyWith(_$FileInputFieldImpl value,
          $Res Function(_$FileInputFieldImpl) then) =
      __$$FileInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'visible') bool visible,
      @JsonKey(name: 'isMultiple') bool isMultiple,
      @JsonKey(name: 'isRequired') bool isRequired,
      @JsonKey(name: 'readOnly') bool readOnly,
      @JsonKey(name: 'requiredErrorText') String? requiredErrorText});
}

/// @nodoc
class __$$FileInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$FileInputFieldImpl>
    implements _$$FileInputFieldImplCopyWith<$Res> {
  __$$FileInputFieldImplCopyWithImpl(
      _$FileInputFieldImpl _value, $Res Function(_$FileInputFieldImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? answer = freezed,
    Object? description = freezed,
    Object? visible = null,
    Object? isMultiple = null,
    Object? isRequired = null,
    Object? readOnly = null,
    Object? requiredErrorText = freezed,
  }) {
    return _then(_$FileInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value._answer
          : answer // ignore: cast_nullable_to_non_nullable
              as List<Map<String, dynamic>>?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      visible: null == visible
          ? _value.visible
          : visible // ignore: cast_nullable_to_non_nullable
              as bool,
      isMultiple: null == isMultiple
          ? _value.isMultiple
          : isMultiple // ignore: cast_nullable_to_non_nullable
              as bool,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
      readOnly: null == readOnly
          ? _value.readOnly
          : readOnly // ignore: cast_nullable_to_non_nullable
              as bool,
      requiredErrorText: freezed == requiredErrorText
          ? _value.requiredErrorText
          : requiredErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$FileInputFieldImpl implements FileInputField {
  const _$FileInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'answer') final List<Map<String, dynamic>>? answer,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'visible') this.visible = true,
      @JsonKey(name: 'isMultiple') this.isMultiple = false,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      @JsonKey(name: 'readOnly') this.readOnly = false,
      @JsonKey(name: 'requiredErrorText') this.requiredErrorText,
      final String? $type})
      : _answer = answer,
        $type = $type ?? 'files';

  factory _$FileInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$FileInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  final List<Map<String, dynamic>>? _answer;
  @override
  @JsonKey(name: 'answer')
  List<Map<String, dynamic>>? get answer {
    final value = _answer;
    if (value == null) return null;
    if (_answer is EqualUnmodifiableListView) return _answer;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(value);
  }

  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'visible')
  final bool visible;
  @override
  @JsonKey(name: 'isMultiple')
  final bool isMultiple;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;
  @override
  @JsonKey(name: 'readOnly')
  final bool readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  final String? requiredErrorText;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.files(id: $id, label: $label, answer: $answer, description: $description, visible: $visible, isMultiple: $isMultiple, isRequired: $isRequired, readOnly: $readOnly, requiredErrorText: $requiredErrorText)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$FileInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            const DeepCollectionEquality().equals(other._answer, _answer) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.visible, visible) || other.visible == visible) &&
            (identical(other.isMultiple, isMultiple) ||
                other.isMultiple == isMultiple) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired) &&
            (identical(other.readOnly, readOnly) ||
                other.readOnly == readOnly) &&
            (identical(other.requiredErrorText, requiredErrorText) ||
                other.requiredErrorText == requiredErrorText));
  }

  @JsonKey(ignore: true)
  @override
  int get hashCode => Object.hash(
      runtimeType,
      id,
      label,
      const DeepCollectionEquality().hash(_answer),
      description,
      visible,
      isMultiple,
      isRequired,
      readOnly,
      requiredErrorText);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$FileInputFieldImplCopyWith<_$FileInputFieldImpl> get copyWith =>
      __$$FileInputFieldImplCopyWithImpl<_$FileInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        geolocation,
  }) {
    return files(id, label, answer, description, visible, isMultiple,
        isRequired, readOnly, requiredErrorText);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
  }) {
    return files?.call(id, label, answer, description, visible, isMultiple,
        isRequired, readOnly, requiredErrorText);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
    required TResult orElse(),
  }) {
    if (files != null) {
      return files(id, label, answer, description, visible, isMultiple,
          isRequired, readOnly, requiredErrorText);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
  }) {
    return files(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
  }) {
    return files?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    required TResult orElse(),
  }) {
    if (files != null) {
      return files(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$FileInputFieldImplToJson(
      this,
    );
  }
}

abstract class FileInputField implements InputField {
  const factory FileInputField(
      {@JsonKey(name: 'id') required final String id,
      @JsonKey(name: 'label') final String? label,
      @JsonKey(name: 'answer') final List<Map<String, dynamic>>? answer,
      @JsonKey(name: 'description') final String? description,
      @JsonKey(name: 'visible') final bool visible,
      @JsonKey(name: 'isMultiple') final bool isMultiple,
      @JsonKey(name: 'isRequired') final bool isRequired,
      @JsonKey(name: 'readOnly') final bool readOnly,
      @JsonKey(name: 'requiredErrorText')
      final String? requiredErrorText}) = _$FileInputFieldImpl;

  factory FileInputField.fromJson(Map<String, dynamic> json) =
      _$FileInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @override
  @JsonKey(name: 'answer')
  List<Map<String, dynamic>>? get answer;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @override
  @JsonKey(name: 'visible')
  bool get visible;
  @JsonKey(name: 'isMultiple')
  bool get isMultiple;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;
  @override
  @JsonKey(name: 'readOnly')
  bool get readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  String? get requiredErrorText;
  @override
  @JsonKey(ignore: true)
  _$$FileInputFieldImplCopyWith<_$FileInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$ImageInputFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$ImageInputFieldImplCopyWith(_$ImageInputFieldImpl value,
          $Res Function(_$ImageInputFieldImpl) then) =
      __$$ImageInputFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'visible') bool visible,
      @JsonKey(name: 'isMultiple') bool isMultiple,
      @JsonKey(name: 'isRequired') bool isRequired,
      @JsonKey(name: 'readOnly') bool readOnly,
      @JsonKey(name: 'requiredErrorText') String? requiredErrorText});
}

/// @nodoc
class __$$ImageInputFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$ImageInputFieldImpl>
    implements _$$ImageInputFieldImplCopyWith<$Res> {
  __$$ImageInputFieldImplCopyWithImpl(
      _$ImageInputFieldImpl _value, $Res Function(_$ImageInputFieldImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? answer = freezed,
    Object? description = freezed,
    Object? visible = null,
    Object? isMultiple = null,
    Object? isRequired = null,
    Object? readOnly = null,
    Object? requiredErrorText = freezed,
  }) {
    return _then(_$ImageInputFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value._answer
          : answer // ignore: cast_nullable_to_non_nullable
              as List<Map<String, dynamic>>?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      visible: null == visible
          ? _value.visible
          : visible // ignore: cast_nullable_to_non_nullable
              as bool,
      isMultiple: null == isMultiple
          ? _value.isMultiple
          : isMultiple // ignore: cast_nullable_to_non_nullable
              as bool,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
      readOnly: null == readOnly
          ? _value.readOnly
          : readOnly // ignore: cast_nullable_to_non_nullable
              as bool,
      requiredErrorText: freezed == requiredErrorText
          ? _value.requiredErrorText
          : requiredErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$ImageInputFieldImpl implements ImageInputField {
  const _$ImageInputFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'answer') final List<Map<String, dynamic>>? answer,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'visible') this.visible = true,
      @JsonKey(name: 'isMultiple') this.isMultiple = false,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      @JsonKey(name: 'readOnly') this.readOnly = false,
      @JsonKey(name: 'requiredErrorText') this.requiredErrorText,
      final String? $type})
      : _answer = answer,
        $type = $type ?? 'images';

  factory _$ImageInputFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$ImageInputFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  final List<Map<String, dynamic>>? _answer;
  @override
  @JsonKey(name: 'answer')
  List<Map<String, dynamic>>? get answer {
    final value = _answer;
    if (value == null) return null;
    if (_answer is EqualUnmodifiableListView) return _answer;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(value);
  }

  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'visible')
  final bool visible;
  @override
  @JsonKey(name: 'isMultiple')
  final bool isMultiple;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;
  @override
  @JsonKey(name: 'readOnly')
  final bool readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  final String? requiredErrorText;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.images(id: $id, label: $label, answer: $answer, description: $description, visible: $visible, isMultiple: $isMultiple, isRequired: $isRequired, readOnly: $readOnly, requiredErrorText: $requiredErrorText)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$ImageInputFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            const DeepCollectionEquality().equals(other._answer, _answer) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.visible, visible) || other.visible == visible) &&
            (identical(other.isMultiple, isMultiple) ||
                other.isMultiple == isMultiple) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired) &&
            (identical(other.readOnly, readOnly) ||
                other.readOnly == readOnly) &&
            (identical(other.requiredErrorText, requiredErrorText) ||
                other.requiredErrorText == requiredErrorText));
  }

  @JsonKey(ignore: true)
  @override
  int get hashCode => Object.hash(
      runtimeType,
      id,
      label,
      const DeepCollectionEquality().hash(_answer),
      description,
      visible,
      isMultiple,
      isRequired,
      readOnly,
      requiredErrorText);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$ImageInputFieldImplCopyWith<_$ImageInputFieldImpl> get copyWith =>
      __$$ImageInputFieldImplCopyWithImpl<_$ImageInputFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        geolocation,
  }) {
    return images(id, label, answer, description, visible, isMultiple,
        isRequired, readOnly, requiredErrorText);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
  }) {
    return images?.call(id, label, answer, description, visible, isMultiple,
        isRequired, readOnly, requiredErrorText);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
    required TResult orElse(),
  }) {
    if (images != null) {
      return images(id, label, answer, description, visible, isMultiple,
          isRequired, readOnly, requiredErrorText);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
  }) {
    return images(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
  }) {
    return images?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    required TResult orElse(),
  }) {
    if (images != null) {
      return images(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$ImageInputFieldImplToJson(
      this,
    );
  }
}

abstract class ImageInputField implements InputField {
  const factory ImageInputField(
      {@JsonKey(name: 'id') required final String id,
      @JsonKey(name: 'label') final String? label,
      @JsonKey(name: 'answer') final List<Map<String, dynamic>>? answer,
      @JsonKey(name: 'description') final String? description,
      @JsonKey(name: 'visible') final bool visible,
      @JsonKey(name: 'isMultiple') final bool isMultiple,
      @JsonKey(name: 'isRequired') final bool isRequired,
      @JsonKey(name: 'readOnly') final bool readOnly,
      @JsonKey(name: 'requiredErrorText')
      final String? requiredErrorText}) = _$ImageInputFieldImpl;

  factory ImageInputField.fromJson(Map<String, dynamic> json) =
      _$ImageInputFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @override
  @JsonKey(name: 'answer')
  List<Map<String, dynamic>>? get answer;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @override
  @JsonKey(name: 'visible')
  bool get visible;
  @JsonKey(name: 'isMultiple')
  bool get isMultiple;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;
  @override
  @JsonKey(name: 'readOnly')
  bool get readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  String? get requiredErrorText;
  @override
  @JsonKey(ignore: true)
  _$$ImageInputFieldImplCopyWith<_$ImageInputFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$GeolocationFieldImplCopyWith<$Res>
    implements $InputFieldCopyWith<$Res> {
  factory _$$GeolocationFieldImplCopyWith(_$GeolocationFieldImpl value,
          $Res Function(_$GeolocationFieldImpl) then) =
      __$$GeolocationFieldImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'id') String id,
      @JsonKey(name: 'label') String? label,
      @JsonKey(name: 'answer') Map<String, dynamic>? answer,
      @JsonKey(name: 'description') String? description,
      @JsonKey(name: 'visible') bool visible,
      @JsonKey(name: 'isRequired') bool isRequired,
      @JsonKey(name: 'readOnly') bool readOnly,
      @JsonKey(name: 'requiredErrorText') String? requiredErrorText});
}

/// @nodoc
class __$$GeolocationFieldImplCopyWithImpl<$Res>
    extends _$InputFieldCopyWithImpl<$Res, _$GeolocationFieldImpl>
    implements _$$GeolocationFieldImplCopyWith<$Res> {
  __$$GeolocationFieldImplCopyWithImpl(_$GeolocationFieldImpl _value,
      $Res Function(_$GeolocationFieldImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? label = freezed,
    Object? answer = freezed,
    Object? description = freezed,
    Object? visible = null,
    Object? isRequired = null,
    Object? readOnly = null,
    Object? requiredErrorText = freezed,
  }) {
    return _then(_$GeolocationFieldImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      label: freezed == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String?,
      answer: freezed == answer
          ? _value._answer
          : answer // ignore: cast_nullable_to_non_nullable
              as Map<String, dynamic>?,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      visible: null == visible
          ? _value.visible
          : visible // ignore: cast_nullable_to_non_nullable
              as bool,
      isRequired: null == isRequired
          ? _value.isRequired
          : isRequired // ignore: cast_nullable_to_non_nullable
              as bool,
      readOnly: null == readOnly
          ? _value.readOnly
          : readOnly // ignore: cast_nullable_to_non_nullable
              as bool,
      requiredErrorText: freezed == requiredErrorText
          ? _value.requiredErrorText
          : requiredErrorText // ignore: cast_nullable_to_non_nullable
              as String?,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$GeolocationFieldImpl implements GeolocationField {
  const _$GeolocationFieldImpl(
      {@JsonKey(name: 'id') required this.id,
      @JsonKey(name: 'label') this.label,
      @JsonKey(name: 'answer') final Map<String, dynamic>? answer,
      @JsonKey(name: 'description') this.description,
      @JsonKey(name: 'visible') this.visible = true,
      @JsonKey(name: 'isRequired') this.isRequired = false,
      @JsonKey(name: 'readOnly') this.readOnly = false,
      @JsonKey(name: 'requiredErrorText') this.requiredErrorText,
      final String? $type})
      : _answer = answer,
        $type = $type ?? 'geolocation';

  factory _$GeolocationFieldImpl.fromJson(Map<String, dynamic> json) =>
      _$$GeolocationFieldImplFromJson(json);

  @override
  @JsonKey(name: 'id')
  final String id;
  @override
  @JsonKey(name: 'label')
  final String? label;
  final Map<String, dynamic>? _answer;
  @override
  @JsonKey(name: 'answer')
  Map<String, dynamic>? get answer {
    final value = _answer;
    if (value == null) return null;
    if (_answer is EqualUnmodifiableMapView) return _answer;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableMapView(value);
  }

  @override
  @JsonKey(name: 'description')
  final String? description;
  @override
  @JsonKey(name: 'visible')
  final bool visible;
  @override
  @JsonKey(name: 'isRequired')
  final bool isRequired;
  @override
  @JsonKey(name: 'readOnly')
  final bool readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  final String? requiredErrorText;

  @JsonKey(name: 'type')
  final String $type;

  @override
  String toString() {
    return 'InputField.geolocation(id: $id, label: $label, answer: $answer, description: $description, visible: $visible, isRequired: $isRequired, readOnly: $readOnly, requiredErrorText: $requiredErrorText)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$GeolocationFieldImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.label, label) || other.label == label) &&
            const DeepCollectionEquality().equals(other._answer, _answer) &&
            (identical(other.description, description) ||
                other.description == description) &&
            (identical(other.visible, visible) || other.visible == visible) &&
            (identical(other.isRequired, isRequired) ||
                other.isRequired == isRequired) &&
            (identical(other.readOnly, readOnly) ||
                other.readOnly == readOnly) &&
            (identical(other.requiredErrorText, requiredErrorText) ||
                other.requiredErrorText == requiredErrorText));
  }

  @JsonKey(ignore: true)
  @override
  int get hashCode => Object.hash(
      runtimeType,
      id,
      label,
      const DeepCollectionEquality().hash(_answer),
      description,
      visible,
      isRequired,
      readOnly,
      requiredErrorText);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$GeolocationFieldImplCopyWith<_$GeolocationFieldImpl> get copyWith =>
      __$$GeolocationFieldImplCopyWithImpl<_$GeolocationFieldImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        fallback,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        text,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        signature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)
        multisignature,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        date,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        instruction,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        section,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        time,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        url,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        number,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        phone,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        email,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)
        datetimelocal,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)
        comment,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)
        dropdown,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        multipleselect,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)
        checkbox,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        radiogroup,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesno,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)
        yesnona,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        files,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        images,
    required TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)
        geolocation,
  }) {
    return geolocation(id, label, answer, description, visible, isRequired,
        readOnly, requiredErrorText);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult? Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
  }) {
    return geolocation?.call(id, label, answer, description, visible,
        isRequired, readOnly, requiredErrorText);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        fallback,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'name') String? name,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        text,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        signature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'answer') List<SingleSignature>? answer)?
        multisignature,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        date,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'attachments')
            List<Map<String, dynamic>>? attachments,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        instruction,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'instruction') String? instruction,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        section,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        time,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        url,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        number,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        phone,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        email,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength,
            @JsonKey(name: 'min') dynamic min,
            @JsonKey(name: 'minErrorText') String? minErrorText,
            @JsonKey(name: 'max') dynamic max,
            @JsonKey(name: 'maxErrorText') String? maxErrorText)?
        datetimelocal,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'maxLength') int? maxLength)?
        comment,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'isConditional') bool? isConditional,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'allowClear') bool allowClear,
            @JsonKey(name: 'placeholder') String? hintText,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder)?
        dropdown,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        multipleselect,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'fromManualList') bool fromManualList,
            @JsonKey(name: 'selectedLinkListLabel') String? answerList,
            @JsonKey(name: 'islinked_query') String? linkedQuery,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'maxSelectedChoices') int? maxSelectedChoices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showSelectAllItem') bool showSelectAllItem)?
        checkbox,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        radiogroup,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesno,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') String? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText,
            @JsonKey(name: 'actionMessage') String? actionMessage,
            @JsonKey(name: 'isConditional') bool isConditional,
            @JsonKey(name: 'choice')
            @ValueTextConverter()
            List<ValueText> choices,
            @JsonKey(name: 'showNoneItem') bool showNoneItem,
            @JsonKey(name: 'noneText') String? noneText,
            @JsonKey(name: 'showOtherItem') bool showOtherItem,
            @JsonKey(name: 'otherText') String? otherText,
            @JsonKey(name: 'otherErrorText') String? otherErrorText,
            @JsonKey(name: 'otherPlaceholder') String? otherPlaceholder,
            @JsonKey(name: 'showClearButton') bool showClearButton)?
        yesnona,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        files,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') List<Map<String, dynamic>>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isMultiple') bool isMultiple,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        images,
    TResult Function(
            @JsonKey(name: 'id') String id,
            @JsonKey(name: 'label') String? label,
            @JsonKey(name: 'answer') Map<String, dynamic>? answer,
            @JsonKey(name: 'description') String? description,
            @JsonKey(name: 'visible') bool visible,
            @JsonKey(name: 'isRequired') bool isRequired,
            @JsonKey(name: 'readOnly') bool readOnly,
            @JsonKey(name: 'requiredErrorText') String? requiredErrorText)?
        geolocation,
    required TResult orElse(),
  }) {
    if (geolocation != null) {
      return geolocation(id, label, answer, description, visible, isRequired,
          readOnly, requiredErrorText);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_FallbackInputField value) fallback,
    required TResult Function(TextInputField value) text,
    required TResult Function(SignatureInputField value) signature,
    required TResult Function(MultiSignatureInputField value) multisignature,
    required TResult Function(DateInputField value) date,
    required TResult Function(InstructionInputField value) instruction,
    required TResult Function(SectionInputField value) section,
    required TResult Function(TimeInputField value) time,
    required TResult Function(UrlInputField value) url,
    required TResult Function(NumberInputField value) number,
    required TResult Function(PhoneInputField value) phone,
    required TResult Function(EmailInputField value) email,
    required TResult Function(DateTimeInputField value) datetimelocal,
    required TResult Function(CommentInputField value) comment,
    required TResult Function(DropdownInputField value) dropdown,
    required TResult Function(MultipleInputField value) multipleselect,
    required TResult Function(CheckboxInputField value) checkbox,
    required TResult Function(RadioInputField value) radiogroup,
    required TResult Function(YesNoInputField value) yesno,
    required TResult Function(YesNoNaInputField value) yesnona,
    required TResult Function(FileInputField value) files,
    required TResult Function(ImageInputField value) images,
    required TResult Function(GeolocationField value) geolocation,
  }) {
    return geolocation(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_FallbackInputField value)? fallback,
    TResult? Function(TextInputField value)? text,
    TResult? Function(SignatureInputField value)? signature,
    TResult? Function(MultiSignatureInputField value)? multisignature,
    TResult? Function(DateInputField value)? date,
    TResult? Function(InstructionInputField value)? instruction,
    TResult? Function(SectionInputField value)? section,
    TResult? Function(TimeInputField value)? time,
    TResult? Function(UrlInputField value)? url,
    TResult? Function(NumberInputField value)? number,
    TResult? Function(PhoneInputField value)? phone,
    TResult? Function(EmailInputField value)? email,
    TResult? Function(DateTimeInputField value)? datetimelocal,
    TResult? Function(CommentInputField value)? comment,
    TResult? Function(DropdownInputField value)? dropdown,
    TResult? Function(MultipleInputField value)? multipleselect,
    TResult? Function(CheckboxInputField value)? checkbox,
    TResult? Function(RadioInputField value)? radiogroup,
    TResult? Function(YesNoInputField value)? yesno,
    TResult? Function(YesNoNaInputField value)? yesnona,
    TResult? Function(FileInputField value)? files,
    TResult? Function(ImageInputField value)? images,
    TResult? Function(GeolocationField value)? geolocation,
  }) {
    return geolocation?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_FallbackInputField value)? fallback,
    TResult Function(TextInputField value)? text,
    TResult Function(SignatureInputField value)? signature,
    TResult Function(MultiSignatureInputField value)? multisignature,
    TResult Function(DateInputField value)? date,
    TResult Function(InstructionInputField value)? instruction,
    TResult Function(SectionInputField value)? section,
    TResult Function(TimeInputField value)? time,
    TResult Function(UrlInputField value)? url,
    TResult Function(NumberInputField value)? number,
    TResult Function(PhoneInputField value)? phone,
    TResult Function(EmailInputField value)? email,
    TResult Function(DateTimeInputField value)? datetimelocal,
    TResult Function(CommentInputField value)? comment,
    TResult Function(DropdownInputField value)? dropdown,
    TResult Function(MultipleInputField value)? multipleselect,
    TResult Function(CheckboxInputField value)? checkbox,
    TResult Function(RadioInputField value)? radiogroup,
    TResult Function(YesNoInputField value)? yesno,
    TResult Function(YesNoNaInputField value)? yesnona,
    TResult Function(FileInputField value)? files,
    TResult Function(ImageInputField value)? images,
    TResult Function(GeolocationField value)? geolocation,
    required TResult orElse(),
  }) {
    if (geolocation != null) {
      return geolocation(this);
    }
    return orElse();
  }

  @override
  Map<String, dynamic> toJson() {
    return _$$GeolocationFieldImplToJson(
      this,
    );
  }
}

abstract class GeolocationField implements InputField {
  const factory GeolocationField(
      {@JsonKey(name: 'id') required final String id,
      @JsonKey(name: 'label') final String? label,
      @JsonKey(name: 'answer') final Map<String, dynamic>? answer,
      @JsonKey(name: 'description') final String? description,
      @JsonKey(name: 'visible') final bool visible,
      @JsonKey(name: 'isRequired') final bool isRequired,
      @JsonKey(name: 'readOnly') final bool readOnly,
      @JsonKey(name: 'requiredErrorText')
      final String? requiredErrorText}) = _$GeolocationFieldImpl;

  factory GeolocationField.fromJson(Map<String, dynamic> json) =
      _$GeolocationFieldImpl.fromJson;

  @override
  @JsonKey(name: 'id')
  String get id;
  @override
  @JsonKey(name: 'label')
  String? get label;
  @override
  @JsonKey(name: 'answer')
  Map<String, dynamic>? get answer;
  @override
  @JsonKey(name: 'description')
  String? get description;
  @override
  @JsonKey(name: 'visible')
  bool get visible;
  @override
  @JsonKey(name: 'isRequired')
  bool get isRequired;
  @override
  @JsonKey(name: 'readOnly')
  bool get readOnly;
  @override
  @JsonKey(name: 'requiredErrorText')
  String? get requiredErrorText;
  @override
  @JsonKey(ignore: true)
  _$$GeolocationFieldImplCopyWith<_$GeolocationFieldImpl> get copyWith =>
      throw _privateConstructorUsedError;
}
